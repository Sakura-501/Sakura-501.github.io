<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于勤工俭学那些事</title>
      <link href="/2022/03/24/guan-yu-qin-gong-jian-xue-na-xie-shi/"/>
      <url>/2022/03/24/guan-yu-qin-gong-jian-xue-na-xie-shi/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="e4af275528400ee182f38e5427cde753bd2da281c12a912d17c9446aedaf8774"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 闲言碎语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 勤工俭学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树状数组学习</title>
      <link href="/2022/03/23/shu-zhuang-shu-zu-xue-xi/"/>
      <url>/2022/03/23/shu-zhuang-shu-zu-xue-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p><del>做了一道大水题</del>，挺有趣的，做不出来百度到可以使用<code>树状数组</code>或者<code>线段树</code>来解答，于是选择了实现起来比较简单的树状数组来解题。一开始思考了很久，想不通为啥可以使用树状数组就能解出来，逛了会b站回来就想通了（<del>逆大天</del>），在此感谢<code>xenny</code>大佬的<a href="https://www.cnblogs.com/xenny/p/9739600.html">树状数组详解</a>，帮助我学习到了一个<code>全新的知识点</code>😇。</p><h3 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h3><p>先来谈谈树状数组：就是拿数组来模拟树形的结构，可以解决大部分区间更新以及求和的问题。  </p><p>先看看具体的例子：  </p><p><img src="/images/tree-array.png" class="lazyload placeholder" data-srcset="/images/tree-array.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg">  </p><p>红色的为<code>C[i]</code>，黑色的为<code>A[i]</code>，关系式可以推出如下：  </p><ul><li>C[1] &#x3D; A[1];</li><li>C[2] &#x3D; A[1] + A[2];</li><li>C[3] &#x3D; A[3];</li><li>C[4] &#x3D; A[1] + A[2] + A[3] + A[4];</li><li>C[5] &#x3D; A[5];</li><li>C[6] &#x3D; A[5] + A[6];</li><li>C[7] &#x3D; A[7];</li><li>C[8] &#x3D; A[1] + A[2] + A[3] + A[4] + A[5] + A[6] + A[7] + A[8];</li></ul><p>然后就<del>自然而然</del>可以推出来一些规律性的东西：  </p><p><strong>C[i] &#x3D; A[i - 2^k+1] + A[i - 2^k+2] +…+ A[i];</strong> (其中k为就是从最低位开始，<code>第一个为1的2的指数</code>)  </p><p>又容易得出<strong>SUM（i） &#x3D; C[i] + C[i-2^k（1）] + C[(i - 2^k（1）) - 2^k（2）] + …..；</strong>(k从2^0开始往上递增，直到c[i]不存在时)</p><p>然后就到了第一个难点，我第一个看不懂的地方：<code> i&amp;(-i);</code>  </p><p>翻阅树状数组的文章时才明白是<code>前人的</code>的智慧。。。<code>2^k = i&amp;(-i);</code></p><p><del>开始偷懒复制粘贴了</del>  </p><p><code>这里利用的负数的存储特性，负数是以补码存储的，对于整数运算 x&amp;(-x)有     ● 当x为0时，即 0 &amp; 0，结果为0；     ●当x为奇数时，最后一个比特位为1，取反加1没有进位，故x和-x除最后一位外前面的位正好相反，按位与结果为0。结果为1。     ●当x为偶数，且为2的m次方时，x的二进制表示中只有一位是1（从右往左的第m+1位），其右边有m位0，故x取反加1后，从右到左第有m个0，第m+1位及其左边全是1。这样，x&amp; (-x) 得到的就是x。      ●当x为偶数，却不为2的m次方的形式时，可以写作x= y * (2^k)。其中，y的最低位为1。实际上就是把x用一个奇数左移k位来表示。这时，x的二进制表示最右边有k个0，从右往左第k+1位为1。当对x取反时，最右边的k位0变成1，第k+1位变为0；再加1，最右边的k位就又变成了0，第k+1位因为进位的关系变成了1。左边的位因为没有进位，正好和x原来对应的位上的值相反。二者按位与，得到：第k+1位上为1，左边右边都为0。结果为2^k。     总结一下：x&amp;(-x)，当x为0时结果为0；x为奇数时，结果为1；x为偶数时，结果为x中2的最大次方的因子。</code></p><p>而且这个有一个专门的称呼，叫做<code>lowbit</code>，即取<code>2^k</code>。  </p><p>下面就贴贴代码模板了：  </p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits&#x2F;stdc++.h&gt;using namespace std;int n,m;int a[50005],c[50005]; &#x2F;&#x2F;对应原数组和树状数组int lowbit(int x)&#123;    return x&amp;(-x);&#125;void updata(int i,int k)&#123;    &#x2F;&#x2F;在i位置加上k    while(i &lt;&#x3D; n)&#123;        c[i] +&#x3D; k;        i +&#x3D; lowbit(i);    &#125;&#125;int getsum(int i)&#123;        &#x2F;&#x2F;求A[1 - i]的和    int res &#x3D; 0;    while(i &gt; 0)&#123;        res +&#x3D; c[i];        i -&#x3D; lowbit(i);    &#125;    return res;&#125;int main()&#123;    int t;    cin&gt;&gt;t;    for(int tot &#x3D; 1; tot &lt;&#x3D; t; tot++)&#123;        cout &lt;&lt; &quot;Case &quot; &lt;&lt; tot &lt;&lt; &quot;:&quot; &lt;&lt; endl;        memset(a, 0, sizeof a);        memset(c, 0, sizeof c);        cin&gt;&gt;n;        for(int i &#x3D; 1; i &lt;&#x3D; n; i++)&#123;            cin&gt;&gt;a[i];            updata(i,a[i]);   &#x2F;&#x2F;输入初值的时候，也相当于更新了值        &#125;        string s;        int x,y;        while(cin&gt;&gt;s &amp;&amp; s[0] !&#x3D; &#39;E&#39;)&#123;            cin&gt;&gt;x&gt;&gt;y;            if(s[0] &#x3D;&#x3D; &#39;Q&#39;)&#123;    &#x2F;&#x2F;求和操作                int sum &#x3D; getsum(y) - getsum(x-1);    &#x2F;&#x2F;x-y区间和也就等于1-y区间和减去1-(x-1)区间和                cout &lt;&lt; sum &lt;&lt; endl;            &#125;            else if(s[0] &#x3D;&#x3D; &#39;A&#39;)&#123;                updata(x,y);            &#125;            else if(s[0] &#x3D;&#x3D; &#39;S&#39;)&#123;                updata(x,-y);    &#x2F;&#x2F;减去操作，即为加上相反数            &#125;        &#125;    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于树状数组的变形，有时间再写吧（<del>可能不会再写了，毕竟就是学这一段时间</del></p><p>————————————————</p><h3 id="原题目"><a href="#原题目" class="headerlink" title="原题目"></a>原题目</h3><p>题目竟然叫作<code>这是一道大水题</code>，焯😡</p><p><img src="/images/tree-sum.png" class="lazyload placeholder" data-srcset="/images/tree-sum.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg">  </p><p>对应AC的代码：  </p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;bits&#x2F;stdc++.h&gt; using namespace std;typedef long long ll;ll a[300005],c[300005]&#x3D;&#123;0&#125;;ll n,m;ll result&#x3D;0;inline ll read()&#123;int x&#x3D;0,f&#x3D;1;char ch&#x3D;getchar();    while(ch&lt;&#39;0&#39;||ch&gt;&#39;9&#39;)&#123;if(ch&#x3D;&#x3D;&#39;-&#39;)f&#x3D;-1;ch&#x3D;getchar();&#125;    while(ch&gt;&#x3D;&#39;0&#39;&amp;&amp;ch&lt;&#x3D;&#39;9&#39;)&#123;x&#x3D;x*10+ch-&#39;0&#39;;ch&#x3D;getchar();&#125;    return x*f;&#125;ll lowbit(ll x)&#123;return x&amp;(-x);&#125;void update(ll i,ll value)&#123;while(i&lt;&#x3D;n)&#123;c[i]+&#x3D;value;i+&#x3D;lowbit(i);&#125;&#125;ll getsum(ll i )&#123;ll sum&#x3D;0;while(i&gt;0)&#123;sum+&#x3D;c[i];i-&#x3D;lowbit(i);&#125;return sum;&#125;int main()&#123;n&#x3D;read();m&#x3D;read();while(m--)&#123;ll c;c&#x3D;read();if(c&#x3D;&#x3D;0)&#123;ll left,right,value;left&#x3D;read();right&#x3D;read();value&#x3D;read();ll temp&#x3D;(right-left+1)*value;result+&#x3D;temp;update(left,temp);update(right+1,-temp);&#125;else &#123;ll pos;pos&#x3D;read();cout&lt;&lt;result-getsum(pos)&lt;&lt;endl;&#125; &#125;  return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于github本地项目提交</title>
      <link href="/2022/03/22/guan-yu-github-ben-di-xiang-mu-ti-jiao/"/>
      <url>/2022/03/22/guan-yu-github-ben-di-xiang-mu-ti-jiao/</url>
      
        <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p><code>github</code>项目提交的步骤总是会忘记，所以开一篇文章来记录一下，仅记录最简单的第一种方式。  </p><p>查阅的文章：<a href="https://www.cnblogs.com/du-hong/p/9921214.html">Git的使用–如何将本地项目上传到Github（三种简单、方便的方法）</a>  </p><h3 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h3><p>首先本地下载安装git工具  </p><p>登录<code>github</code>，<code>new repository</code> 新建一个新的项目  </p><p>记得新建完项目之后，copy一下<code>https</code>的项目地址  </p><p>然后来到本地操作，来到项目文件夹，右键git bash here 打开命令行  </p><p><code>git clone 项目名称</code> 把仓库克隆到本地上面  </p><p>再把自己项目的所有文件copy到刚刚建立的仓库文件夹  </p><p><code>cd</code>到仓库文件夹  </p><p>接下来依次输入一下代码即可完成剩余操作：  </p><p><code>git add *</code>  </p><p><code>git commit -m &quot;备注的提交信息&quot;</code>  </p><p><code>git push -u origin main（这个是你分支的名称）</code></p><p>————————————————————</p>]]></content>
      
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RegExp学习</title>
      <link href="/2022/03/20/regexp-xue-xi/"/>
      <url>/2022/03/20/regexp-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>其实很早就接触<code>正则表达式</code>了，知识一直没有系统学习，总是记了一部分就会忘记，所以这一次记录一下学习的过程。  学习的网站是：<a href="https://www.runoob.com/regexp/regexp-syntax.html">菜鸟教程的正则表达式教学</a>(所以可能都是复制粘贴，经典CV大法hhhhh</p><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul><li><strong>runoo+b</strong>，可以匹配 <strong>runoob、runooob、runoooooob</strong> 等，**+** 号代表前面的字符必须至少出现一次（1次或多次）。</li><li><strong>runoo*b</strong>，可以匹配 <strong>runob、runoob、runoooooob</strong> 等，***** 号代表前面的字符可以不出现，也可以出现一次或者多次（0次、或1次、或多次）。</li><li><strong>colou?r</strong> 可以匹配 <strong>color</strong> 或者 <strong>colour</strong>，**?** 问号代表前面的字符最多只可以出现一次（0次或1次）。</li></ul><p><code>/[^aeiou]/</code>匹配除了 <strong>[…]</strong> 中字符的所有字符，例如 <strong>[^aeiou]</strong> 匹配字符串 “google runoob taobao” 中除了 e o u a 字母的所有字母。  </p><p><code>/[A-Z]/g</code> 表示一个区间，匹配所有大写字母，[a-z] 表示所有小写字母。    </p><p><code>/./g</code>  匹配除换行符<code>（\n、\r）</code>之外的任何单个字符，相等于<code> [^\n\r]</code>。  </p><p><code>/[\s\S]/g</code>  匹配所有。<code>\s </code>是匹配所有空白符，包括换行，<code>\S </code>非空白符，不包括换行。  </p><p><code>/[\w]/</code>  匹配字母、数字、下划线。等价于<code> [A-Za-z0-9_]</code>  </p><h4 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h4><table><thead><tr><th align="left">特别字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">$</td><td align="left">匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 ‘\n’ 或 ‘\r’。要匹配 $ 字符本身，请使用 $。</td></tr><tr><td align="left">( )</td><td align="left">标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 ( 和 )。</td></tr><tr><td align="left">*</td><td align="left">匹配前面的子表达式零次或多次。要匹配 * 字符，请使用<code> \*</code>。</td></tr><tr><td align="left">+</td><td align="left">匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 <code>\+</code>。</td></tr><tr><td align="left">.</td><td align="left">匹配除换行符 \n 之外的任何单字符。要匹配 . ，请使用<code>\.</code>。</td></tr><tr><td align="left">[</td><td align="left">标记一个中括号表达式的开始。要匹配 [，请使用<code> \[</code>。</td></tr><tr><td align="left">?</td><td align="left">匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用<code> \?</code>。</td></tr><tr><td align="left">\</td><td align="left">将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， ‘n’ 匹配字符 ‘n’。’\n’ 匹配换行符。序列 ‘\‘ 匹配 “&quot;，而 ‘(‘ 则匹配 “(“。</td></tr><tr><td align="left">^</td><td align="left"><strong>匹配输入字符串的开始位置，除非在方括号表达式中使用，当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合</strong>。要匹配 ^ 字符本身，请使用 <code>\^</code>。</td></tr><tr><td align="left">{</td><td align="left">标记限定符表达式的开始。要匹配 {，请使用<code> \&#123;</code>。</td></tr><tr><td align="left">|</td><td align="left">指明两项之间的一个选择。要匹配 |，请使用 <code>|</code>。</td></tr></tbody></table><h4 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h4><table><thead><tr><th align="left">字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">*</td><td align="left">匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td></tr><tr><td align="left">+</td><td align="left">匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td></tr><tr><td align="left">?</td><td align="left">匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 、 “does” 中的 “does” 、 “doxy” 中的 “do” 。? 等价于 {0,1}。</td></tr><tr><td align="left">{n}</td><td align="left">n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td></tr><tr><td align="left">{n,}</td><td align="left">n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td></tr><tr><td align="left">{n,m}</td><td align="left">m 和 n 均为非负整数，其中n &lt;&#x3D; m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td></tr></tbody></table><h4 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h4><table><thead><tr><th align="left">字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">^</td><td align="left">匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \n 或 \r 之后的位置匹配。</td></tr><tr><td align="left">$</td><td align="left">匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \n 或 \r 之前的位置匹配。</td></tr><tr><td align="left">\b</td><td align="left">匹配一个单词边界，即字与空格间的位置。</td></tr><tr><td align="left">\B</td><td align="left">非单词边界匹配。</td></tr></tbody></table><h4 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h4><p>用圆括号 <strong>()</strong> 将所有选择项括起来，相邻的选择项之间用 <strong>|</strong> 分隔。  </p><p><strong>()</strong> 表示捕获分组，**()** 会把每个分组里的匹配的值保存起来， 多个匹配值可以通过数字 n 来查看(<strong>n</strong> 是一个数字，表示第 n 个捕获组的内容)。  </p><p>但用圆括号会有一个副作用，使相关的匹配会被缓存，此时可用 <strong>?:</strong> 放在第一个选项前来消除这种副作用。</p><p>其中 <strong>?:</strong> 是非捕获元之一，还有两个非捕获元是 <strong>?&#x3D;</strong> 和 **?!**，这两个还有更多的含义，前者为正向预查，在任何开始匹配圆括号内的正则表达式模式的位置来匹配搜索字符串，后者为负向预查，在任何开始不匹配该正则表达式模式的位置来匹配搜索字符串。</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/366574CC-3706-4B4C-8782-1BFF4CF57582.jpg" class="lazyload placeholder" data-srcset="https://www.runoob.com/wp-content/uploads/2014/03/366574CC-3706-4B4C-8782-1BFF4CF57582.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p> <code>exp1(?=exp2)</code>：查找 exp2 前面的 exp1。  </p><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/reg-111.jpg" class="lazyload placeholder" data-srcset="https://www.runoob.com/wp-content/uploads/2014/03/reg-111.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><table><thead><tr><th align="left">修饰符</th><th align="left">含义</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">i</td><td align="left">ignore - 不区分大小写</td><td align="left">将匹配设置为不区分大小写，搜索时不区分大小写: A 和 a 没有区别。</td></tr><tr><td align="left">g</td><td align="left">global - 全局匹配</td><td align="left">查找所有的匹配项。</td></tr><tr><td align="left">m</td><td align="left">multi line - 多行匹配</td><td align="left">使边界字符 <strong>^</strong> 和 <strong>$</strong> 匹配每一行的开头和结尾，记住是多行，而不是整个字符串的开头和结尾。</td></tr><tr><td align="left">s</td><td align="left">特殊字符圆点 <strong>.</strong> 中包含换行符 <strong>\n</strong></td><td align="left">默认情况下的圆点 <strong>.</strong> 是 匹配除换行符 <strong>\n</strong> 之外的任何字符，加上 <strong>s</strong> 修饰符之后, <strong>.</strong> 中包含换行符 \n。</td></tr></tbody></table><h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><table><thead><tr><th align="left">\d</th><th>匹配一个数字字符。等价于 [0-9]。</th></tr></thead><tbody><tr><td align="left">\D</td><td>匹配一个非数字字符。等价于 <code>[^0-9]</code>。</td></tr><tr><td align="left">\f</td><td>匹配一个换页符。等价于 \x0c 和 \cL。</td></tr><tr><td align="left">\n</td><td>匹配一个换行符。等价于 \x0a 和 \cJ。</td></tr><tr><td align="left">\r</td><td>匹配一个回车符。等价于 \x0d 和 \cM。</td></tr><tr><td align="left">\s</td><td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于 <code>[ \f\n\r\t\v]</code>。</td></tr><tr><td align="left">\S</td><td>匹配任何非空白字符。等价于<code>[^ \f\n\r\t\v]</code>。</td></tr><tr><td align="left">\t</td><td>匹配一个制表符。等价于 \x09 和 \cI。</td></tr><tr><td align="left">\v</td><td>匹配一个垂直制表符。等价于 \x0b 和 \cK。</td></tr><tr><td align="left">\w</td><td>匹配字母、数字、下划线。等价于<code>&#39;[A-Za-z0-9_]&#39;</code>。</td></tr><tr><td align="left">\W</td><td>匹配非字母、数字、下划线。等价于<code> &#39;[^A-Za-z0-9_]&#39;</code>。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> regexp </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-bamboo文章Front-matter介绍</title>
      <link href="/2022/03/20/hexo-bamboo-wen-zhang-front-matter-jie-shao/"/>
      <url>/2022/03/20/hexo-bamboo-wen-zhang-front-matter-jie-shao/</url>
      
        <content type="html"><![CDATA[<h1 id="文章Front-matter介绍"><a href="#文章Front-matter介绍" class="headerlink" title="文章Front-matter介绍"></a>文章Front-matter介绍</h1><p>这个front-matter指的就是你文章写在最前面的那些参数，只针对这篇文章，下面的是hexo主题bamboo的参数，如下：  </p><pre class="line-numbers language-none"><code class="language-none">---title: Hexo主题--Bamboo介绍date: 2020-09-14 14:06swiper: true # 将该文章放入轮播图中swiperImg: &#39;&#x2F;medias&#x2F;1.jpg&#39; # 该文章在轮播图中的图片，可以是本地目录下图片也可以是http:&#x2F;&#x2F;xxx图片swiperDesc: &#39;文章的front-matter编辑&#39;img: &#39;&#x2F;medias&#x2F;1.jpg&#39; # 该文章图片，可以是本地目录下图片也可以是http:&#x2F;&#x2F;xxx图片categories: 前端tags: [Hexo, hexo-theme-bamboo]top: true---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th align="left">配置选项</th><th align="left">默认值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">title</td><td align="left"><code>Markdown</code> 的文件标题</td><td align="left">文章标题，强烈建议填写此选项</td></tr><tr><td align="left">date</td><td align="left">文件创建时的日期时间</td><td align="left">发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td align="left">swiper</td><td align="left">false</td><td align="left">表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td align="left">swiperImg</td><td align="left">无</td><td align="left">表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td align="left">swiperDesc</td><td align="left">无</td><td align="left">表示该文章在首页轮播封面需要显示的文字描述（摘要），如果没有，则使用<code>excerpt</code>，如果<code>excerpt</code>也没有，则取文章内容</td></tr><tr><td align="left">img</td><td align="left">无</td><td align="left">文章特征图，该文章显示的图片，没有则默认使用文章的特色图片</td></tr><tr><td align="left">excerpt</td><td align="left">无</td><td align="left">文章描述（摘要），该文章在首页的描述文字，如果没有，则取<code>swiperDesc</code>,如果<code>swiperDesc</code>也没有，则取文章内容（优先取<code>&lt;!-- more --&gt;</code>上面的内容）</td></tr><tr><td align="left">top</td><td align="left">false</td><td align="left">将该值设为true，则将该篇文章显示在首页的置顶栏目中</td></tr><tr><td align="left">toc</td><td align="left">true</td><td align="left">将该值设为false，则该篇文章不显示右侧目录</td></tr><tr><td align="left">tocOpen</td><td align="left">true</td><td align="left">将该值设为false，则该篇文章右侧目录默认收缩</td></tr><tr><td align="left">onlyTitle</td><td align="left">false</td><td align="left">文章详情页头部是否只显示标题，不显示日期等信息</td></tr><tr><td align="left">comments</td><td align="left">true</td><td align="left">将该值设为false，则该篇文章不显示评论</td></tr><tr><td align="left">share</td><td align="left">true</td><td align="left">将该值设为false，则该篇文章不显示分享按钮</td></tr><tr><td align="left">copyright</td><td align="left">true</td><td align="left">将该值设为false，则该篇文章不显示版权声明</td></tr><tr><td align="left">donate</td><td align="left">true</td><td align="left">将该值设为false，则该篇文章不显示打赏按钮</td></tr><tr><td align="left">bgImg</td><td align="left">-</td><td align="left">单独为这篇文章设置背景图片或者背景颜色，可以是数组，数组里面放图片链接，可以是字符串，字符串里面是颜色值，空值则背景颜色透明</td></tr><tr><td align="left">bgImgTransition</td><td align="left">fade</td><td align="left">该篇文章的bgImg设置为数组,该值表示背景图片切换的动画, 有三种值（fade, scale, translate-fade）</td></tr><tr><td align="left">bgImgDelay</td><td align="left">180000(三分钟)</td><td align="left">该篇文章的bgImg设置为数组,该值表示背景图片切换的延迟时间,</td></tr><tr><td align="left">categories</td><td align="left">无</td><td align="left">文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td align="left">prismjs</td><td align="left">无</td><td align="left">如果使用的是hexo自带的prismjs代码高亮，通过设置该值为该篇文章设置不同的代码高亮主题（default, coy, dark, funky, okaidia, solarizedlight, tomorrow, twilight）</td></tr><tr><td align="left">tags</td><td align="left">无</td><td align="left">文章标签，一篇文章可以多个标签</td></tr><tr><td align="left">mathjax</td><td align="left">false</td><td align="left">mathjax公式</td></tr><tr><td align="left">imgTop</td><td align="left">true</td><td align="left">设置为<code>false</code>则文章和自定义页面顶部不要图片</td></tr></tbody></table><p>果然做<code>搬运工</code>非常舒适，直接搬了<code>yuang大佬</code>的，方便自己以后查看！</p>]]></content>
      
      
      <categories>
          
          <category> bamboo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> bamboo </tag>
            
            <tag> front-matter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建站历程</title>
      <link href="/2022/03/20/jian-zhan-li-cheng/"/>
      <url>/2022/03/20/jian-zhan-li-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>算是拖了很久很久的事情了，大一就想要自己建个小站了，但是一直没有没有花时间去学习，这次下决心周末把他初步建完。经过这几天的实践，感觉建站真的挺不容易的（可能就是我菜）。本次建站花了两三天吧，都差不多是利用晚上的时间，晚上会熬到两点才去睡觉，终于算是初步完成。这次选用的是hexo进行搭建的博客，使用了yuong大佬的<a href="https://yuang01.gitee.io/">bamboo</a>主题，还算可以，有着丰富的功能，大佬也写了详细的新手教程，尽管不太完善，有些需要自己探索完成。  </p><p>说是自己搭建，其实就是下了个模板对着调整，说实话这个调整参数耗费了我不少时间，大部分时间就是在调整主题上面了。。。。使用hexo写博客，需要用到markdown的语法，虽然已经接触过多次了，CSDN上面的文章好像就是markdown写的，哦还可以使用<code>Typora</code>来写啊，差点忘记了。  </p><p>建立这个博客的初衷就是想要记录自己的生活和学习轨迹（<del>可能是想要成为一个<code>文人</code>？</del>），从文字就可以看得出来，我的文笔并不是太好，所以得多多练习，才能有所进步，当然本来重点就是来记录学习的情况（web真的好难啊-_-🙃）。  </p><p>希望搭了这个博客之后，有时间就来写点东西吧，毕竟不能白搭了。主要还是要写web的wp呢（<del>不能偷懒了</del>），以前写的wp放在了<a href="https://blog.csdn.net/m0_51326092?type=blog">CSDN</a>上，懒得搬运了，就这样吧o(╥﹏╥)o😇，冲冲冲！</p><p>看来只能写到这了。有缘人祝好😁</p><p>————————————  </p><p>后面心血来潮，就来调整了一下我的壁纸，主要是<code>《我想吃掉你的胰脏》</code>和<code>《那年我们》</code>的图，是我为数不多所喜爱的动漫和电视剧，<del>换个皮都这么开心</del>，后面再有时间就把<code>source</code>里面的图放到图库去吧，使用了hexo一段时间后，越发觉它的强大和方便之处，<del>不过写博客还是好麻烦，要花时间</del>，还要继续刷题呢。</p>]]></content>
      
      
      <categories>
          
          <category> 闲言碎语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建站 </tag>
            
            <tag> 闲言碎语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/03/18/hello-world/"/>
      <url>/2022/03/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><p>so fuck????</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> helloworld </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hello </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
